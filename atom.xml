<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闲云青烟的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.2019w.cn/"/>
  <updated>2018-03-06T14:52:24.000Z</updated>
  <id>https://blog.2019w.cn/</id>
  
  <author>
    <name>Rieko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>YAHOO 35条前端优化建议</title>
    <link href="https://blog.2019w.cn/2018/03/06/optimization/"/>
    <id>https://blog.2019w.cn/2018/03/06/optimization/</id>
    <published>2018-03-06T14:52:24.000Z</published>
    <updated>2018-03-06T14:52:24.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Excetional Performance 团队总结出了一系列可以提高网站速度的方法。可以分为 7大类 35条。包括内容 、服务器 、 CSS 、 JavaScript 、Cookie 、图片 、移动应用 ，七部分。</p><h1 id="一、内容部分"><a href="#一、内容部分" class="headerlink" title="一、内容部分"></a>一、内容部分</h1><hr><ul><li>尽量减少 HTTP请求</li><li>减少 DNS查找</li><li>避免跳转</li><li>缓存 Ajxa</li><li>推迟加载</li><li>提前加载</li><li>减少 DOM元素数量</li><li>用域名划分页面内容</li><li>使 frame数量最少</li><li>避免 404错误</li></ul><a id="more"></a><h3 id="1、尽量减少-HTTP请求次数"><a href="#1、尽量减少-HTTP请求次数" class="headerlink" title="1、尽量减少 HTTP请求次数"></a>1、尽量减少 HTTP请求次数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;终端用户响应的时间中，有 80%用于下载各项内容。这部分时间包括下载页面中的图像、样式表、脚本、 Flash等。通过减少页面中的元素可以减少 HTTP请求的次数。这是提高网页速度的关键步骤。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;减少页面组件的方法其实就是简化页面设计。那么有没有一种方法既能保持页面内容的丰富性又能达到加快响应时间的目的呢？这里有几条减少HTTP请求次数同时又可能保持页面内容丰富的技术。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合并文件是通过把所有的脚本放到一个文件中来减少 HTTP请求的方法，如可以简单地把所有的 CSS文件都放入一个样式表中。当脚本或者样式表在不同页面中使用时需要做不同的修 改，这可能会相对麻烦点，但即便如此也要把这个方法作为改善页面性能的重要一步。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS Sprites是减少图像请求的有效方法。把所有的背景图像都放到一个图片文件中，然后通过 CSS的 background-image和 background-position属性来显示图片的不同部分<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图片地图是把多张图片整合到一张图片中。虽然文件的总体大小不会改变，但是可 以减少 HTTP请求次数。图片地图只有在图片的所有组成部分在页面中是紧挨在一起的时候才能 使用，如导航栏。确定图片的坐标和可能会比较繁琐且容易出错，同时使用图片地图导航也不具有可读性，因此不推荐这种方法；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内联图像是使用 data:URL scheme的方法把图像数据加载页面中。这可能会增加页面的大 小。把内联图像放到样式表（可缓存）中可以减少 HTTP请求同时又避免增加页面文件的大小。但是内联图像现在还没有得到主流浏览器的 支持。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;减少页面的 HTTP请求次数是你首先要做的一步。这是改进首次访问用户等待时间的最重要的方法。 如同 Tenni Theurer的他的博客 Browser Cahe Usage - Exposed!中所说， HTTP请求在无缓存情况下占去了 40%到 60%的响应时间。让那些初次访问你网站的人获得更加快速的体验吧！</p><h3 id="2、减少-DNS查找次数"><a href="#2、减少-DNS查找次数" class="headerlink" title="2、减少 DNS查找次数"></a>2、减少 DNS查找次数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名系统（ DNS）提供了域名和 IP的对应关系，就像电话本中人名和他们的电话号码的关系一样。当你在浏览器地址栏中 输入 www.yahoo.com 时， DNS解析服务器就会返回这个域名对应的 IP地址。 DNS解析的过程同样也是需要时间的。一般情况下返回给定域名对应的 IP地址会花费 20到 120毫秒的时间。而且在这个过程中浏览器什么都不会做直到 DNS查找完毕。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缓存 DNS查找可以改善页面性能。这种缓存需要一个特定的缓存服务器，这种服务器一般属于用户的 ISP提供商或者本地局域网控制，但是它同样会在用户使用的计算机上产生缓存。 DNS信息会保留在操作系统的 DNS缓存中（微软 Windows系统中 DNS Client Service）。大多数浏览器有独立于操作系统以外的自己的缓存。由于浏览器有自己的缓存记录，因此在一次请求中它不会受到操作系统的影响。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internet Explorer 默认情况下对 DNS查找记录的缓存时间为 30分钟，它在注册表中的键值为 DnsCacheTimeout。 Firefox对 DNS的查找记录缓存时间为 1分钟，它在配置文件中的选项为 network.dnsCacheExpiration（ Fasterfox把这个选项改为了 1小时）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当客户端中的 DNS缓存都为空时（浏览器和操作系统都为空）， DNS查找的次数和页面中主机名的数量相同。这其中包括页面中 URL、图片、脚本文件、样式表、Flash对象等包含的主机名。减少主机名的数量可以减少DNS查找次数。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;减少主机名的数量还可以减少页面中并行下载的数量。减少 DNS查找次数可以节省响应时间，但是减少并行下载却会增加响应时间。我的指导原则是 把这些页面中的内容分割成至少两部分但不超过四部分。这种结果就是在减少 DNS查找次数和保持较高程度并行下载两者之间的权衡了。</p><h3 id="3、避免跳转"><a href="#3、避免跳转" class="headerlink" title="3、避免跳转"></a>3、避免跳转</h3><p>跳转是使用 301和 302代码实现的。下面是一个响应代码为 301的 HTTP头：<br>    HTTP/1.1 301 Moved Permanently<br>    Location: <a href="http://example.com/newuri" target="_blank" rel="external">http://example.com/newuri</a><br>    Content-Type: text/html</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器会把用户指向到 Location中指定的 URL。头文件中的所有信息在一次跳转中都是必需的，内容部分可以为空。不管他们的名 称， 301和 302响应都不会被缓存除非增加一个额外的头选项，如 Expires或者 Cache-Control来指定它缓存。 <meat>元素的刷新标签和JavaScript也可以实现 URL的跳转，但是如果你必须要跳转的时候，最好的方法就是使用标准的 3XXHTTP状态代码，这主要是为了确保“后退”按钮可以正确地使用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是要记住跳转会降低用户体验。在用户和 HTML文档中间增加一个跳转，会拖延页面中所有元素的显示，因为在 HTML文件被加载前任何文件（图像、 Flash等）都不会被下载。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种经常被网页开发者忽略却往往十分浪费响应时间的跳转现象。 这种现象发生在当 URL本该有斜杠（ /）却被忽略掉时。例如，当我们要访问 <code>http://astrology.yahoo.com/astrology</code>时，实际上返回的是一个包含 301代码的跳转，它指向的是 <code>http://astrology.yahoo.com/astrology/</code> （注意末尾的斜杠）。在 Apache服务器中可以使用 Alias 或者 mod_rewrite或者 the DirectorySlash来避免。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;连接新网站和旧网站是跳转功能经常被用到的另一种情况。这种情况 下往往要连接网站的不同内容然后根据用户的不同类型（如浏览器类型、用户账号所属类型）来进行跳转。使用跳转来实现两个网站的切换十分简单，需要的代码量 也不多。尽管使用这种方法对于开发者来说可以降低复杂程度，但是它同样降低用户体验。一个可替代方法就是如果两者在同一台服务器上时使用 Alias和 mod_rewrite和实现。如果是因为域名的不同而采用跳转，那么可以通过使用 Alias或者 mod_rewirte建立 CNAME（保存一个域名和另外一个域名之间关系的DNS记录）来替代。</meat></p><h3 id="4、可缓存的-AJAX"><a href="#4、可缓存的-AJAX" class="headerlink" title="4、可缓存的 AJAX"></a>4、可缓存的 AJAX</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ajax 经常被提及的一个好处就是由于其从后台服务器传输信息 的异步性而为用户带来的反馈的即时性。但是，使用 Ajax并不能保证用户不会在等待异步的 JavaScript和 XML响应上花费时间。在很多应用中，用户是否需要等待响应取决于 Ajax如何来使用。例如，在一个基于 Web的 Email客户端中，用户必须等待 Ajax返回符合他们条件的邮件查询结果。记住一点，“异步”并不异味着“即时”，这 很重要。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了提高性能，优化 Ajax响应是很重要的。提高 Ajxa性能的措施中最重要的方法就是使响应具有可缓存性，具体的讨论可以查看 Add an Expires or a Cache-Control Header。 其它的几条规则也同样适用于Ajax：</p><pre><code>1. Gizp 压缩文件2. 减少 DNS查找次数3. 精简 JavaScript4. 避免跳转5. 配置 ETags</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我们来看一个例子：一个 Web2.0的 Email客户端会使用 Ajax来自动完成对用户地址薄的下载。如果用户在上次使用过 Email web应用程序后没有对地址薄作任何的修改，而且 Ajax响应通过 Expire或者 Cacke-Control头来实现缓存，那么就可以直接从上一次的缓存中读取地址薄 了。必须告知浏览器是使用缓存中的地址薄还是发送一个新的请求。这可以通过为读取地址薄的 Ajax URL增加一个含有上次编辑时间的时间戳来实现，例如， &amp;t=11900241612等。如果地址薄在上次下载后没有被编辑过，时间 戳就不变，则从浏览器的缓存中加载从而减少了一次 HTTP请求过程。如果用户修改过地址薄，时间戳就会用来确定新的 URL和缓存响应并不匹配，浏览器就会重要请求更新地址薄。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即使你的 Ajxa响应是动态生成的，哪怕它只适用于一个用户，那么它也应该被缓存起来。这样做 可以使你的 Web2.0应用程序更加快捷。</p><h3 id="5、推迟加载内容"><a href="#5、推迟加载内容" class="headerlink" title="5、推迟加载内容"></a>5、推迟加载内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你可以仔细看一下你的网页，问问自己“哪些内容是页面呈现时 所必需首先加载的？哪些内容和结构可以稍后再加载？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把整个过程按照 onload事件分隔成两部分， JavaScript是一个理想的选择。例如，如果你有用于实现拖放和动画的 JavaScript，那么它就以等待稍后加载，因为页面上的拖放元素是在初始化呈现 之后才发生的。其它的例如隐藏部分的内容（用户操作之后才显现的内容）和处于折叠部分的图像也可以推迟加载<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工具可以节省你的工作量： YUI Image Loader可以帮你推迟加载折叠部分的图片， YUI Get utility是包含 JS和 CSS的便捷方法。比如你可以打开 Firebug的 Net选项卡看一下 Yahoo的首页。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当性能目标和其它网站开发实践一致时就会相得益彰。这种情况 下，通过程序提高网站性能的方法告诉我们，在支持 JavaScript的情况下，可以先去除用户体验，不过这要保证你的网站在没有 JavaScript也可以正常运行。在确定页面运行正常后，再加载脚本来实现如拖放和动画等更加花哨的效果。</p><h3 id="6、预加载"><a href="#6、预加载" class="headerlink" title="6、预加载"></a>6、预加载</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;预加载和后加载看起来似乎恰恰相反，但实际上预加载是为了实 现另外一种目标。预加载是在浏览器空闲时请求将来可能会用到的页面内容（如图像、样式表和脚本）。使用这种方法，当用户要访问下一个页面时，页面中的内容 大部分已经加载到缓存中了，因此可以大大改善访问速度。<br>下面提供了几种预加载方法：</p><ol><li><p>无条件加载：触发 onload事件时，直接加载额外的页面内容。以 Google.com为例，你可以看一下它的spirit image图像是怎样在 onload中加载的。这个 spirit image图像在 google.com主页中是不需要的，但是却可以在搜索结果页面中用到它。</p></li><li><p>有条件加载：根据用户的操作来有根据地判断用户下面可能去往的页面并相应的预 加载页面内容。在search.yahoo.com中你可以看到如何在你输入内容时加载额外的页面内容。</p></li><li><p>有预期的加载：载入重新设计过的页面时使用预加载。这种情况经常出现在页面经过重新设计后用户抱怨“新的页面看起来很酷，但是却比以前慢”。问题可能出在 用户对于你的旧站点建立了完整的缓存，而对于新站点却没有任何缓存内容。因此你可以在访问新站之前就加载一部内容来避免这种结果的出现。在你的旧站中利用 浏览器的空余时间加载新站中用到的图像的和脚本来提高访问速度。</p></li></ol><h3 id="7、减少-DOM元素数量"><a href="#7、减少-DOM元素数量" class="headerlink" title="7、减少 DOM元素数量"></a>7、减少 DOM元素数量</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个复杂的页面意味着需要下载更多数据，同时也意味着 JavaScript遍历 DOM的效率越慢。比如当你增加一个事件句柄时在 500和 5000个 DOM元素中循环效果肯定是不一样的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大量的 DOM元素的存在意味着页面中有可以不用移除内容只需要替换元素标签就可以精简的部分。你在页面布局中使用表格了吗？你有没有仅仅为了布局而引入更多的 <div>元素呢？也许会存在一个适合或者在语意是更贴切的标签可以供你使用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YUI CSS utilities 可以给你的布局带来巨大帮助： grids.css可以帮你实现整体布局， font.css和 reset.css可以帮助你移除浏览器默认格式。它提供了一个重新审视你页面中标签 的机会，比如只有在语意上有意义时才使用 div&gt;-，而不是因为它具有换行效果才使用它。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOM 元素数量很容易计算出来，只需要在 Firebug的控制台内输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>).length</div></pre></td></tr></table></figure></div></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么多少个 DOM元素算是多呢？这可以对照有很好标记使用的类似页面。比如 Yahoo!主页是一个内容非常多的页面，但是它只使用了 700个元素（ HTML标签）。</p><h3 id="8、根据域名划分页面内容"><a href="#8、根据域名划分页面内容" class="headerlink" title="8、根据域名划分页面内容"></a>8、根据域名划分页面内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把页面内容划分成若干部分可以使你最大限度地实现平行下载。由于 DNS查找带来的影响你首先要确保你使用的域名数量在 2个到 4个之间。例如，你可以把用到的 HTML内容和动态内容放在 <code>http://www.example.org/</code> 上，而把页面各种组件（图片、脚本、 CSS)分别存放在 statics1.example.org和 statics.example.org上。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你可在 Tenni Theurer和 Patty Chi合写的文章 Maximizing Parallel Downloads in the Carpool Lane找到更多相关信息。</p><h3 id="9、使-iframe的数量最小"><a href="#9、使-iframe的数量最小" class="headerlink" title="9、使 iframe的数量最小"></a>9、使 iframe的数量最小</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifrmae 元素可以在父文档中插入一个新的 HTML文档。了解 iframe的工作理然后才能更加有效地使用它，这一点很重要。<br>iframe优点：</p><ul><li>解决加载缓慢的第三方内容如图标和广告等的加载问题</li><li>Security sandbox</li><li>并行加载脚本</li></ul><p>iframe的缺点：</p><ul><li>即时内容为空，加载也需要时间</li><li>会阻止页面加载</li><li>没有语意</li></ul><h3 id="10、不要出现-404错误"><a href="#10、不要出现-404错误" class="headerlink" title="10、不要出现 404错误"></a>10、不要出现 404错误</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTP 请求时间消耗是很大的，因此使用 HTTP请求来获得一个没有用处的响应（例如 404没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有些站点把 404错误响应页面改为<code>你是不是要找 ***</code>，这虽然改进了用户体验但是同样也会浪费服务器资源（如数据库等）。最糟糕的 情况是指向外部 JavaScript的链接出现问题并返回 404代码。首先，这种加载会破坏并行加载；其次浏览器会把试图在返回的404响应内容中找到可能有用的部分当作 JavaScript代码来执行。</p><h1 id="二、服务器部分"><a href="#二、服务器部分" class="headerlink" title="二、服务器部分"></a>二、服务器部分</h1><hr><ul><li>使用内容分发网络</li><li>为文件头指定Expires或Cache-Control</li><li>Gzip压缩文件内容</li><li>配置ETag</li><li>尽早刷新输出缓冲 </li><li>使用GET来完成AJAX请求</li><li>避免空的图像来源</li></ul><h3 id="11、使用内容分发网络"><a href="#11、使用内容分发网络" class="headerlink" title="11、使用内容分发网络"></a>11、使用内容分发网络</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户与你网站服务器的接近程度会影响响应时间的长短。把你的网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。但是首先我们应该做些什么呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按地域布置网站内容的第一步并不是要尝试重新架构你的网站让他们在分发服务器上正常运行。根据应用的需求来改变网站结构，这可能会包括一些比较复杂的任 务，如在服务器间同步Session状态和合并数据库更新等。要想缩短用户和内容服务器的距离，这些架构步骤可能是不可避免的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要记住，在终端用户的响应时间中有80%到90%的响应时间用于下载图像、样式表、脚本、Flash等页面内容。这就是网站性能黄金守则。和重新设计你的 应用程序架构这样比较困难的任务相比，首先来分布静态内容会更好一点。这不仅会缩短响应时间，而且对于内容分发网络来说它更容易实现。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容分发网络（Content Delivery Network，CDN）是由一系列分散到各个不同地理位置上的Web服务器组成的，它提高了网站内容的传输速度。用于向用户传输内容的服务器主要是根据 和用户在网络上的靠近程度来指定的。例如，拥有最少网络跳数（network hops）和响应速度最快的服务器会被选定。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一些大型的网络公司拥有自己的CDN，但是使用像Akamai Technologies，Mirror Image Internet，或者Limelight Networks这样的CDN服务成本却非常高。对于刚刚起步的企业和个人网站来说，可能没有使用CDN的成本预算，但是随着目标用户群的不断扩大和更加 全球化，CDN就是实现快速响应所必需的了。以Yahoo来说，他们转移到CDN上的网站程序静态内容节省了终端用户20%以上的响应时间。使用CDN是一个只需要相对简单地修改代码实现显著改善网站访问速度的方法。</p><h3 id="12、为文件头指定Expires或Cache-Control"><a href="#12、为文件头指定Expires或Cache-Control" class="headerlink" title="12、为文件头指定Expires或Cache-Control"></a>12、为文件头指定Expires或Cache-Control</h3><p>这条守则包括两方面的内容：</p><ol><li>对于静态内容：设置文件头过期时间Expires的值为“Never expire”（永不过期）</li><li>对于动态内容：使用恰当的Cache-Control文件头来帮助浏览器进行有条件的请求</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网页内容设计现在越来越丰富，这就意味着页面中要包含更多的脚本、样式表、图片和Flash。第一次访问你页面的用户就意味着进行多次的HTTP请求，但 是通过使用Expires文件头就可以使这样内容具有缓存性。它避免了接下来的页面访问中不必要的HTTP请求。Expires文件头经常用于图像文件， 但是应该在所有的内容都使用他，包括脚本、样式表和Flash等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器（和代理）使用缓存来减少HTTP请求的大小和次数以加快页面访问速度。Web服务器在HTTP响应中使用Expires文件头来告诉客户端内容需 要缓存多长时间。下面这个例子是一个较长时间的Expires文件头，它告诉浏览器这个响应直到2010年4月15日才过期。<br>    Expires: Thu, 15 Apr 2010 20:00:00 GMT<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你使用的是Apache服务器，可以使用ExpiresDefault来设    ExpiresDefault “access plus 10 years”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要切记，如果使用了Expires文件头，当页面内容改变时就必须改变内容的文件名。依Yahoo!来说我们经常使用这样的步骤：在内容的文件名中加上版 本号，如yahoo_2.0.6.js。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用Expires文件头只有会在用户已经访问过你的网站后才会起作用。当用户首次访问你的网站时这对减少HTTP请求次数来说是无效的，因为浏览器的缓 存是空的。因此这种方法对于你网站性能的改进情况要依据他们“预缓存”存在时对你页面的点击频率（“预缓存”中已经包含了页面中的所有内容）。 Yahoo!建立了一套测量方法，我们发现所有的页面浏览量中有75~85%都有“预缓存”。通过使用Expires文件头，增加了缓存在浏览器中内容的 数量，并且可以在用户接下来的请求中再次使用这些内容，这甚至都不需要通过用户发送一个字节的请求。</p><h3 id="13、Gzip压缩文件内容"><a href="#13、Gzip压缩文件内容" class="headerlink" title="13、Gzip压缩文件内容"></a>13、Gzip压缩文件内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络传输中的HTTP请求和应答时间可以通过前端机制得到显著改善。的确，终端用户的带宽、互联网提供者、与对等交换点的靠近程度等都不是网站开发者所能 决定的。但是还有其他因素影响着响应时间。通过减小HTTP响应的大小可以节省HTTP响应时间。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从HTTP/1.1开始，web客户端都默认支持HTTP请求中有Accept-Encoding文件头的压缩格式：<br>    Accept-Encoding: gzip, deflate<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果web服务器在请求的文件头中检测到上面的代码，就会以客户端列出的方式压缩响应内容。Web服务器把压缩方式通过响应文件头中的Content- Encoding来返回给浏览器。<br>    Content-Encoding: gzip<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gzip是目前最流行也是最有效的压缩方式。这是由GNU项目开发并通过RFC 1952来标准化的。另外仅有的一个压缩格式是deflate，但是它的使用范围有限效果也稍稍逊色。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gzip大概可以减少70%的响应规模。目前大约有90%通过浏览器传输的互联网交换支持gzip格式。如果你使用的是Apache，gzip模块配置和 你的版本有关：Apache 1.3使用mod_zip，而Apache 2.x使用moflate。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器和代理都会存在这样的问题：浏览器期望收到的和实际接收到的内容会存在不匹配的现象。幸好，这种特殊情况随着旧式浏览器使用量的减少在减少。 Apache模块会通过自动添加适当的Vary响应文件头来避免这种状况的出现。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器根据文件类型来选择需要进行gzip压缩的文件，但是这过于限制了可压缩的文件。大多数web服务器会压缩HTML文档。对脚本和样式表进行压缩同 样也是值得做的事情，但是很多web服务器都没有这个功能。实际上，压缩任何一个文本类型的响应，包括XML和JSON，都值得的。图像和PDF文件由于 已经压缩过了所以不能再进行gzip压缩。如果试图gizp压缩这些文件的话不但会浪费CPU资源还会增加文件的大小。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gzip压缩所有可能的文件类型是减少文件体积增加用户体验的简单方法。</p><h3 id="14、配置ETag"><a href="#14、配置ETag" class="headerlink" title="14、配置ETag"></a>14、配置ETag</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entity tags（ETags）（实体标签）是web服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制（“实体”就是所说的“内 容”，包括图片、脚本、样式表等）。增加ETag为实体的验证提供了一个比使用“last-modified date（上次编辑时间）”更加灵活的机制。Etag是一个识别内容版本号的唯一字符串。唯一的格式限制就是它必须包含在双引号内。原始服务器通过含有 ETag文件头的响应指定页面内容的ETag。<br>    HTTP/1.1 200 OK<br>    Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT<br>    ETag: “10c24bc-4ab-457e1c1f”<br>    Content-Length: 12195<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;稍后，如果浏览器要验证一个文件，它会使用If-None-Match文件头来把ETag传回给原始服务器。在这个例子中，如果ETag匹配，就会返回一 个304状态码，这就节省了12195字节的响应。      GET /i/yahoo.gif HTTP/1.1<br>    Host: us.yimg.com<br>    If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT<br>    If-None-Match: “10c24bc-4ab-457e1c1f”<br>    HTTP/1.1 304 Not Modified<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ETag的问题在于，它是根据可以辨别网站所在的服务器的具有唯一性的属性来生成的。当浏览器从一台服务器上获得页面内容后到另外一台服务器上进行验证时 ETag就会不匹配，这种情况对于使用服务器组和处理请求的网站来说是非常常见的。默认情况下，Apache和IIS都会把数据嵌入ETag中，这会显著 减少多服务器间的文件验证冲突。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apache 1.3和2.x中的ETag格式为inode-size-timestamp。即使某个文件在不同的服务器上会处于相同的目录下，文件大小、权限、时间戳 等都完全相同，但是在不同服务器上他们的内码也是不同的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IIS 5.0和IIS 6.0处理ETag的机制相似。IIS中的ETag格式为Filetimestamp:ChangeNumber。用ChangeNumber来跟踪 IIS配置的改变。网站所用的不同IIS服务器间ChangeNumber也不相同。不同的服务器上的Apache和IIS即使对于完全相同的内容产生的 ETag在也不相同，用户并不会接收到一个小而快的304响应；相反他们会接收一个正常的200响应并下载全部内容。如果你的网站只放在一台服务器上，就 不会存在这个问题。但是如果你的网站是架设在多个服务器上，并且使用Apache和 IIS产生默认的ETag配置，你的用户获得页面就会相对慢一点，服务器会传输更多的内容，占用更多的带宽，代理也不会有效地缓存你的网站内容。即使你的 内容拥有Expires文件头，无论用户什么时候点击“刷新”或者“重载”按钮都会发送相应的GET请求。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你没有使用ETag提供的灵活的验证模式，那么干脆把所有的ETag都去掉会更好。Last-Modified文件头验证是基于内容的时间戳的。去掉 ETag文件头会减少响应和下次请求中文件的大小。微软的这篇支持文稿讲述了如何去掉ETag。在Apache中，只需要在配置文件中简单添加下面一行代 码就可以了：<br>    FileETag none</p><h3 id="15、尽早刷新输出缓冲"><a href="#15、尽早刷新输出缓冲" class="headerlink" title="15、尽早刷新输出缓冲"></a>15、尽早刷新输出缓冲</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当用户请求一个页面时，无论如何都会花费200到500毫秒用于后台组织HTML文件。在这期间，浏览器会一直空闲等待数据返回。在PHP中，你可以使用 flush()方法，它允许你把已经编译的好的部分HTML响应文件先发送给浏览器，这时浏览器就会可以下载文件中的内容（脚本等）而后台同时处理剩余的 HTML页面。这样做的效果会在后台烦恼或者前台较空闲时更加明显。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;输出缓冲应用最好的一个地方就是紧跟在head之后，因为HTML的头部分容易生成而且头部往往包含CSS和JavaScript文件，这样浏览器就可以在后台编译剩余HTML的同时并行下 载它们。 例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">... &lt;!-- css, js --&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;?php flush(); ?&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">... &lt;!-- content --&gt;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了证明使用这项技术的好处，Yahoo!搜索率先研究并完成了用户测试。</p><h3 id="16、使用GET来完成AJAX请求"><a href="#16、使用GET来完成AJAX请求" class="headerlink" title="16、使用GET来完成AJAX请求"></a>16、使用GET来完成AJAX请求</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Yahoo!Mail团队发现，当使用XMLHttpRequest时，浏览器中的POST方法是一个“两步走”的过程：首先发送文件头，然后才发送数 据。因此使用GET最为恰当，因为它只需发送一个TCP包（除非你有很多cookie）。IE中URL的最大长度为2K，因此如果你要发送一个超过2K的 数据时就不能使用GET了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个有趣的不同就是POST并不像GET那样实际发送数据。根据HTTP规范，GET意味着“获取”数据，因此当你仅仅获取数据时使用GET更加有意义 （从语意上讲也是如此），相反，发送并在服务端保存数据时使用POST。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此之外，JavaScript和CSS也是我们页面中经常用到的内容，对它们的优化也提高网站性能的重要方面。</p><h1 id="三、CSS部分"><a href="#三、CSS部分" class="headerlink" title="三、CSS部分"></a>三、CSS部分</h1><hr><ul><li>把样式表置于顶部</li><li>避免使用CSS表达式（）</li><li>用<link>代替@import</li><li>避免使用滤镜</li></ul><h3 id="17、把样式表置于顶部"><a href="#17、把样式表置于顶部" class="headerlink" title="17、把样式表置于顶部"></a>17、把样式表置于顶部</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在研究Yahoo!的性能表现时，我们发现把样式表放到文档的head内部似乎会加快页面的下载速度。这是因为把样式表放到head内会使页面有步骤的加载显示。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注重性能的前端服务器往往希望页面有秩序地加载。同时，我们也希望浏览器把已经接收到内容尽可能显示出来。这对于拥有较多内容的页面和网速较慢的用户来说 特别重要。向用户返回可视化的反馈，比如进程指针，已经有了较好的研究并形成了正式文档。在我们的研究中HTML页面就是进程指针。当浏览器有序地加载文 件头、导航栏、顶部的logo等对于等待页面加载的用户来说都可以作为可视化的反馈。这从整体上改善了用户体验。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把样式表放在文档底部的问题是在包括Internet Explorer在内的很多浏览器中这会中止内容的有序呈现。浏览器中止呈现是为了避免样式改变引起的页面元素重绘。用户不得不面对一个空白页面。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTML规范清楚指出样式表要放包含在页面的head区域内：“和a不同，link只能出现在文档的head区域内，尽管它可以多次使用它”。无论是引起白屏还是出现没有样式化的内容都不值得去尝试。最好的方案就是按照HTML规范在文 档head内加载你的样式表。</p><h3 id="18、避免使用CSS表达式（）"><a href="#18、避免使用CSS表达式（）" class="headerlink" title="18、避免使用CSS表达式（）"></a>18、避免使用CSS表达式（）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS表达式是动态设置CSS属性的强大（但危险）方法。Internet Explorer从第5个版本开始支持CSS表达式。下面的例子中，使用CSS表达式可以实现隔一个小时切换一次背景颜色：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-color</span>: ( (<span class="selector-tag">new</span> <span class="selector-tag">Date</span>())<span class="selector-class">.getHours</span>()%2 ? "<span class="selector-id">#B8D4FF</span>" : "<span class="selector-id">#F08A00</span>" );</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上所示，中使用了JavaScript表达式。CSS属性根据JavaScript表达式的计算结果来设置。 方法在其它浏览器中不起作用，因此在跨浏览器的设计中单独针对Internet Explorer设置时会比较有用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给CSS表达式增加 一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到10000次以上的计算量。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个减少CSS表达式计算次数的方法就是使用一次性的表达式，它在第一次运行时将结果赋给指定的样式属性，并用这个属性来代替CSS表达式。如果样式属性 必须在页面周期内动态地改变，使用事件句柄来代替CSS表达式是一个可行办法。如果必须使用CSS表达式，一定要记住它们要计算成千上万次并且可能会对你 页面的性能产生影响。</p><h3 id="19、用代替-import"><a href="#19、用代替-import" class="headerlink" title="19、用代替@import"></a>19、用<link>代替@import</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面的最佳实现中提到CSS应该放置在顶端以利于有序加载呈现。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在IE中，页面底部@import和使用link作用是一样的，因此最好不要使用它。</p><h3 id="20、避免使用滤镜"><a href="#20、避免使用滤镜" class="headerlink" title="20、避免使用滤镜"></a>20、避免使用滤镜</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IE独有属性AlphaImageLoader用于修正7.0以下版本中显示PNG图片的半透明效果。这个滤镜的问题在于浏览器加载图片时它会终止内容的 呈现并且冻结浏览器。在每一个元素（不仅仅是图片）它都会运算一次，增加了内存开支，因此它的问题是多方面的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完全避免使用AlphaImageLoader的最好方法就是使用PNG8格式来代替，这种格式能在IE中很好地工作。如果你确实需要使用 AlphaImageLoader，请使用下划线_filter又使之对IE7以上版本的用户无效。</p><h1 id="四、-JavaScript部分"><a href="#四、-JavaScript部分" class="headerlink" title="四、 JavaScript部分"></a>四、 JavaScript部分</h1><hr><ul><li>把脚本置于页面底部</li><li>使用外部JavaScript和CSS</li><li>削减JavaScript和CSS</li><li>剔除重复脚本</li><li>减少DOM访问 </li><li>发智能事件处理程序</li></ul><h3 id="21、把脚本置于页面底部"><a href="#21、把脚本置于页面底部" class="headerlink" title="21、把脚本置于页面底部"></a>21、把脚本置于页面底部</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;脚本带来的问题就是它阻止了页面的平行下载。HTTP/1.1 规范建议，浏览器每个主机名的并行下载内容不超过两个。如果你的图片放在多个主机名上，你可以在每个并行下载中同时下载2个以上的文件。但是当下载脚本 时，浏览器就不会同时下载其它文件了，即便是主机名不相同。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在某些情况下把脚本移到页面底部可能不太容易。比如说，如果脚本中使用了document.write来插入页面内容，它就不能被往下移动了。这里可能还 会有作用域的问题。很多情况下，都会遇到这方面的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个经常用到的替代方法就是使用延迟脚本。DEFER属性表明脚本中没有包含document.write，它告诉浏览器继续显示。不幸的 是，Firefox并不支持DEFER属性。在Internet Explorer中，脚本可能会被延迟但效果也不会像我们所期望的那样。如果脚本可以被延迟，那么它就可以移到页面的底部。这会让你的页面加载的快一点。</p><h3 id="22、使用外部JavaScript和CSS"><a href="#22、使用外部JavaScript和CSS" class="headerlink" title="22、使用外部JavaScript和CSS"></a>22、使用外部JavaScript和CSS</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多性能规则都是关于如何处理外部文件的。但是，在你采取这些措施前你可能会问到一个更基本的问题：JavaScript和CSS是应该放在外部文件中呢 还是把它们放在页面本身之内呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际应用中使用外部文件可以提高页面速度，因为JavaScript和CSS文件都能在浏览器中产生缓存。内置在HTML文档中的JavaScript 和CSS则会在每次请求中随HTML文档重新下载。这虽然减少了HTTP请求的次数，却增加了HTML文档的大小。从另一方面来说，如果外部文件中的 JavaScript和CSS被浏览器缓存，在没有增加HTTP请求次数的同时可以减少HTML文档的大小。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关键问题是，外部JavaScript和CSS文件缓存的频率和请求HTML文档的次数有关。虽然有一定的难度，但是仍然有一些指标可以一测量它。如果一 个会话中用户会浏览你网站中的多个页面，并且这些页面中会重复使用相同的脚本和样式表，缓存外部文件就会带来更大的益处。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;许多网站没有功能建立这些指标。对于这些网站来说，最好的坚决方法就是把JavaScript和CSS作为外部文件引用。比较适合使用内置代码的例外就是 网站的主页，如Yahoo!主页和My Yahoo!。主页在一次会话中拥有较少（可能只有一次）的浏览量，你可以发现内置JavaScript和CSS对于终端用户来说会加快响应时 间。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于拥有较大浏览量的首页来说，有一种技术可以平衡内置代码带来的HTTP请求减少与通过使用外部文件进行缓存带来的好处。其中一个就是在首页中内置 JavaScript和CSS，但是在页面下载完成后动态下载外部文件，在子页面中使用到这些文件时，它们已经缓存到浏览器了。</p><h3 id="23、削减JavaScript和CSS"><a href="#23、削减JavaScript和CSS" class="headerlink" title="23、削减JavaScript和CSS"></a>23、削减JavaScript和CSS</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;精简是指从去除代码不必要的字符减少文件大小从而节省下载时间。消减代码时，所有的注释、不需要的空白字符（空格、换行、tab缩进）等都要去掉。在 JavaScript中，由于需要下载的文件体积变小了从而节省了响应时间。精简JavaScript中目前用到的最广泛的两个工具是JSMin和YUI Compressor。YUI Compressor还可用于精简CSS。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;混淆是另外一种可用于源代码优化的方法。这种方法要比精简复杂一些并且在混淆的过程更易产生问题。在对美国前10大网站的调查中发现，精简也可以缩小原来 代码体积的21%，而混淆可以达到25%。尽管混淆法可以更好地缩减代码，但是对于JavaScript来说精简的风险更小。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除消减外部的脚本和样式表文件外，script和style代码块也可以并且应该进行消减。即使你用Gzip压缩过脚本 和样式表，精简这些文件仍然可以节省5%以上的空间。由于JavaScript和CSS的功能和体积的增加，消减代码将会获得益处。</p><h3 id="24、剔除重复脚本"><a href="#24、剔除重复脚本" class="headerlink" title="24、剔除重复脚本"></a>24、剔除重复脚本</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在同一个页面中重复引用JavaScript文件会影响页面的性能。你可能会认为这种情况并不多见。对于美国前10大网站的调查显示其中有两家存在重复引 用脚本的情况。有两种主要因素导致一个脚本被重复引用的奇怪现象发生：团队规模和脚本数量。如果真的存在这种情况，重复脚本会引起不必要的HTTP请求和 无用的JavaScript运算，这降低了网站性能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Internet Explorer中会产生不必要的HTTP请求，而在Firefox却不会。在Internet Explorer中，如果一个脚本被引用两次而且它又不可缓存，它就会在页面加载过程中产生两次HTTP请求。即时脚本可以缓存，当用户重载页面时也会产 生额外的HTTP请求。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除增加额外的HTTP请求外，多次运算脚本也会浪费时间。在Internet Explorer和Firefox中不管脚本是否可缓存，它们都存在重复运算JavaScript的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个避免偶尔发生的两次引用同一脚本的方法是在模板中使用脚本管理模块引用脚本。在HTML页面中使用script标签引用脚本的最常见方法就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"menu_1.0.17.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在PHP中可以通过创建名为insertScript的方法来替代：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> insertScript(<span class="string">"menu.js"</span>) <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了防止多次重复引用脚本，这个方法中还应该使用其它机制来处理脚本，如检查所属目录和为脚本文件名中增加版本号以用于Expire文件头等。</p><h3 id="25、减少DOM访问"><a href="#25、减少DOM访问" class="headerlink" title="25、减少DOM访问"></a>25、减少DOM访问</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用JavaScript访问DOM元素比较慢，因此为了获得更多的应该页面，应该做到：</p><ol><li>缓存已经访问过的有关元素 </li><li>线下更新完节点之后再将它们添加到文档树中 </li><li>避免使用JavaScript来修改页面布局 </li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有关此方面的更多信息请查看Julien Lecomte在YUI专题中的文章“高性能Ajax应该程序”。</p><h3 id="26、开发智能事件处理程序"><a href="#26、开发智能事件处理程序" class="headerlink" title="26、开发智能事件处理程序"></a>26、开发智能事件处理程序</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候我们会感觉到页面反应迟钝，这是因为DOM树元素中附加了过多的事件句柄并且些事件句病被频繁地触发。这就是为什么说使用event delegation（事件代理）是一种好方法了。如果你在一个div中有10个按钮，你只需要在div上附加一次事件句柄就可以了，而不用去为每一个按 钮增加一个句柄。事件冒泡时你可以捕捉到事件并判断出是哪个事件发出的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你同样也不用为了操作DOM树而等待onload事件的发生。你需要做的就是等待树结构中你要访问的元素出现。你也不用等待所有图像都加载完毕。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你可能会希望用DOMContentLoaded事件来代替 事件应用程序中的onAvailable方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有关此方面的更多信息请查看Julien Lecomte在YUI专题中的文章“高性能Ajax应该程序”。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图片和Coockie也是我们网站中几乎不可缺少组成部分，此外随着移动设备的流行，对于移动应用的优化也十分重要。这主要包括：</p><h1 id="五、Coockie部分"><a href="#五、Coockie部分" class="headerlink" title="五、Coockie部分"></a>五、Coockie部分</h1><hr><ul><li>减小Cookie体积</li><li>对于页面内容使用无coockie域名</li></ul><h3 id="27、减小Cookie体积"><a href="#27、减小Cookie体积" class="headerlink" title="27、减小Cookie体积"></a>27、减小Cookie体积</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTP coockie可以用于权限验证和个性化身份等多种用途。coockie内的有关信息是通过HTTP文件头来在web服务器和浏览器之间进行交流的。因此 保持coockie尽可能的小以减少用户的响应时间十分重要。<br>有关更多信息可以查看Tenni Theurer和Patty Chi的文章“When the Cookie Crumbles”。这们研究中主要包括：</p><ol><li>去除不必要的coockie<br>使coockie体积尽量小以减少对用户响应的影响<br>注意在适应级别的域名上设置coockie以便使子域名不受影响<br>设置合理的过期时间。较早地Expire时间和不要过早去清除coockie，都会改善用户的响应时间。</li></ol><h3 id="28、对于页面内容使用无coockie域名"><a href="#28、对于页面内容使用无coockie域名" class="headerlink" title="28、对于页面内容使用无coockie域名"></a>28、对于页面内容使用无coockie域名</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当浏览器在请求中同时请求一张静态的图片和发送coockie时，服务器对于这些coockie不会做任何地使用。因此他们只是因为某些负面因素而创建的 网络传输。所有你应该确定对于静态内容的请求是无coockie的请求。创建一个子域名并用他来存放所有静态内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你的域名是<code>http://www.example.org/</code>，你可以在static.example.org上存在静态内容。但是，如果你不是在<code>http://www.example.org/</code> 上而是在顶级域名example.org设置了coockie，那么所有对于static.example.org的请求都包含coockie。在这种情 况下，你可以再重新购买一个新的域名来存在静态内容，并且要保持这个域名是无coockie的。Yahoo!使用的是ymig.com，YouTube使 用的是ytimg.com，Amazon使用的是images-anazon.com等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用无coockie域名存在静态内容的另外一个好处就是一些代理（服务器）可能会拒绝对coockie的内容请求进行缓存。一个相关的建议就是，如果你 想确定应该使用example.org还是<a href="http://www.example.org/" target="_blank" rel="external">http://www.example.org/</a> 作为你的一主页，你要考虑到coockie带来的影响。忽略掉www会使你除了把coockie设置到<code>*.example.org（*是泛域名解析，代表 了所有子域名译者dudo注）外没有其它选择，因此出于性能方面的考虑最好是使用带有www的子域名并且在它上面设置coockie。</code></p><h1 id="六、Image-部分"><a href="#六、Image-部分" class="headerlink" title="六、Image 部分"></a>六、Image 部分</h1><hr><ul><li>优化图像</li><li>优化CSS Spirite</li><li>不要在HTML中缩放图像</li><li>favicon.ico要小而且可缓存</li></ul><h3 id="29、优化图像"><a href="#29、优化图像" class="headerlink" title="29、优化图像"></a>29、优化图像</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设计人员完成对页面的设计之后，不要急于将它们上传到web服务器，这里还需要做几件事：<br>你可以检查一下你的GIF图片中图像颜色的数量是否和调色板规格一致。 使用imagemagick中下面的命令行很容易检查：<br>    identify -verbose image.gif<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你发现图片中只用到了4种颜色，而在调色板的中显示的256色的颜色槽，那么这张图片就还有压缩的空间。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尝试把GIF格式转换成PNG格式，看看是否节省空间。大多数情况下是可以压缩的。由于浏览器支持有限，设计者们往往不太乐意使用PNG格式的图片，不过 这都是过去的事情了。现在只有一个问题就是在真彩PNG格式中的alpha通道半透明问题，不过同样的，GIF也不是真彩格式也不支持半透明。因此GIF 能做到的，PNG（PNG8）同样也能做到（除了动画）。下面这条简单的命令可以 安全地把GIF格式转换为PNG格式：<br>    convert image.gif image.png<br>“我们要说的是：给PNG一个施展身手的机会吧！”<br>在所有的PNG图片上运行pngcrush（或者其它PNG优化工具）。例如：<br>    pngcrush image.png -rem alla -reduce -brute result.png<br>在所有的JPEG图片上运行jpegtran。这个工具可以对图片中的出现的锯齿等做无损操作，同时它还可以用于优化和清除图片中的注释以及其它无用信息 （如EXIF信息）：<br>    jpegtran -copy none -optimize -perfect src.jpg dest.jpg</p><h3 id="30、优化CSS-Spirite"><a href="#30、优化CSS-Spirite" class="headerlink" title="30、优化CSS Spirite"></a>30、优化CSS Spirite</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Spirite中水平排列你的图片，垂直排列会稍稍增加文件大小；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spirite中把颜色较近的组合在一起可以降低颜色数，理想状况是低于256色以便适用PNG8格式；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;便于移动，不要在Spirite的图像中间留有较大空隙。这虽然不大会增加文件大小但对于用户代理来说它需要更少的内存来把图片解压为像素地图。 100x100的图片为1万像素，而1000x1000就是100万像素。</p><h3 id="31、不要在HTML中缩放图像"><a href="#31、不要在HTML中缩放图像" class="headerlink" title="31、不要在HTML中缩放图像"></a>31、不要在HTML中缩放图像</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不要为了在HTML中设置长宽而使用比实际需要大的图片。如果你需要：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"mycat.jpg"</span> <span class="attr">alt</span>=<span class="string">"My Cat"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么你的图片（mycat.jpg）就应该是100x100像素而不是把一个500x500像素的图片缩小使用。</p><h3 id="32、favicon-ico要小而且可缓存"><a href="#32、favicon-ico要小而且可缓存" class="headerlink" title="32、favicon.ico要小而且可缓存"></a>32、favicon.ico要小而且可缓存</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;favicon.ico是位于服务器根目录下的一个图片文件。它是必定存在的，因为即使你不关心它是否有用，浏览器也会对它发出请求，因此最好不要返回一 个404 Not Found的响应。由于是在同一台服务器上，它每被请求一次coockie就会被发送一次。这个图片文件还会影响下载顺序，例如在IE中当你在 onload中请求额外的文件时，favicon会在这些额外内容被加载前下载。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，为了减少favicon.ico带来的弊端，要做到：</p><ol><li>文件尽量地小，最好小于1K </li><li>在适当的时候（也就是你不要打算再换favicon.ico的时候，因为更换新文件时不能对它进行重命名）为它设置Expires文件头。你可以很安全地 把Expires文件头设置为未来的几个月。你可以通过核对当前favicon.ico的上次编辑时间来作出判断。 </li><li>Imagemagick可以帮你创建小巧的favicon。</li></ol><h1 id="七、-Mobile部分"><a href="#七、-Mobile部分" class="headerlink" title="七、 Mobile部分"></a>七、 Mobile部分</h1><hr><ul><li>保持单个内容小于25K</li><li>打包组件成复合文本</li></ul><h3 id="33、保持单个内容小于25K"><a href="#33、保持单个内容小于25K" class="headerlink" title="33、保持单个内容小于25K"></a>33、保持单个内容小于25K</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这条限制主要是因为iPhone不能缓存大于25K的文件。注意这里指的是解压缩后的大小。由于单纯gizp压缩可能达不要求，因此精简文件就显得十分重要。</p><h3 id="34、打包组件成复合文本"><a href="#34、打包组件成复合文本" class="headerlink" title="34、打包组件成复合文本"></a>34、打包组件成复合文本</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把页面内容打包成复合文本就如同带有多附件的Email，它能够使你在一个HTTP请求中取得多个组件（切记：HTTP请求是很奢侈的）。当你使用这条规 则时，首先要确定用户代理是否支持（iPhone就不支持）。</p><h3 id="35、避免空的图像来源"><a href="#35、避免空的图像来源" class="headerlink" title="35、避免空的图像来源"></a>35、避免空的图像来源</h3><p>一个src属性为空串的图像有两种情况：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1． 直接的HTML</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></div><div class="line"></div><div class="line">2． JavaScript</div><div class="line"></div><div class="line">var img = new Image();</div><div class="line">img.src = "";</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这两种情况都会引起同样的效果：浏览器会再次向你的服务器发出请求。</p><p>Internet Explorer 将向这个页面所在的目录发出一个请求<br>Safari and Chrome 将发出对这个页面的一个请求。<br>Firefox 3 和更早的版本所采取的动作和Safari and Chrome一样，但是 3.5版本 addressed this issue[bug 444931] and no longer sends a request.<br>Opera 不进行任何操作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个行为为何是不好的？</p><ol><li><p>发送大量突然的请求将使你的服务器宕机（Cripple your servers），尤其是每天有数百万访问量的页面。</p></li><li><p>产生一个从未浏览过的页面将浪费服务器的计算周期（computing cycles）</p></li><li><p>损坏用户数据。如果你在请求中追踪状态（以cookie或是其他的方式），你可能会损坏数据。即使这个图像请求并没有返回一个图像，所有的头被浏览器读取并接受，包括所有cookie。While the rest of the response is thrown away, the damage may already be done.</p></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;引起这种行为的根源在于浏览器中URI的解析方式。这种行为定义在RFC 3986 - Uniform Resource Identifiers.当一个空串作为一个URI时，它被认为一个相对URI（relative URI）并通过定义在section 5.2中的算法被解析。这个特例，一个空串，列在section 5.4当中。Firefox, Safari, and Chrome都是依据这一规格来解析空串，而Internet Explorer则不正确的解析这个串，符合更早的一个规范，RFC 2396 - Uniform Resource Identifiers (this was obsoleted by RFC 3986).所以技术上，浏览器都在做它们被期望所做的事情来解析relative URIs，问题是在这个范围，空串不是故意造成的。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Excetional Performance 团队总结出了一系列可以提高网站速度的方法。可以分为 7大类 35条。包括内容 、服务器 、 CSS 、 JavaScript 、Cookie 、图片 、移动应用 ，七部分。&lt;/p&gt;
&lt;h1 id=&quot;一、内容部分&quot;&gt;&lt;a href=&quot;#一、内容部分&quot; class=&quot;headerlink&quot; title=&quot;一、内容部分&quot;&gt;&lt;/a&gt;一、内容部分&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;尽量减少 HTTP请求&lt;/li&gt;
&lt;li&gt;减少 DNS查找&lt;/li&gt;
&lt;li&gt;避免跳转&lt;/li&gt;
&lt;li&gt;缓存 Ajxa&lt;/li&gt;
&lt;li&gt;推迟加载&lt;/li&gt;
&lt;li&gt;提前加载&lt;/li&gt;
&lt;li&gt;减少 DOM元素数量&lt;/li&gt;
&lt;li&gt;用域名划分页面内容&lt;/li&gt;
&lt;li&gt;使 frame数量最少&lt;/li&gt;
&lt;li&gt;避免 404错误&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端优化" scheme="https://blog.2019w.cn/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="YAHOO" scheme="https://blog.2019w.cn/tags/YAHOO/"/>
    
      <category term="35条" scheme="https://blog.2019w.cn/tags/35%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>ES6入门——Set和Map数据结构</title>
    <link href="https://blog.2019w.cn/2018/03/06/ES6-map%20and%20set/"/>
    <id>https://blog.2019w.cn/2018/03/06/ES6-map and set/</id>
    <published>2018-03-06T13:56:56.000Z</published>
    <updated>2018-03-06T13:56:56.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>ES6提供了新的数据结构Set。类似于数组，只不过其成员值都是唯一的，没有重复的值。<br>    Set本身是一个构造函数，用来生成Set数据结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"></div><div class="line"><span class="comment">// 通过add方法向Set结构中加入成员</span></div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x))</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">of</span> s) &#123; <span class="built_in">console</span>.log(i) &#125;</div><div class="line"><span class="comment">// 2 3 4 5 （表明set结构不会添加重复的值）</span></div></pre></td></tr></table></figure></p><p>Set结构接收一个数组作为参数，用来初始化。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</div><div class="line"></div><div class="line">items.size </div><div class="line"><span class="comment">// 5</span></div></pre></td></tr></table></figure></p><p>向Set加入值的时候，不会发生类型转换。这意味着，在Set中5和”5”是两个不同的值。</p><h3 id="Set结构有以下属性："><a href="#Set结构有以下属性：" class="headerlink" title="Set结构有以下属性："></a>Set结构有以下属性：</h3><ul><li>Set.prototype.constructor: 构造函数，默认就是Set函数。</li><li>set.prototype.size : 返回Set的成员总数。</li></ul><h3 id="Set结构有以下方法："><a href="#Set结构有以下方法：" class="headerlink" title="Set结构有以下方法："></a>Set结构有以下方法：</h3><ul><li>add(value) : 添加某个值。</li><li>delete(value) : 删除某个值。</li><li>has(value) : 返回一个布尔值，表示该值是否为Set的成员。</li><li>clear() : 清除所有成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>); <span class="comment">// 注意“2”被加入了两次</span></div><div class="line">s.size <span class="comment">//2</span></div><div class="line"></div><div class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></div><div class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></div><div class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></div><div class="line"></div><div class="line">s.delete(<span class="number">2</span>);</div><div class="line">s.has(<span class="number">2</span>)  <span class="comment">// false</span></div></pre></td></tr></table></figure><p>下面对比以下，看看在判断是否包括一个键上面，对象和Set的写法有哪些不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对象写法</span></div><div class="line"><span class="keyword">var</span> properties = &#123;</div><div class="line">    <span class="string">"width"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"height"</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( properties[someName]) &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/****************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// Set的写法</span></div><div class="line"><span class="keyword">var</span> properties = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"></div><div class="line">properties.add(<span class="string">'width'</span>);</div><div class="line">peoperties.add(<span class="string">'height'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( properties.has(someName) ) &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意：</strong> Array.from方法可以将Set结构转换为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</div><div class="line"><span class="keyword">var</span> array = <span class="built_in">Array</span>.from( items );</div></pre></td></tr></table></figure><p>这也提供了一种除去数组中重复元素的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params"> array </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from( <span class="keyword">new</span> <span class="built_in">Set</span>(array) );</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Js对象本质上是键值对的集合。但是只能使用字符串充当键。这在一定程度上给我们的使用带来很大的限制。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将DOM节点（即element）当做对象data的键.</span></div><div class="line"><span class="comment">// 但是对象只接受字符串作为键名，所以element被自动转换为字符串"[Object HTMLDivElement]"</span></div><div class="line">data[element] = metadata;</div></pre></td></tr></table></figure></p><p>而ES6正是为了解决这个问题才提供了Map结构。它类似与对象，也是键值对集合，但是”键”的范围不限于字符串，对象也可以当作键。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">o = &#123;<span class="attr">p</span>: <span class="string">"hello world"</span>&#125;;</div><div class="line"></div><div class="line">m.set(o, <span class="string">"content"</span>);</div><div class="line"><span class="built_in">console</span>.log( m.get(o) );  <span class="comment">// content</span></div></pre></td></tr></table></figure></p><p>在上面的代码中，将对象o当作m的一个键。</p><p>Map函数可接收一个数组进行初始化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"name"</span>, <span class="string">"小明"</span>], [<span class="string">"title"</span>, <span class="string">"Author"</span>]]);</div><div class="line"></div><div class="line">map.size <span class="comment">//2</span></div><div class="line">map.has(<span class="string">"name"</span>); <span class="comment">//true</span></div><div class="line">map.get(<span class="string">"name"</span>); <span class="comment">//小明</span></div><div class="line">map.has(<span class="string">"title"</span>); <span class="comment">//true</span></div><div class="line">map.get(<span class="string">"title"</span>); <span class="comment">//Author</span></div></pre></td></tr></table></figure></p><pre><code>注意：只有针对同一个对象的引用，Map结构才将其视作同一个键。这一点要非常小心才行。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line">map.set([<span class="string">'a'</span>], <span class="number">555</span>);</div><div class="line">map.get([<span class="string">'a'</span>]);  <span class="comment">// undefined</span></div></pre></td></tr></table></figure><p>上面代码中set和get方法表面上是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此get方法无法读取该键，返回undefined。</p><p>再看看下面一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> k1 = [<span class="string">'a'</span>];</div><div class="line"><span class="keyword">var</span> k2 = [<span class="string">'a'</span>];</div><div class="line"></div><div class="line">map.set(k1, <span class="number">111</span>);</div><div class="line">map.set(k2, <span class="number">222</span>);</div><div class="line"></div><div class="line">map.get( k1 );  <span class="comment">//111</span></div><div class="line">map.get( k2 );  <span class="comment">//222</span></div></pre></td></tr></table></figure></p><p>上面代码，变量k1和k2的值是一样的，但是他们在Map结构中被视为两个键。即同样值的两个实例，在Map中被视为两个键。</p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p>Map结构有以下属性和方法：</p><ul><li>size : 返回成员总数。 </li><li>set(key, value) : 设置一个键值对。 </li><li>get(key) : 读取一个键。 </li><li>has(key) : 返回一个布尔值，表示某个键是否在Map结构中。 </li><li>delete(key) : 删除某个键。 </li><li>clear() : 清除所有成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line">m.set(<span class="string">"edition"</span>, <span class="number">6</span>); <span class="comment">// 键是字符串</span></div><div class="line">m.set(<span class="number">262</span>, <span class="string">"standard"</span>); <span class="comment">// 键是数字</span></div><div class="line">m.set(<span class="literal">undefined</span>, <span class="string">"nah"</span>); <span class="comment">//键是undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line">m.set(hello, <span class="string">"Hello ES6!"</span>);  <span class="comment">//键是函数</span></div><div class="line"></div><div class="line">m.has(<span class="string">"edition"</span>);  <span class="comment">//true</span></div><div class="line">m.has(<span class="string">"years"</span>);  <span class="comment">//false</span></div><div class="line">m.has(<span class="number">262</span>);  <span class="comment">//true</span></div><div class="line">m.has(<span class="literal">undefined</span>);  <span class="comment">//true</span></div><div class="line">m.has(hello);  <span class="comment">//true</span></div><div class="line"></div><div class="line">m.delete( <span class="literal">undefined</span> );  </div><div class="line">m.has( <span class="literal">undefined</span> );  <span class="comment">//false</span></div><div class="line"></div><div class="line">m.get( hello );  <span class="comment">//hello ES6!</span></div><div class="line">m.get(<span class="string">"edition"</span>);  <span class="comment">//6</span></div></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>Map原生提供三个遍历器。</p><ul><li>key() : 返回键名的遍历器。</li><li>values() : 返回键值的遍历器。</li><li>entries() : 返回所有成员的遍历器。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span> map.key() ) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"key: %s"</span>, key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> value <span class="keyword">of</span> map.value() ) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"value: %s"</span>, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> item <span class="keyword">of</span> map.entries() ) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Key: %s, Value: %s"</span>, item[<span class="number">0</span>], item[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// same as using map.entries()</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Key: %s, Value: %s"</span>, item[<span class="number">0</span>], item[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>另外，Map还有一个<code>forEach</code>方法，与数组中的<code>forEach</code>方法类似，也可以实现遍历。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Key: %s, Value: %s"</span>, key, value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><code>forEach</code>方法还可接受第二个参数，用来绑定<code>this</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reporter = &#123;</div><div class="line">    report: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"key: %s, Value: %s"</span>, key, value);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.report(key, value)</div><div class="line">&#125;, reporter);</div></pre></td></tr></table></figure></p><p>上面代码中，forEach()方法的回调函数中的<code>this</code>, 就指向<code>reporter</code>。</p><hr><p>转自 <a href="http://blog.csdn.net/u014695532/article/details/51815017" target="_blank" rel="external">http://blog.csdn.net/u014695532/article/details/51815017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h1&gt;&lt;p&gt;ES6提供了新的数据结构Set。类似于数组，只不过其成员值都是唯一的，没有重复的值。&lt;br&gt;    Set本身是一个构造函数，用来生成Set数据结构。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过add方法向Set结构中加入成员&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; s.add(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; s) &amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2 3 4 5 （表明set结构不会添加重复的值）&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Set结构接收一个数组作为参数，用来初始化。&lt;br&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="https://blog.2019w.cn/tags/ES6/"/>
    
      <category term="Set" scheme="https://blog.2019w.cn/tags/Set/"/>
    
      <category term="Map" scheme="https://blog.2019w.cn/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>cookie 、sessionStorage 、localStorage之间的区别和使用</title>
    <link href="https://blog.2019w.cn/2018/03/06/sessionStorage&amp;localStorage&amp;cookie/"/>
    <id>https://blog.2019w.cn/2018/03/06/sessionStorage&amp;localStorage&amp;cookie/</id>
    <published>2018-03-06T13:39:36.000Z</published>
    <updated>2018-03-06T13:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cookie是浏览器提供的一种机制，它将document 对象的cookie属性提供给JavaScript。可以由JavaScript对其进行控制，而并不是JavaScript本身的性质。cookie是存于用户硬盘的一个文件，这个文件通常对应于一个域名，当浏览器再次访问这个域名时，便使这个cookie可用。因此，cookie可以跨越一个域名下的多个网页，但不能跨越多个域名使用。<br>cookie是浏览器提供的一种机制，它将document 对象的cookie属性提供给JavaScript。可以由JavaScript对其进行控制，而并不是JavaScript本身的性质。cookie是存于用户硬盘的一个文件，这个文件通常对应于一个域名，当浏览器再次访问这个域名时，便使这个cookie可用。因此，cookie可以跨越一个域名下的多个网页，但不能跨越多个域名使用。 </p><p>不同的浏览器对cookie的实现也不一样，但其性质是相同的。例如在Windows 2000以及Windows xp中，cookie文件存储于documents and settings\userName\cookie\文件夹下。通常的命名格式为：userName@domain.txt。<br><img src="http://ow4d8yam8.bkt.clouddn.com/62511-106.jpg" alt="图一"></p><hr><a id="more"></a><p>cookie机制将信息存储于用户硬盘，因此可以作为全局变量，这是它最大的一个优点。它可以用于以下几种场合。 </p><ol><li>保存用户登录状态。例如将用户id存储于一个cookie内，这样当用户下次访问该页面时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。 cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个 月、一年等。 </li><li>跟踪用户行为。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了 cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后 台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便。 </li><li>定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。 </li><li>创建购物车。正如在前面的例子中使用cookie来记录用户需要购买的商品一样，在结账的时候可以统一提交。例如淘宝网就使用cookie记录了用户曾经浏览过的商品，方便随时进行比较。 </li></ol><p>当然，上述应用仅仅是cookie能完成的部分应用，还有更多的功能需要全局变量。cookie的缺点主要集中于安全性和隐私保护。主要包括以下几种： </p><ol><li>cookie可能被禁用。当用户非常注重个人隐私保护时，他很可能禁用浏览器的cookie功能； </li><li>cookie是与浏览器相关的。这意味着即使访问的是同一个页面，不同浏览器之间所保存的cookie也是不能互相访问的； </li><li>cookie可能被删除。因为每个cookie都是硬盘上的一个文件，因此很有可能被用户删除； </li><li>cookie安全性不够高。所有的cookie都是以纯文本的形式记录于文件中，因此如果要保存用户名密码等信息时，最好事先经过加密处理。</li></ol><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每个cookie都是一个名/值对，可以把下面这样一个字符串赋值给document.cookie： </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=828"</span>; </div><div class="line"><span class="comment">//如果要一次存储多个名/值对，可以使用分号加空格（; ）隔开，例如： </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=828; userName=hulk"</span>;</div></pre></td></tr></table></figure><p>在cookie 的名或值中不能使用分号（;）、逗号（,）、等号（=）以及空格。在cookie的名中做到这点很容易，但要保存的值是不确定的。如何来存储这些值呢？方 法是用escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此 种方案还可以避免中文乱码的出现,当使用escape()编码后，在取出值以后需要使用unescape()进行解码才能得到原来的cookie值。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"str="</span>+<span class="built_in">escape</span>(<span class="string">"I love ajax"</span>); </div><div class="line"><span class="comment">//相当于： </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"str=I%20love%20ajax"</span>;</div></pre></td></tr></table></figure></p><p>尽管document.cookie看上去就像一个属性，可以赋不同的值。但它和一般的属性不一样，改变它的赋值并不意味着丢失原来的值，例如连续执行下面两条语句：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=828"</span>; </div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userName=hulk"</span>;</div></pre></td></tr></table></figure></p><p>这时浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执行类似这样的语句：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addCookie(<span class="string">"userId=828"</span>); </div><div class="line"><span class="built_in">document</span>.addCookie(<span class="string">"userName=hulk"</span>);</div></pre></td></tr></table></figure></p><p>事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=929"</span>; </div><div class="line"><span class="comment">//这样就将名为userId的cookie值设置为了929。</span></div></pre></td></tr></table></figure></p><h3 id="获取cookie的值"><a href="#获取cookie的值" class="headerlink" title="获取cookie的值"></a>获取cookie的值</h3><p>cookie的值可以由document.cookie直接获得：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strCookie=<span class="built_in">document</span>.cookie; </div><div class="line"><span class="comment">//这将获得以分号隔开的多个名/值对所组成的字符串，这些名/值对包括了该域名下的所有cookie。</span></div></pre></td></tr></table></figure></p><p>只能够一次获取所有的cookie值，而不能指定cookie名称来获得指定的值，这正是处理cookie值最麻 烦的一部分。用户必须自己分析这个字符串，来获取指定的cookie值，例如，要获取userId的值，可以这样实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"JavaScript"</span> type=<span class="string">"text/javascript"</span>&gt; </div><div class="line">&lt;!-- </div><div class="line"><span class="comment">//设置两个cookie </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=828"</span>; </div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userName=hulk"</span>; </div><div class="line"><span class="comment">//获取cookie字符串 </span></div><div class="line"><span class="keyword">var</span> strCookie=<span class="built_in">document</span>.cookie; </div><div class="line"><span class="comment">//将多cookie切割为多个名/值对 </span></div><div class="line"><span class="keyword">var</span> arrCookie=strCookie.split(<span class="string">"; "</span>); </div><div class="line"><span class="keyword">var</span> userId; </div><div class="line"><span class="comment">//遍历cookie数组，处理每个cookie对 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arrCookie.length;i++)&#123; </div><div class="line"><span class="keyword">var</span> arr=arrCookie[i].split(<span class="string">"="</span>); </div><div class="line"><span class="comment">//找到名称为userId的cookie，并返回它的值 </span></div><div class="line"><span class="keyword">if</span>(<span class="string">"userId"</span>==arr[<span class="number">0</span>])&#123; </div><div class="line">userId=arr[<span class="number">1</span>]; </div><div class="line"><span class="keyword">break</span>; </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">alert(userId); </div><div class="line"><span class="comment">//--&gt; </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><h3 id="给cookie设置终止日期"><a href="#给cookie设置终止日期" class="headerlink" title="给cookie设置终止日期"></a>给cookie设置终止日期</h3><p>到现在为止，所有的cookie都是单会话cookie，即浏览器关闭后这些cookie将会丢失，事实上这些cookie仅仅是存储在内存中，而没有建立相应的硬盘文件。<br>如：如果要将cookie设置为10天后过期，可以这样实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"JavaScript"</span> type=<span class="string">"text/javascript"</span>&gt; </div><div class="line">&lt;!-- </div><div class="line"><span class="comment">//获取当前时间 </span></div><div class="line"><span class="keyword">var</span> oDate=<span class="keyword">new</span> <span class="built_in">Date</span>(); </div><div class="line">oDate.setDate(oDate.getDate()+<span class="number">10</span>);<span class="comment">//+10天</span></div><div class="line"><span class="comment">//将userId和userName两个cookie设置为10天后过期 </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=828;userName=hulk;expires="</span>+oDate;</div><div class="line"><span class="comment">//--&gt; </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><p>为了删除一个cookie，可以将其过期时间设定为一个过去的时间，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script language=<span class="string">"JavaScript"</span> type=<span class="string">"text/javascript"</span>&gt; </div><div class="line">&lt;!-- </div><div class="line"><span class="comment">//获取当前时间 </span></div><div class="line"><span class="keyword">var</span> oDate=<span class="keyword">new</span> <span class="built_in">Date</span>(); </div><div class="line">oDate.setDate(oDate.getDate()<span class="number">-10</span>);<span class="comment">//-10天</span></div><div class="line"><span class="comment">//将userId和userName两个cookie设置为10天后过期 </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=828;userName=hulk;expires="</span>+oDate;</div><div class="line"><span class="comment">//--&gt; </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><h3 id="指定可访问cookie的路径"><a href="#指定可访问cookie的路径" class="headerlink" title="指定可访问cookie的路径"></a>指定可访问cookie的路径</h3><p>默认情况下，如果在某个页面创建了一个cookie，那么该页面所在目录中的其他页面也可以访问该cookie。如果这个目录下还有子目录，则在子目录中也可以访问。例如在www.xxxx.com/html/a.html中所创建的cookie，可以被www.xxxx.com/html/b.html或www.xxx.com/ html/ some/c.html所访问，但不能被www.xxxx.com/d.html访问。<br>为了控制cookie可以访问的目录，需要使用path参数设置cookie，语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"name=value; path=cookieDir"</span>; </div><div class="line"><span class="comment">//其中cookieDir表示可访问cookie的目录。例如： </span></div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=320; path=/shop"</span>; </div><div class="line"><span class="comment">//就表示当前cookie仅能在shop目录下使用。</span></div></pre></td></tr></table></figure></p><p>如果要使cookie在整个网站下可用，可以将cookie_dir指定为根目录，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"userId=320; path=/"</span>;</div></pre></td></tr></table></figure></p><h3 id="指定可访问cookie的主机名"><a href="#指定可访问cookie的主机名" class="headerlink" title="指定可访问cookie的主机名"></a>指定可访问cookie的主机名</h3><p>和路径类似，主机名是指同一个域下的不同主机，例如：www.google.com和gmail.google.com就是两个不同的主机名。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制，其语法格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;name=value; domain=cookieDomain&quot;; </div><div class="line">//以google为例，要实现跨主机访问，可以写为： </div><div class="line">document.cookie=&quot;name=value;domain=.google.com&quot;; </div><div class="line">//这样，所有google.com下的主机都可以访问该cookie。</div></pre></td></tr></table></figure></p><p>综合示例：构造通用的cookie处理函数<br>cookie的处理过程比较复杂，并具有一定的相似性。因此可以定义几个函数来完成cookie的通用操作，从而实现代码的复用。下面列出了常用的cookie操作及其函数实现。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//1. 添加一个cookie：addCookie(name,value,expiresHours)该函数接收3个参数：cookie名称，cookie值，以及在多少小时后过期。这里约定expiresHours为0时不设定过期时间，即当浏览器关闭时cookie自动消失。</div><div class="line">function addCookie(name,value,expiresHours)&#123; </div><div class="line">var cookieString=name+&quot;=&quot;+escape(value); </div><div class="line">//判断是否设置过期时间 </div><div class="line">if(expiresHours&gt;0)&#123; </div><div class="line">var date=new Date(); </div><div class="line">date.setTime(date.getTime+expiresHours*3600*1000); </div><div class="line">cookieString=cookieString+&quot;; expires=&quot;+date.toGMTString(); </div><div class="line">&#125; </div><div class="line">document.cookie=cookieString; </div><div class="line">&#125; </div><div class="line">//2．获取指定名称的cookie值：getCookie(name) 该函数返回名称为name的cookie值，如果不存在则返回空</div><div class="line">function getCookie(name)&#123; </div><div class="line">var strCookie=document.cookie; </div><div class="line">var arrCookie=strCookie.split(&quot;; &quot;); </div><div class="line">for(var i=0;i&lt;arrCookie.length;i++)&#123; </div><div class="line">var arr=arrCookie[i].split(&quot;=&quot;); </div><div class="line">if(arr[0]==name)return arr[1]; </div><div class="line">&#125; </div><div class="line">return &quot;&quot;; </div><div class="line">&#125; </div><div class="line">//3. 删除指定名称的cookie：deleteCookie(name)该函数可以删除指定名称的cookie</div><div class="line">function deleteCookie(name)&#123; </div><div class="line">var date=new Date(); </div><div class="line">date.setTime(date.getTime()-10000); </div><div class="line">document.cookie=name+&quot;=v; expires=&quot;+date.toGMTString(); </div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="sessionStorage和localStorage"><a href="#sessionStorage和localStorage" class="headerlink" title="sessionStorage和localStorage"></a>sessionStorage和localStorage</h1><hr><p>html5中的Web Storage包括了两种存储方式：sessionStorage和localStorage。<br>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</p><p>而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p><h3 id="html5-web-storage的浏览器支持情况"><a href="#html5-web-storage的浏览器支持情况" class="headerlink" title="html5 web storage的浏览器支持情况"></a>html5 web storage的浏览器支持情况</h3><p>浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。</p><p>要判断浏览器是否支持localStorage可以使用下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.localStorage)&#123;     </div><div class="line">alert(<span class="string">"浏览支持localStorage"</span>) </div><div class="line">&#125;<span class="keyword">else</span>&#123;    </div><div class="line">alert(<span class="string">"浏览暂不支持localStorage"</span>) </div><div class="line">&#125; </div><div class="line"><span class="comment">//或者 </span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.localStorage == <span class="string">'undefined'</span>)&#123; </div><div class="line">alert(<span class="string">"浏览暂不支持localStorage"</span>) </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="localStorage和sessionStorage操作"><a href="#localStorage和sessionStorage操作" class="headerlink" title="localStorage和sessionStorage操作"></a>localStorage和sessionStorage操作</h3><p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p><h4 id="localStorage和sessionStorage的方法"><a href="#localStorage和sessionStorage的方法" class="headerlink" title="localStorage和sessionStorage的方法"></a>localStorage和sessionStorage的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. setItem存储value</span></div><div class="line"></div><div class="line"><span class="comment">//用途：将value存储到key字段</span></div><div class="line"><span class="comment">//用法：.setItem( key, value)</span></div><div class="line"><span class="comment">//代码示例：</span></div><div class="line">sessionStorage.setItem(<span class="string">"key"</span>, <span class="string">"value"</span>); localStorage.setItem(<span class="string">"site"</span>, <span class="string">"js8.in"</span>);</div><div class="line"></div><div class="line"><span class="comment">//2. getItem获取value</span></div><div class="line"><span class="comment">//用途：获取指定key本地存储的值</span></div><div class="line"><span class="comment">//用法：.getItem(key)</span></div><div class="line"><span class="comment">//代码示例：</span></div><div class="line"><span class="keyword">var</span> value = sessionStorage.getItem(<span class="string">"key"</span>); <span class="keyword">var</span> site = localStorage.getItem(<span class="string">"site"</span>);</div><div class="line"></div><div class="line"><span class="comment">//3. removeItem删除key</span></div><div class="line"><span class="comment">//用途：删除指定key本地存储的值</span></div><div class="line"><span class="comment">//用法：.removeItem(key)</span></div><div class="line"><span class="comment">//代码示例：</span></div><div class="line">sessionStorage.removeItem(<span class="string">"key"</span>); localStorage.removeItem(<span class="string">"site"</span>);</div><div class="line"></div><div class="line"><span class="comment">//4. clear清除所有的key/value</span></div><div class="line"><span class="comment">//用途：清除所有的key/value</span></div><div class="line"><span class="comment">//用法：.clear()</span></div><div class="line"><span class="comment">//代码示例：</span></div><div class="line">sessionStorage.clear(); localStorage.clear();</div></pre></td></tr></table></figure><h3 id="其他操作方法：点操作和"><a href="#其他操作方法：点操作和" class="headerlink" title="其他操作方法：点操作和[]"></a>其他操作方法：点操作和[]</h3><p>web Storage不但可以用自身的setItem,getItem等方便存取，也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储，像如下的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage; </div><div class="line">storage.key1 = <span class="string">"hello"</span>; </div><div class="line">storage[<span class="string">"key2"</span>] = <span class="string">"world"</span>; </div><div class="line"><span class="built_in">console</span>.log(storage.key1); </div><div class="line"><span class="built_in">console</span>.log(storage[<span class="string">"key2"</span>]);</div></pre></td></tr></table></figure></p><h3 id="localStorage和sessionStorage的key和length属性实现遍历"><a href="#localStorage和sessionStorage的key和length属性实现遍历" class="headerlink" title="localStorage和sessionStorage的key和length属性实现遍历"></a>localStorage和sessionStorage的key和length属性实现遍历</h3><p>sessionStorage和localStorage提供的key()和length可以方便的实现存储的数据遍历，例如下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage; </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len = storage.length; i  &lt;  len; i++)&#123;    </div><div class="line">  <span class="keyword">var</span> key = storage.key(i);    </div><div class="line">  <span class="keyword">var</span> value = storage.getItem(key);    </div><div class="line">  <span class="built_in">console</span>.log(key + <span class="string">"="</span> + value); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="storage事件"><a href="#storage事件" class="headerlink" title="storage事件"></a>storage事件</h3><p>-[ ] storage还提供了storage事件，当键值改变或者clear的时候，就可以触发storage事件，如下面的代码就添加了一个storage事件改变的监听：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;  </div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"storage"</span>,handle_storage,<span class="literal">false</span>);</div><div class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;  </div><div class="line"> <span class="built_in">window</span>.attachEvent(<span class="string">"onstorage"</span>,handle_storage); </div><div class="line"> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle_storage</span>(<span class="params">e</span>)</span>&#123; </div><div class="line"><span class="keyword">if</span>(!e)&#123;</div><div class="line">e=<span class="built_in">window</span>.event;</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><table><thead><tr><th>Property</th><th style="text-align:center">Type</th><th style="text-align:center">Description </th></tr></thead><tbody><tr><td>key</td><td style="text-align:center">String</td><td style="text-align:center">The named key that was added, removed, or moddified </td></tr><tr><td>oldValue</td><td style="text-align:center">Any</td><td style="text-align:center">The previous value(now overwritten), or null if a new item was added</td></tr><tr><td>newValue</td><td style="text-align:center">Any</td><td style="text-align:center">The new value, or null if an item was added</td></tr><tr><td>zebra stripes</td><td style="text-align:center">String</td><td style="text-align:center">The page that called the method that triggered this change</td></tr></tbody></table><ul><li>栗子<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"存储到localStorage"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> obj = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> o = &#123;&#125;;</span></div><div class="line"><span class="javascript">o.StorageClick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> otext = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].value;</span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.localStorage.setItem(<span class="string">"val"</span>, otext);</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="javascript"><span class="keyword">return</span> o;</span></div><div class="line"><span class="undefined">&#125;)();</span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].value=<span class="built_in">window</span>.localStorage.getItem(<span class="string">'val'</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">1</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">obj.StorageClick();</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h1 id="sessionStorage-、localStorage-和-cookie-之间的区别"><a href="#sessionStorage-、localStorage-和-cookie-之间的区别" class="headerlink" title="sessionStorage 、localStorage 和 cookie 之间的区别"></a>sessionStorage 、localStorage 和 cookie 之间的区别</h1><hr><ol><li><p>共同点：都是保存在浏览器端，且同源的。</p></li><li><p>区别：</p><ul><li><p>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递；cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。</p></li><li><p>而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。<br>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</p></li><li><p>作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cookie是浏览器提供的一种机制，它将document 对象的cookie属性提供给JavaScript。可以由JavaScript对其进行控制，而并不是JavaScript本身的性质。cookie是存于用户硬盘的一个文件，这个文件通常对应于一个域名，当浏览器再次访问这个域名时，便使这个cookie可用。因此，cookie可以跨越一个域名下的多个网页，但不能跨越多个域名使用。&lt;br&gt;cookie是浏览器提供的一种机制，它将document 对象的cookie属性提供给JavaScript。可以由JavaScript对其进行控制，而并不是JavaScript本身的性质。cookie是存于用户硬盘的一个文件，这个文件通常对应于一个域名，当浏览器再次访问这个域名时，便使这个cookie可用。因此，cookie可以跨越一个域名下的多个网页，但不能跨越多个域名使用。 &lt;/p&gt;
&lt;p&gt;不同的浏览器对cookie的实现也不一样，但其性质是相同的。例如在Windows 2000以及Windows xp中，cookie文件存储于documents and settings\userName\cookie\文件夹下。通常的命名格式为：userName@domain.txt。&lt;br&gt;&lt;img src=&quot;http://ow4d8yam8.bkt.clouddn.com/62511-106.jpg&quot; alt=&quot;图一&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="cookie" scheme="https://blog.2019w.cn/tags/cookie/"/>
    
      <category term="sessionStorage" scheme="https://blog.2019w.cn/tags/sessionStorage/"/>
    
      <category term="localStorage" scheme="https://blog.2019w.cn/tags/localStorage/"/>
    
  </entry>
  
  <entry>
    <title>前端工程</title>
    <link href="https://blog.2019w.cn/2018/02/11/Front-end%20engineering/"/>
    <id>https://blog.2019w.cn/2018/02/11/Front-end engineering/</id>
    <published>2018-02-11T02:15:00.000Z</published>
    <updated>2018-02-11T02:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端工程——基础篇"><a href="#前端工程——基础篇" class="headerlink" title="前端工程——基础篇"></a>前端工程——基础篇</h1><hr><p>喂喂喂，那个切图的，把页面写好就发给研发工程师套模板吧。<br>你好，切图仔。<br><img src="https://show8.github.io/blogimage/9-11.jpg" alt="图0"><br><a id="more"></a><br>不知道你的团队如何定义前端开发，据我所知，时至今日仍然有很多团队会把前端开发归类为产品或者设计岗位，虽然身份之争多少有些无谓，但我对这种偏见还是心存芥蒂，酝酿了许久，决定写一个系列的文章，试着从工程的角度系统的介绍一下我对前端，尤其是Web前端的理解。</p><p>只要我们还把自己的工作看作为一项软件开发活动，那么我相信读过下面的内容你也一定会有所共鸣。</p><h1 id="前端，是一种GUI软件"><a href="#前端，是一种GUI软件" class="headerlink" title="前端，是一种GUI软件"></a>前端，是一种GUI软件</h1><hr><p>现如今前端可谓包罗万象，产品形态五花八门，涉猎极广，什么高大上的基础库/框架，拽炫酷的宣传页面，还有屌炸天的小游戏……不过这些一两个文件的小项目并非是前端技术的主要应用场景，更具商业价值的则是复杂的Web应用，它们功能完善，界面繁多，为用户提供了完整的产品体验，可能是新闻聚合网站，可能是在线购物平台，可能是社交网络，可能是金融信贷应用，可能是音乐互动社区，也可能是视频上传与分享平台……<br><code>从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。</code><br>如此复杂的Web应用，动辄几十上百人共同开发维护，其前端界面通常也颇具规模，工程量不亚于一般的传统GUI软件：</p><p><img src="https://show8.github.io/blogimage/G1.png" alt="图1"></p><p>尽管Web应用的复杂程度与日俱增，用户对其前端界面也提出了更高的要求，但时至今日仍然没有多少前端开发者会从软件工程的角度去思考前端开发，来助力团队的开发效率，更有甚者还对前端保留着”如玩具般简单“的刻板印象，日复一日，刀耕火种。</p><p>历史悠久的前端开发，始终像是放养的野孩子，原始如斯，不免让人慨叹！</p><h1 id="前端工程的三个阶段"><a href="#前端工程的三个阶段" class="headerlink" title="前端工程的三个阶段"></a>前端工程的三个阶段</h1><hr><p>现在的前端开发倒也并非一无所有，回顾一下曾经经历过或听闻过的项目，为了提升其前端开发效率和运行性能，前端团队的工程建设大致会经历三个阶段：</p><h3 id="第一阶段：库-框架选型"><a href="#第一阶段：库-框架选型" class="headerlink" title="第一阶段：库/框架选型"></a>第一阶段：库/框架选型</h3><p><img src="https://show8.github.io/blogimage/G2.png" alt="图2"></p><p>前端工程建设的第一项任务就是根据项目特征进行技术选型。</p><p>基本上现在没有人完全从0开始做网站，哪怕是政府项目用个jquery都很正常吧，React/Angularjs等框架横空出世，解放了不少生产力，合理的技术选型可以为项目节省许多工程量这点毋庸置疑。</p><h3 id="第二阶段：简单构建优化"><a href="#第二阶段：简单构建优化" class="headerlink" title="第二阶段：简单构建优化"></a>第二阶段：简单构建优化</h3><p><img src="https://show8.github.io/blogimage/G3.png" alt="图3"></p><p>选型之后基本上就可以开始敲码了，不过光解决开发效率还不够，必须要兼顾运行性能。前端工程进行到第二阶段会选型一种构建工具，对代码进行压缩，校验，之后再以页面为单位进行简单的资源合并。</p><p>前端开发工程化程度之低，常常出乎我的意料，我之前在百度工作时是没有多少概念的，直到离开大公司的温室，去到业界与更多的团队交流才发现，能做到这个阶段在业界来说已然超出平均水平，属于“具备较高工程化程度”的团队了，查看网上形形色色的网页源代码，能做到最基本的JS/CSS压缩的Web应用都已跨入标准互联网公司行列，不难理解为什么很多前端团队对于前端工程构建的认知还仅停留在“压缩、校验、合并”这种程度。</p><h3 id="第三阶段：JS-CSS模块化开发"><a href="#第三阶段：JS-CSS模块化开发" class="headerlink" title="第三阶段：JS/CSS模块化开发"></a>第三阶段：JS/CSS模块化开发</h3><p><img src="https://show8.github.io/blogimage/G4.png" alt="图4"></p><p>分而治之是软件工程中的重要思想，是复杂系统开发和维护的基石，这点放在前端开发中同样适用。在解决了基本开发效率运行效率问题之后，前端团队开始思考维护效率，模块化是目前前端最流行的分治手段。<br>`<br>很多人觉得模块化开发的工程意义是复用，我不太认可这种看法，在我看来，模块化开发的最大价值应该是分治，是分治，分治！（重说三）。</p><p>不管你将来是否要复用某段代码，你都有充分的理由将其分治为一个模块。<br>`<br>JS模块化方案很多，AMD/CommonJS/UMD/ES6 Module等，对应的框架和工具也一大堆，说起来很烦，大家自行百度吧；CSS模块化开发基本都是在less、sass、stylus等预处理器的import/mixin特性支持下实现的。</p><p>虽然这些技术由来已久，在如今这个“言必及React”的时代略显落伍，但想想业界的绝大多数团队的工程化落后程度，放眼望去，毫不夸张的说，能达到第三阶段的前端团队已属于高端行列，基本具备了开发维护一般规模Web应用的能力。</p><p>然而，做到这些就够了么？Naive！</p><h3 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h3><p><code>前端是一种技术问题较少、工程问题较多的软件开发领域。</code><br>当我们要开发一款完整的Web应用时，前端将面临更多的工程问题，比如：</p><ul><li>大体量：多功能、多页面、多状态、多系统；</li><li>大规模：多人甚至多团队合作开发；</li><li>高性能：CDN部署、缓存控制、文件指纹、缓存复用、请求合并、按需加载、同步/异步加载、移动端首屏CSS内嵌、HTTP 2.0服务端资源推送。</li></ul><p><code>扩展阅读：大公司里怎样开发和部署前端代码？</code><br>这些无疑是一系列严肃的系统工程问题。</p><p>前面讲的三个阶段虽然相比曾经“茹毛饮血”的时代进步不少，但用于支撑第四阶段的多人合作开发以及精细的性能优化似乎还欠缺点什么。</p><p>到底，缺什么呢？</p><h4 id="没有银弹"><a href="#没有银弹" class="headerlink" title="没有银弹"></a>没有银弹</h4><p>读过<a href="https://book.douban.com/subject/2230248/" target="_blank" rel="external">《人月神话》</a>的人应该都听说过，软件工程 <a href="https://baike.baidu.com/item/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9" target="_blank" rel="external">没有银弹</a>。没错，前端开发同样没有银弹，可是现在是连™铅弹都没有的年月！（刚有了BB弹，摔）</p><p>前端历来以“简单”著称，在前端开发者群体中，小而美的价值观占据着主要的话语权，甚至成为了某种信仰，想与其他人交流一下工程方面的心得，得到的回应往往都是两个字：太重。<br><code>重你妹！你的脑容量只有4K吗？</code><br>工程方案其实也可以小而美！只不过它的小而美不是指代码量，而是指“规则”。找到问题的根源，用最少最简单明了的规则制定出最容易遵守最容易理解的开发规范或工具，以提升开发效率和工程质量，这同样是小而美的典范！</p><p>2011年我有幸参与到 FIS 项目中，与百度众多大中型项目的前端研发团队共同合作，不断探索实践前端开发的工程化解决方案，13年离开百度去往UC，面对完全不同的产品形态，不同的业务场景，不同的适配终端，甚至不同的网络环境，过往的方法论仍然能够快速落地，为多个团队的不同业务场景量身定制出合理的前端解决方案。</p><p>这些经历让我明悟了一个道理：<br><code>进入第四阶段，我们只需做好两件事就能大幅提升前端开发效率，并且兼顾运行性能，那就是——组件化开发与资源管理。</code></p><h4 id="第一件事：组件化开发"><a href="#第一件事：组件化开发" class="headerlink" title="第一件事：组件化开发"></a>第一件事：组件化开发</h4><p>分治的确是非常重要的工程优化手段。在我看来，前端作为一种GUI软件，光有JS/CSS的模块化还不够，对于UI组件的分治也有着同样迫切的需求：</p><p><img src="https://show8.github.io/blogimage/G5.png" alt="图5"></p><p>如上图，这是我所信仰的前端组件化开发理念，简单解读一下：</p><ol><li>页面上的每个 独立的 可视/可交互区域视为一个组件；</li><li>每个组件对应一个工程目录，组件所需的各种资源都在这个目录下就近维护；</li><li>由于组件具有独立性，因此组件与组件之间可以 自由组合；</li><li>页面只不过是组件的容器，负责组合组件形成功能完整的界面；</li><li>当不需要某个组件，或者想要替换组件时，可以整个目录删除/替换。</li></ol><p>其中第二项描述的就近维护原则，是我觉得最具工程价值的地方，它为前端开发提供了很好的分治策略，每个开发者都将清楚的知道，自己所开发维护的功能单元，其代码必然存在于对应的组件目录中，在那个目录下能找到有关这个功能单元的所有内部逻辑，样式也好，JS也好，页面结构也好，都在那里。</p><p>组件化开发具有较高的通用性，无论是前端渲染的单页面应用，还是后端模板渲染的多页面应用，组件化开发的概念都能适用。组件HTML部分根据业务选型的不同，可以是静态的HTML文件，可以是前端模板，也可以是后端模板：</p><p><img src="https://show8.github.io/blogimage/G6.png" alt="图6"></p><p><code>不同的技术选型决定了不同的组件封装和调用策略。</code><br>基于这样的工程理念，我们很容易将系统以独立的组件为单元进行分工划分：</p><p><img src="https://show8.github.io/blogimage/G7.png" alt="图7"></p><p>由于系统功能被分治到独立的模块或组件中，粒度比较精细，组织形式松散，开发者之间不会产生开发时序的依赖，大幅提升并行的开发效率，理论上允许随时加入新成员认领组件开发或维护工作，也更容易支持多个团队共同维护一个大型站点的开发。</p><p>结合前面提到的模块化开发，整个前端项目可以划分为这么几种开发概念：</p><p><img src="https://show8.github.io/blogimage/G8.png" alt="图8"></p><p>以上5种开发概念以相对较少的规则组成了前端开发的基本工程结构，基于这些理念，我眼中的前端开发就成了这个样子：</p><p><img src="https://show8.github.io/blogimage/G9.png" alt="图9"><br><img src="https://show8.github.io/blogimage/G10.png" alt="图10"><br><img src="https://show8.github.io/blogimage/G11.png" alt="图11"><br><img src="https://show8.github.io/blogimage/G12.png" alt="图12"></p><p>综合上面的描述，对于一般中小规模的项目，大致可以规划出这样的源码目录结构：</p><p><img src="https://show8.github.io/blogimage/G13.png" alt="图13"></p><p>如果项目规模较大，涉及多个团队协作，还可以将具有相关业务功能的页面组织在一起，形成一个子系统，进一步将整个站点拆分出多个子系统来分配给不同团队维护，针对这种情况后面我会单开文章详细介绍。</p><p>以上架构设计历经许多不同公司不同业务场景的前端团队验证，收获了不错的口碑，是行之有效的前端工程分治方案。<br><code>吐槽：我本人非常反对某些前端团队将前端开发划分为“JS开发”和“页面重构”两种岗位，更倾向于组件粒度的开发理念，对GUI软件开发的分工规划应该以功能为单位，而不是开发语言；对开发者的技术要求也应该是掌握完整的端内技术。</code></p><h4 id="第二件事：“智能”静态资源管理"><a href="#第二件事：“智能”静态资源管理" class="headerlink" title="第二件事：“智能”静态资源管理"></a>第二件事：“智能”静态资源管理</h4><p>上面提到的模块化/组件化开发，仅仅描述了一种开发理念，也可以认为是一种开发规范，倘若你认可这规范，对它的分治策略产生了共鸣，那我们就可以继续聊聊它的具体实现了。</p><p>很明显，模块化/组件化开发之后，我们最终要解决的，就是模块/组件加载的技术问题。然而前端与客户端GUI软件有一个很大的不同：<br><code>前端是一种远程部署，运行时增量下载的GUI软件</code><br>前端应用没有安装过程，其所需程序资源都部署在远程服务器，用户使用浏览器访问不同的页面来加载不同的资源，随着页面访问的增加，渐进式的将整个程序下载到本地运行，“增量下载”是前端在工程上有别于客户端GUI软件的根本原因。</p><p><img src="https://show8.github.io/blogimage/G14.gif" alt="图14"></p><p>上图展示了一款界面繁多功能丰富的应用，如果采用Web实现，相信也是不小的体量，如果用户第一次访问页面就强制其加载全站静态资源再展示，相信会有很多用户因为失去耐心而流失。根据“增量”的原则，我们应该精心规划每个页面的资源加载策略，使得用户无论访问哪个页面都能按需加载页面所需资源，没访问过的无需加载，访问过的可以缓存复用，最终带来流畅的应用体验。</p><p>这正是Web应用“免安装”的魅力所在。</p><p>由“增量”原则引申出的前端优化技巧几乎成为了性能优化的核心，有加载相关的按需加载、延迟加载、预加载、请求合并等策略；有缓存相关的浏览器缓存利用，缓存更新、缓存共享、非覆盖式发布等方案；还有复杂的BigRender、BigPipe、Quickling、PageCache等技术。这些优化方案无不围绕着如何将增量原则做到极致而展开。</p><p>所以我觉得：<br><code>第四阶段前端开发最迫切需要做好的就是在基础架构中贯彻增量原则。</code><br>相信这种贯彻不会随着时间的推移而改变，在可预见的未来，无论在HTTP1.x还是HTTP2.0时代，无论在ES5亦或者ES6/7时代，无论是AMD/CommonJS/UMD亦或者ES6 module时代，无论端内技术如何变迁，我们都有足够充分的理由要做好前端程序资源的增量加载。</p><p>正如前面说到的，第三阶段前端工程缺少点什么呢？我觉得是在其基础架构中缺少这样一种“智能”的资源加载方案。没有这样的方案，很难将前端应用的规模发展到第四阶段，很难实现落地前面介绍的那种组件化开发方案，也很难让多方合作高效率的完成一项大型应用的开发，并保证其最终运行性能良好。在第四阶段，我们需要强大的工程化手段来管理”玩具般简单“的前端开发。</p><p>在我的印象中，Facebook是这方面探索的伟大先驱之一，早在2010年的<a href="http://velocity.oreilly.com.cn/2010/" target="_blank" rel="external">Velocity</a> China大会上，来自Facebook的David Wei博士就为业界展示了他们令人惊艳的静态网页资源管理和优化技术。</p><p>David Wei博士在当年的交流会上提到过一些关于Facebook的一些产品数据：    </p><ul><li>Facebook整站有10000+个静态资源；</li><li>每个静态资源都有可能被翻译成超过100种语言版本；</li><li>每种资源又会针对浏览器生成3种不同的版本；</li><li>要针对不同带宽的用户做5种不同的打包方法；</li><li>有3、4个不同的用户组，用于小批次体验新的产品功能；</li><li>还要考虑不同的送达方法，可以直接送达，或者通过iframe的方式提升资源并行加载的速度；</li><li>静态资源的压缩和非压缩状态可切换，用于调试和定位线上问题</li></ul><p>这是一个状态爆炸的问题，将所有状态乘起来，整个网站的资源组合方式会达到几百万种之多（去重之后统计大概有300万种组合方式）。支撑这么大规模前端项目运行的底层架构正是魏博士在那次演讲中分享的Static Resource Management System(静态资源管理系统)，用以解决Facebook项目中有关前端工程的3D问题（Development，Deployment，Debugging）。</p><p>那段时间 FIS 项目正好遇到瓶颈，当时的FIS还是一个用php写的task-based构建工具，那时候对于前端工程的认知度很低，觉得前端构建不就是几个压缩优化校验打包任务的组合吗，写好流程调度，就针对不同需求写插件呗，看似非常简单。但当我们支撑越来越多的业务团队，接触到各种不同的业务场景时，我们深刻的感受到task-based工具的粗糙，团队每天疲于根据各种业务场景编写各种打包插件，构建逻辑异常复杂，隐隐看到不可控的迹象。</p><p>我们很快意识到把基础架构放到构建工具中实现是一件很愚蠢的事，试图依靠构建工具实现各种优化策略使得构建变成了一个巨大的黑盒，一旦发生问题，定位起来非常困难，而且每种业务场景都有不同的优化需求，构建工具只能通过静态分析来优化加载，具有很大的局限性，单页面/多页面/PC端/移动端/前端渲染/后端渲染/多语言/多皮肤/高级优化等等资源加载问题，总不能给每个都写一套工具吧，更何况这些问题彼此之间还可以有多种组合应用，工具根本写不过来。</p><p>Facebook的做法无疑为我们亮起了一盏明灯，不过可惜它并不开源（不是技术封锁，而是这个系统依赖FB体系中的其他方面，通用性不强，开源意义不大），我们只能尝试挖掘相关信息，网上对它的完整介绍还是非常非常少，分析facebook的前端代码也没有太多收获，后来无意中发现了facebook使用的项目管理工具phabricator中的一个静态管理方案Celerity，以及相关的说明，看它的描述很像是Facebook静态资源管理系统的一个mini版！</p><p>简单看过整个系统之后发现原理并不复杂（小而美的典范），它是通过一个小工具扫描所有静态资源，生成一张资源表，然后有一个PHP实现的资源管理框架（Celerity）提供了资源加载接口，替代了传统的script/link等静态的资源加载标签，最终通过查表来加载资源。</p><p>虽然没有真正看过FB的那套系统，但眼前的这个小小的框架给了当时的我们足够多的启示：<br><code>静态资源管理系统 = 资源表 + 资源加载框架</code><br>多么优雅的实现啊！</p><p>资源表是一份数据文件（比如JSON），是项目中所有静态资源（主要是JS和CSS）的构建信息记录，通过构建工具扫描项目源码生成，是一种k-v结构的数据，以每个资源的id为key，记录了资源的类别、部署路径、依赖关系、打包合并等内容，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"a.js"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/js/a.5f100fa.js"</span>,</div><div class="line">        <span class="string">"dep"</span>: [ <span class="string">"b.js"</span>, <span class="string">"a.css"</span> ]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"a.css"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/css/a.63cf374.css"</span>,</div><div class="line">        <span class="string">"dep"</span>: [ <span class="string">"button.css"</span> ]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"b.js"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/js/b.97193bf.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"button.css"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/css/button.de33108.css"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而资源加载框架则提供一些资源引用的API，让开发者根据id来引用资源，替代静态的script/link标签来收集、去重、按需加载资源。调用这些接口时，框架通过查表来查找资源的各项信息，并递归查找其依赖的资源的信息，然后我们可以在这个过程中实现各种性能优化算法来“智能”加载资源。</p><p>根据业务场景的不同，加载框架可以在浏览器中用JS实现，也可以是后端模板引擎中用服务端语言实现，甚至二者的组合，不一而足。</p><p><img src="https://show8.github.io/blogimage/G15.png" alt="图15"></p><p><code>有关加载框架的具体实现我曾写过很多文章介绍，可以扩展阅读：</code></p><ul><li><a href="https://github.com/fouber/blog/issues/3" target="_blank" rel="external">前端工程与性能优化</a></li><li><a href="https://github.com/fouber/blog/issues/4" target="_blank" rel="external">前端工程与模块化框架</a></li></ul><p>这种设计很快被验证具有足够的灵活性，能够完美支撑不同团队不同技术规范下的性能优化需求，前面提到的按需加载、延迟加载、预加载、请求合并、文件指纹、CDN部署、Bigpipe、Quickling、BigRender、首屏CSS内嵌、HTTP 2.0服务端推送等等性能优化手段都可以很容易的在这种架构上实现，甚至可以根据性能日志自动进行优化（Facebook已实现）。</p><p>因为有了资源表，我们可以很方便的控制资源加载，通过各种手段在运行时计算页面的资源使用情况，从而获得最佳加载性能。无论是前端渲染的单页面应用，还是后端渲染的多页面应用，这种方法都同样适用。</p><p>此外，它还很巧妙的约束了构建工具的职责——只生成资源表。资源表是非常通用的数据结构，无论什么业务场景，其业务代码最终都可以被扫描为相同结构的表数据，并标记资源间的依赖关系，有了表之后我们只需根据不同的业务场景定制不同的资源加载框架就行了，从此彻底告别一个团队维护一套工具的时代！！！</p><p><img src="https://show8.github.io/blogimage/G16.png" alt="图16"></p><p>恩，如你所见，虽然彻底告别了一个团队一套工具的时代，但似乎又进入了一个团队一套框架的时代。其实还是有差别的，因为框架具有很大的灵活性，而且不那么黑盒，采用框架实现资源管理相比构建更容易调试、定位和升级变更。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p>回顾一下前面提到过的前端工程三个阶段：</p><ul><li>第一阶段：库/框架选型</li><li>第二阶段：简单构建优化</li><li>第三阶段：JS/CSS模块化开发</li></ul><p>现在补充上第四阶段：</p><ul><li>第四阶段：组件化开发与资源管理</li></ul><p>由于先天缺陷，<code>前端相比其他软件开发，在基础架构上更加迫切的需要组件化开发和资源管理，</code>而解决资源管理的方法其实一点也不复杂：<br><code>一个通用的资源表生成工具 + 基于表的资源加载框架</code></p><p>近几年来各种你听到过的各种资源加载优化策略大部分都可以在这样一套基础上实现，而这种优化对于业务来说是完全透明的，不需要重构的性能优化——这不正是我们一直所期盼的吗？正如魏小亮博士所说：我们可以把优秀的人集中起来去优化加载。</p><p>如何选型技术、如何定制规范、如何分治系统、如何优化性能、如何加载资源，当你从切图开始转变为思考这些问题的时候，我想说：</p><p>你好，工程师！</p><p>前端工程其实是一个很大的话题，开发仅是其中的一部分。</p><p>转自：<a href="https://github.com/fouber/blog/blob/master/201508/01.md#" target="_blank" rel="external">https://github.com/fouber/blog/blob/master/201508/01.md#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端工程——基础篇&quot;&gt;&lt;a href=&quot;#前端工程——基础篇&quot; class=&quot;headerlink&quot; title=&quot;前端工程——基础篇&quot;&gt;&lt;/a&gt;前端工程——基础篇&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;喂喂喂，那个切图的，把页面写好就发给研发工程师套模板吧。&lt;br&gt;你好，切图仔。&lt;br&gt;&lt;img src=&quot;https://show8.github.io/blogimage/9-11.jpg&quot; alt=&quot;图0&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端工程" scheme="https://blog.2019w.cn/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="三个阶段" scheme="https://blog.2019w.cn/tags/%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>Vue 2.0  路由传递参数</title>
    <link href="https://blog.2019w.cn/2018/02/04/Route/"/>
    <id>https://blog.2019w.cn/2018/02/04/Route/</id>
    <published>2018-02-03T16:26:28.000Z</published>
    <updated>2018-02-03T16:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Vue-路由传递参数-有两种方式："><a href="#Vue-路由传递参数-有两种方式：" class="headerlink" title="Vue 路由传递参数 有两种方式："></a>Vue 路由传递参数 有两种方式：</h1><h3 id="一、用name传递参数"><a href="#一、用name传递参数" class="headerlink" title="一、用name传递参数"></a>一、用name传递参数</h3><p>两步完成用name传值并显示在模板里：</p><ol><li><p>在路由文件src/router/index.js里配置name属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      name: <span class="string">'Hello'</span>,</div><div class="line">      component: Hello</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>模板里(src/App.vue)用$router.name的形势接收，比如直接在模板中显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $route.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="二、通过-标签中的to传参"><a href="#二、通过-标签中的to传参" class="headerlink" title="二、通过 标签中的to传参"></a>二、通过<router-link> 标签中的to传参</router-link></h3><p>上边的传参或许很不正规，也不方便，其实工作中多数传参是不用name进行传参的，我们用<router-link>标签中的to属性进行传参，需要注意的是这里的to要进行一个绑定，写成:to。先来看一下这种传参方法的基本语法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:xxx,params:&#123;key:value&#125;&#125;"</span>&gt;</span>valueString<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure></router-link></p><p>这里的to前边是带冒号的，然后后边跟的是一个对象形势的字符串.</p><ul><li>name：就是我们在路由配置文件中起的name值。</li><li>params：就是我们要传的参数，它也是对象形势，在对象里可以传递多个值。</li></ul><p>了解基本的语法后，我们改造一下我们的src/App.vue里的<router-link>标签,我们把hi1页面的<router-link>进行修改。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'hi1',params:&#123;username:'jspang'&#125;&#125;"</span>&gt;</span>Hi页面1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure></router-link></router-link></p><p>把src/reouter/index.js文件里给hi1配置的路由起个name,就叫hi1.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;path:'/hi1',name:'hi1',component:Hi1&#125;,</div></pre></td></tr></table></figure></p><p><code>最后在模板里(src/components/Hi1.vue)用$route.params.username进行接收.</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;$route.params.username&#125;&#125;</div></pre></td></tr></table></figure></p><h1 id="vue-router-利用url传递参数-冒号的形式传递参数"><a href="#vue-router-利用url传递参数-冒号的形式传递参数" class="headerlink" title="vue-router 利用url传递参数 :冒号的形式传递参数"></a>vue-router 利用url传递参数 :冒号的形式传递参数</h1><p>在路由配置文件里以:冒号的形式传递参数，这就是对参数的绑定。</p><p>1.在配置文件里以冒号的形式设置参数。我们在/src/router/index.js文件里配置路由。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path:<span class="string">'/params/:newsId/:newsTitle'</span>,</div><div class="line">     component:Params</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>我们需要传递参数是新闻ID（newsId）和新闻标题（newsTitle）.所以我们在路由配置文件里制定了这两个值。</li></ul><p>2.在src/components目录下建立我们params.vue组件，也可以说是页面。我们在页面里输出了url传递的的新闻ID和新闻标题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h2&gt;</span></div><div class="line"><span class="regexp">        &lt;p&gt;新闻ID：&#123;&#123; $route.params.newsId&#125;&#125;&lt;/</span>p&gt;</div><div class="line">        &lt;p&gt;新闻标题：&#123;&#123; $route.params.newsTitle&#125;&#125;&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">&lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp"> </span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">export default &#123;</span></div><div class="line"><span class="regexp">  name: 'params',</span></div><div class="line"><span class="regexp">  data () &#123;</span></div><div class="line"><span class="regexp">    return &#123;</span></div><div class="line"><span class="regexp">      msg: 'params page'</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure></p><p>3.在App.vue文件里加入我们的<router-view>标签。这时候我们可以直接利用url传值了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=<span class="string">"/params/198/jspang website is very good"</span>&gt;params&lt;<span class="regexp">/router-link&gt;</span></div></pre></td></tr></table></figure></router-view></p><ul><li>正则表达式在URL传值中的应用</li></ul><p>上边的例子，我们传递了新闻编号，现在需求升级了，我们希望我们传递的新闻ID只能是数字的形式，这时候我们就需要在传递时有个基本的类型判断，vue是支持正则的。<br>加入正则需要在路由配置文件里（/src/router/index.js）以圆括号的形式加入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">path:<span class="string">'/params/:newsId(\\d+)/:newsTitle'</span>,</div></pre></td></tr></table></figure></p><ul><li>加入了正则，我们再传递数字之外的其他参数，params.vue组件就没有办法接收到。</li></ul><hr><p>转自<a href="https://www.cnblogs.com/zccblog/p/7235779.html" target="_blank" rel="external">https://www.cnblogs.com/zccblog/p/7235779.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Vue-路由传递参数-有两种方式：&quot;&gt;&lt;a href=&quot;#Vue-路由传递参数-有两种方式：&quot; class=&quot;headerlink&quot; title=&quot;Vue 路由传递参数 有两种方式：&quot;&gt;&lt;/a&gt;Vue 路由传递参数 有两种方式：&lt;/h1&gt;&lt;h3 id=&quot;一、用name传递参数&quot;&gt;&lt;a href=&quot;#一、用name传递参数&quot; class=&quot;headerlink&quot; title=&quot;一、用name传递参数&quot;&gt;&lt;/a&gt;一、用name传递参数&lt;/h3&gt;&lt;p&gt;两步完成用name传值并显示在模板里：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在路由文件src/router/index.js里配置name属性。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;routes: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      path: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      name: &lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      component: Hello&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模板里(src/App.vue)用$router.name的形势接收，比如直接在模板中显示：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; $route.name&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://blog.2019w.cn/tags/vue/"/>
    
      <category term="路由" scheme="https://blog.2019w.cn/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>原生js获取浏览器窗口及元素宽高常用方法集合</title>
    <link href="https://blog.2019w.cn/2018/02/04/Method%20set/"/>
    <id>https://blog.2019w.cn/2018/02/04/Method set/</id>
    <published>2018-02-03T16:11:02.000Z</published>
    <updated>2018-02-03T16:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>窗口可视区域宽度： document.documentElement.clientWidth || document.body.clientWidth;</li><li>窗口可视区域高度： document.documentElement.clientHeight || document.body.clientHeight;</li><li>窗口可视区域宽度+边线和滚动条： document.body.offsetWidth ;</li><li>窗口可视区域高度+边线和滚动条： document.body.offsetHeight ;</li><li>实际内容的宽度： document.body.scrollWidth;</li><li>实际内容的高度： document.body.scrollHeight;</li><li>滚动条下拉被卷起来的距离：document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;</li><li>滚动条侧拉被卷起来的距离：document.body.scrollLeft || document.documentElement.scrollLeft ;</li><li>网页正文部分上：window.screenTop;</li><li>网页正文部分左：window.screenLeft;</li><li>元素的宽度：obj.offsetWidth;</li><li>元素的高度：obj.offsetHeight;</li><li>相对于父元素的上位移：obj.offsetTop;（在元素的包含元素不含滚动条的情况下）</li><li>相对于父元素的左位移：obj.offsetLeft;（在元素的包含元素不含滚动条的情况下）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;窗口可视区域宽度： document.documentElement.clientWidth || document.body.clientWidth;&lt;/li&gt;
&lt;li&gt;窗口可视区域高度： document.documentElement.clien
      
    
    </summary>
    
    
      <category term="原生js" scheme="https://blog.2019w.cn/tags/%E5%8E%9F%E7%94%9Fjs/"/>
    
      <category term="宽高获取" scheme="https://blog.2019w.cn/tags/%E5%AE%BD%E9%AB%98%E8%8E%B7%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>随手记（问题总结）</title>
    <link href="https://blog.2019w.cn/2017/11/18/With%20the%20notes/"/>
    <id>https://blog.2019w.cn/2017/11/18/With the notes/</id>
    <published>2017-11-18T11:02:22.000Z</published>
    <updated>2017-11-18T11:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结下开发时候随手记的一些东西，以后方便查找"><a href="#总结下开发时候随手记的一些东西，以后方便查找" class="headerlink" title="总结下开发时候随手记的一些东西，以后方便查找"></a>总结下开发时候随手记的一些东西，以后方便查找</h2><hr><p><img src="https://show8.github.io/blogimage/suibi.jpg" alt="图片1"><br><a id="more"></a></p><ol><li>display:table-cell——————display:table-cell属性指让标签元素以表格单元格的形式呈现，类似于td标签。</li><li>tap-highlight-color——————设置或检索对象的轻按时高亮。 当用户轻按一个链接或者JavaScript可点击元素时给元素覆盖一个高亮色 如果想取消这个高亮，将值设置为全透明即可，比如transparent</li><li>-webkit-appearance: none; 去掉ios的input阴影</li><li><p>移动端触摸事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.WL_xinjian'</span>).bind(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="keyword">this</span>).css(<span class="string">'background'</span>,<span class="string">'#d9d9d9'</span>);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">'.WL_xinjian'</span>).bind(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="keyword">this</span>).css(<span class="string">'background'</span>,<span class="string">'#fff'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>手机端的轮播图 初始化switch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//observer: true, //修改swiper自己或子元素时，自动初始化swiper</span></div><div class="line"><span class="comment">//observeParents: true, //修改swiper的父元素时，自动初始化swipe</span></div><div class="line">preventClicks : <span class="literal">false</span>,  <span class="comment">//当swiper在触摸时阻止默认事件（preventDefault），用于防止触摸时触发链接跳转。</span></div><div class="line">preventLinksPropagation : <span class="literal">true</span>,  <span class="comment">//阻止click冒泡。拖动Swiper时阻止click事件。</span></div><div class="line">width : <span class="built_in">window</span>.innerWidth,  </div><div class="line">observer : <span class="literal">true</span>  <span class="comment">//当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper</span></div></pre></td></tr></table></figure></li><li><p>微信端图片缩放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>,<span class="string">'img'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> imgs=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">     <span class="keyword">var</span> nowImgurl=<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> imgObj=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;imgObj.length; i++)</div><div class="line">      &#123;</div><div class="line">        imgs.push(imgObj[i].src); </div><div class="line">      &#125;</div><div class="line">        nowImgurl = <span class="keyword">this</span>.src;</div><div class="line">          WeixinJSBridge.invoke(<span class="string">"imagePreview"</span>,&#123;</div><div class="line">            <span class="string">"urls"</span>:imgs,</div><div class="line">            <span class="string">"current"</span>:nowImgurl</div><div class="line">            &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>网站设计之常见简单实用的JavaScript特效总结（上篇）— <a href="http://click.aliyun.com/m/16034/" target="_blank" rel="external">http://click.aliyun.com/m/16034/</a><br>【javascript】typeof和instanceof的关系 — <a href="http://click.aliyun.com/m/16032/" target="_blank" rel="external">http://click.aliyun.com/m/16032/</a><br>【JavaScript】js中与变量相关的一些知识 — <a href="http://click.aliyun.com/m/16012/" target="_blank" rel="external">http://click.aliyun.com/m/16012/</a><br>31款轻量高效的开源<em>JavaScript</em>插件和库 — <a href="http://click.aliyun.com/m/16035/" target="_blank" rel="external">http://click.aliyun.com/m/16035/</a></p></li><li><p>HTML5 data-* 自定义属性<br>1.设置方法<br>A.直接在标签内书写，格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">data-age</span>=<span class="string">"24"</span>&gt;</span></div><div class="line">    Click Here</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">"pagecreate"</span>,<span class="string">"#pageone"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="comment">// jQuery 事件...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>监测上滑下滑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> startX = <span class="number">0</span>,</div><div class="line">        startY = <span class="number">0</span>;</div><div class="line">   <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    x=event.touches[<span class="number">0</span>].pageX;</div><div class="line">    y=event.touches[<span class="number">0</span>].pageY;</div><div class="line">   startX=x;</div><div class="line">   startY=y;</div><div class="line">   &#125;,<span class="literal">false</span>);</div><div class="line"></div><div class="line">   <span class="built_in">document</span>.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">// alert(1)</span></div><div class="line">   x=event.touches[<span class="number">0</span>].pageX;</div><div class="line">   y=event.touches[<span class="number">0</span>].pageY;</div><div class="line">   </div><div class="line">   <span class="keyword">if</span>($(<span class="string">'.content'</span>).scrollTop()&gt;<span class="number">50</span>)</div><div class="line">   <span class="keyword">if</span> (y - startY&gt;<span class="number">0</span>) &#123;</div><div class="line"><span class="comment">//          下滑</span></div><div class="line">$(<span class="string">'.W_jd1_parent'</span>).animate(&#123;<span class="string">'top'</span>:<span class="number">0</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="string">'.content'</span>).css(<span class="string">'top'</span>,$(<span class="string">'.bar'</span>).height());</div><div class="line">&#125;);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//      上滑</span></div><div class="line">$(<span class="string">'.W_jd1_parent'</span>).animate(&#123;<span class="string">'top'</span>:<span class="number">-100</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="string">'.content'</span>).css(<span class="string">'top'</span>,<span class="number">0</span>);</div><div class="line">&#125;);</div><div class="line">        &#125;</div><div class="line">   &#125;,<span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">x=event.touches[<span class="number">0</span>].pageX;</div><div class="line">   y=event.touches[<span class="number">0</span>].pageY;</div><div class="line"><span class="keyword">if</span>($(<span class="string">'.content'</span>).scrollTop()&gt;<span class="number">50</span>)</div><div class="line">   &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>CSS文本超出2行就隐藏并且显示省略号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>; </div><div class="line">        <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</div><div class="line">        <span class="selector-tag">display</span><span class="selector-pseudo">:-webkit-box</span>; </div><div class="line"><span class="selector-tag">-webkit-box-orient</span><span class="selector-pseudo">:vertical</span>;</div><div class="line"><span class="selector-tag">-webkit-line-clamp</span><span class="selector-pseudo">:2</span>;</div></pre></td></tr></table></figure></li><li><p>不定宽高 让div或者 文字居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</div><div class="line">        <span class="selector-tag">width</span>: 100%;</div><div class="line">        <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</div><div class="line">        <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</div><div class="line"><span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:translate(-50</span>%,<span class="selector-tag">-50</span>%);</div></pre></td></tr></table></figure></li><li><p>模糊背景</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>); <span class="comment">/* Chrome, Opera */</span></div><div class="line">   <span class="selector-tag">-moz-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</div><div class="line">    <span class="selector-tag">-ms-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);    </div><div class="line">        <span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</div></pre></td></tr></table></figure></li><li><p>span写购物车右上角 圆形 红色的玩意er</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: <span class="selector-class">.1rem</span>;</div><div class="line"><span class="selector-tag">left</span>: 50%;</div><div class="line"><span class="selector-tag">z-index</span>: 100;</div><div class="line"><span class="selector-tag">min-width</span>: <span class="selector-class">.8rem</span>;</div><div class="line"><span class="selector-tag">height</span>: <span class="selector-class">.8rem</span>;</div><div class="line"><span class="selector-tag">padding</span>: 0 <span class="selector-class">.2rem</span>;</div><div class="line"><span class="selector-tag">margin-left</span>: <span class="selector-class">.1rem</span>;</div><div class="line"><span class="selector-tag">font-size</span>: <span class="selector-class">.6rem</span>;</div><div class="line"><span class="selector-tag">line-height</span>: <span class="selector-class">.8rem</span>;</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</div><div class="line"><span class="selector-tag">vertical-align</span>: <span class="selector-tag">top</span>;</div><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">red</span>;</div><div class="line"><span class="selector-tag">border-radius</span>: <span class="selector-class">.5rem</span>;</div></pre></td></tr></table></figure></li><li><p>修改placeholder样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-o-input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>禁止选中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">moz-user-select</span>: <span class="selector-tag">-moz-none</span>;</div><div class="line"><span class="selector-tag">-moz-user-select</span>: <span class="selector-tag">none</span>;</div><div class="line"><span class="selector-tag">-o-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">-khtml-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">-webkit-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">-ms-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">user-select</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure></li><li><p>设置或检索对象的轻按时高亮。当用户轻按一个链接或者JavaScript可点击元素时给元素覆盖一个高亮色如果想取消这个高亮，将值设置为全透明即可，比如transparent</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tap-highlight-color</span>：</div><div class="line"><span class="selector-class">.demo1</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.demo2</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>live()为动态创建的DOM加事件时候使用,off()取消事件<br>移除所有 </p><p> 元素上的 click 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   $(<span class="string">"p"</span>).off(<span class="string">"click"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7&quot;&gt;</code><br>#以上代码告诉IE浏览器，无论是否用DTD声明文档标准，IE8/9都会以IE7引擎来渲染页面。<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot;&gt;</code><br>#以上代码告诉IE浏览器，IE8/9都会以IE8引擎来渲染页面。<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code><br>#以上代码告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面。<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7,IE=9&quot;&gt;</code><br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7,9&quot;&gt;</code><br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt;</code><br>#以上代码IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame.</p></li><li><p>object-fit 类似于background-size：cover;  object-position 图片img图片控制大小位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">object-position</span>: 100% 100%;</div><div class="line"><span class="selector-class">.fill</span> &#123; <span class="attribute">object-fit</span>: fill; &#125;</div><div class="line"><span class="selector-class">.contain</span> &#123; <span class="attribute">object-fit</span>: contain; &#125;</div><div class="line"><span class="selector-class">.cover</span> &#123; <span class="attribute">object-fit</span>: cover; &#125;</div><div class="line"><span class="selector-class">.none</span> &#123; <span class="attribute">object-fit</span>: none; &#125;</div><div class="line"><span class="selector-class">.scale-down</span> &#123; <span class="attribute">object-fit</span>: scale-down; &#125;</div></pre></td></tr></table></figure><p>fill: 中文释义“填充”。默认值。替换内容拉伸填满整个content box, 不保证保持原有的比例。<br>contain: 中文释义“包含”。保持原有尺寸比例。保证替换内容尺寸一定可以在容器里面放得下。因此，此参数可能会在容器内留下空白。<br>cover: 中文释义“覆盖”。保持原有尺寸比例。保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致。因此，此参数可能会让替换内容（如图片）部分区域不可见。<br>none: 中文释义“无”。保持原有尺寸比例。同时保持替换内容原始尺寸大小。<br>scale-down: 中文释义“降低”。就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。</p></li><li><p>CSS hack方式一：条件注释法<br>这种方式是IE浏览器专有的Hack方式，微软官方推荐使用的hack方式。举例如下</p><p>只在IE下生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> IE]&gt;</div><div class="line">这段文字只在IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>只在IE6下生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> IE <span class="number">6</span>]&gt;</div><div class="line">这段文字只在IE6浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>只在IE6以上版本生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> gte IE <span class="number">6</span>]&gt;</div><div class="line">这段文字只在IE6以上(包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>只在IE8上不生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> ! IE <span class="number">8</span>]&gt;</div><div class="line">这段文字在非IE8浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>非IE浏览器生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> !IE]&gt;</div><div class="line">这段文字只在非IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></li><li><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动，当设置为fixed时页面的其余部分滚动时，背景图像不会移动。</p></li><li><p>判断ie6789</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE6.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 6.0"); </span></div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE7.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 7.0"); </span></div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE8.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 8.0"); </span></div><div class="line"> <span class="comment">// alert('您的浏览器版本过低,请升级到IE9.0以上版本或者使用其他浏览器')</span></div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE9.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 9.0"); </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>kbd标签标签定义键盘文本<br>pre 元素可定义预格式化的文本 代码啥格式 输出就是什么格式<br>samp 标签表示一段用户应该对其没有什么其他解释的文本字符。要从正常的上下文抽取这些字符时，通常要用到这个标签。<br>var 标签表示变量的名称，或者由用户提供的值。</p></li><li><p>简单的打字动画效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">@<span class="keyword">keyframes</span> typing &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span>; &#125; &#125;</span></div><div class="line"><span class="css">@<span class="keyword">keyframes</span> blink-caret &#123; 50% &#123; <span class="attribute">border-color</span>: transparent; &#125; &#125;</span></div><div class="line"><span class="undefined">h1 &#123; </span></div><div class="line"><span class="undefined">font: bold 100%,Consolas;</span></div><div class="line"><span class="css"><span class="comment">/*Consolas是一套固定字符宽度的字型，属无衬线字体*/</span></span></div><div class="line"><span class="undefined">border-right: 2px solid red;</span></div><div class="line"><span class="css"><span class="comment">/*width: 16.5em;*/</span> <span class="comment">/* fallback */</span></span></div><div class="line"><span class="css"><span class="comment">/*width: 30ch;*/</span> <span class="comment">/* # of chars */</span></span></div><div class="line"><span class="css"><span class="comment">/*margin: 2em 1em;*/</span></span></div><div class="line"><span class="css"><span class="comment">/*width: 16.5em英文宽度*/</span></span></div><div class="line"><span class="css"><span class="selector-tag">width</span>: 29<span class="selector-class">.8em</span>;</span></div><div class="line"><span class="css"><span class="comment">/*中文宽度*/</span></span></div><div class="line"><span class="undefined">white-space: nowrap;</span></div><div class="line"><span class="undefined">overflow: hidden;</span></div><div class="line"><span class="css"><span class="selector-tag">animation</span>: <span class="selector-tag">typing</span> 10<span class="selector-tag">s</span> <span class="selector-tag">steps</span>(30, <span class="selector-tag">start</span>),<span class="selector-tag">blink-caret</span> <span class="selector-class">.5s</span> <span class="selector-tag">step-end</span> <span class="selector-tag">infinite</span> <span class="selector-tag">alternate</span>;</span></div><div class="line"><span class="css"><span class="comment">/*steps(30, end) 第一个参数30这个动画分30步执行完 第二个start 第一帧是第一步动画结束此时已经出现一个字了  end 第一帧是第一步动画开始*/</span></span></div><div class="line"><span class="undefined">/*step-start 等同于 steps(10,start) 动画分成10步，动画执行时为开始左侧端点的部分为开始。</span></div><div class="line"><span class="undefined">step-end 等同于 steps(10,end) 动画分成10步，动画执行时以结尾端点为开始，默认值为 end。*/</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>王立战好帅 &amp;nbsp; 阿萨德阿萨德<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($(<span class="string">'.jiji'</span>).eq(index).is(<span class="string">':hide’))&#123;</span></div><div class="line"><span class="string">如果jiji元素此时状态为隐藏</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">width=device-width ：表示宽度是设备屏幕的宽度</div><div class="line">initial-scale=1.0 ：表示初始的缩放比例</div><div class="line">minimum-scale=0.5 ：表示最小的缩放比例</div><div class="line">maximum-scale=2.0 ：表示最大的缩放比例</div><div class="line">user-scalable=yes ：表示用户是否可以调整缩放比例</div></pre></td></tr></table></figure></li><li><p>禁止鼠标右键,f12键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">&#125; </div><div class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">e = <span class="built_in">window</span>.event || e || e.which;</div><div class="line"><span class="keyword">if</span>(e.keyCode==<span class="number">123</span>)&#123;</div><div class="line">location.href=<span class="string">'https://showcc.github.io'</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>HTML5 input标签中的required属性，规定必需在提交之前填写输入字段 提示信息。例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo_form.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">  Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"usr_name"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>鼠标样式cursor：not-allowed，是一个红色的圈加一个斜杠，表示禁止的意思，似乎IE，chrome firefox 都能够正常显示，很好用。</p></li><li><p>实现压缩文件下载rar 直接<code>&lt;a href=&quot;BB.rar&quot;&gt;</code>下载</p></li><li><p>按钮点击时候比较真实的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"HR_nr_right_a1 button_guan"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/W_guanbi.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.HR_nr_right_a1</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">123px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">44px</span>;</div><div class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</div><div class="line"><span class="attribute">display</span>: block;</div><div class="line"><span class="attribute">text-align</span>: center;</div><div class="line"><span class="attribute">line-height</span>: <span class="number">44px</span>;</div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#000000</span>;</div><div class="line"><span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0</span> auto;</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button_guan</span> &#123;</div><div class="line"><span class="attribute">border</span>: none;</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(255,255,255,1);</div><div class="line"><span class="attribute">text-decoration</span>: none;</div><div class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(219,87,5,1);</div><div class="line"><span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line"><span class="attribute">-webkit-border-radius</span>: <span class="number">8px</span>;</div><div class="line"><span class="attribute">-moz-border-radius</span>: <span class="number">8px</span>;</div><div class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</div><div class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">-o-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">-ms-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">width</span>: <span class="number">123px</span>;</div><div class="line"><span class="attribute">text-align</span>: center;</div><div class="line"><span class="attribute">-webkit-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">-moz-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">-ms-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">-o-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">transition</span>: all .<span class="number">1s</span> ease;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button_guan</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">-o-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">-ms-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line"><span class="attribute">top</span>: <span class="number">6px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>jQuery delay() 方法    设置延迟时间,对不同的div元素设置延迟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#div1"</span>).delay(<span class="string">"slow"</span>).fadeIn();</div><div class="line">    $(<span class="string">"#div2"</span>).delay(<span class="string">"fast"</span>).fadeIn();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>content-box：<br>padding和border不被包含在定义的width和height之内。对象的实际宽度等于设置的width值和border、padding之和，即 ( Element width = width + border + padding )<br>此属性表现为标准模式下的盒模型。<br><code>.test1{ box-sizing:content-box; width:200px; padding:10px; border:15px solid #eee; }</code> 总width250px；<br>border-box：<br>padding和border被包含在定义的width和height之内。对象的实际宽度就等于设置的width值，即使定义有border和padding也不会改变对象的实际宽度，即 ( Element width = width )<br>此属性表现为怪异模式下的盒模型。<br><code>.test2{ box-sizing:border-box; width:200px; padding:10px; border:15px solid #eee; }</code>  总width 200px；</p></li><li><p>三等份布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ul &#123; width: 100%;height: 80px;background: pink;display: flex;//重要 父级设置&#125;</div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line"><span class="attribute">list-style</span>: none;</div><div class="line">flex: 1;//*</div><div class="line"><span class="selector-tag">height</span>: 80<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">line-height</span>: 80<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</div><div class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></li><li><p>判断鼠标从哪个方向进入–jQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#wrap"</span>).bind(<span class="string">"mouseenter mouseleave"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> w = $(<span class="keyword">this</span>).width();</div><div class="line">       <span class="keyword">var</span> h = $(<span class="keyword">this</span>).height();</div><div class="line">           <span class="keyword">var</span> x = (e.pageX - <span class="keyword">this</span>.offsetLeft - (w / <span class="number">2</span>)) * (w &gt; h ? (h / w) : <span class="number">1</span>);</div><div class="line">           <span class="keyword">var</span> y = (e.pageY - <span class="keyword">this</span>.offsetTop - (h / <span class="number">2</span>)) * (h &gt; w ? (w / h) : <span class="number">1</span>);</div><div class="line">           <span class="keyword">var</span> direction = <span class="built_in">Math</span>.round((((<span class="built_in">Math</span>.atan2(y, x) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI)) + <span class="number">180</span>) / <span class="number">90</span>) + <span class="number">3</span>) % <span class="number">4</span>; <span class="comment">//direction的值为“0,1,2,3”分别对应着“上，右，下，左”</span></div><div class="line">           <span class="keyword">var</span> eventType = e.type;</div><div class="line">           <span class="keyword">var</span> dirName = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'上方'</span>,<span class="string">'右侧'</span>,<span class="string">'下方'</span>,<span class="string">'左侧'</span>);</div><div class="line">           <span class="keyword">if</span>(e.type == <span class="string">'mouseenter'</span>)&#123;</div><div class="line">              $(<span class="string">"#result"</span>).html(dirName[direction]+<span class="string">'进入'</span>);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">              $(<span class="string">'#result'</span>).html(dirName[direction]+<span class="string">'离开'</span>);</div><div class="line">          &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; <span class="keyword">if</span>(event.keyCode ==<span class="number">13</span>)&#123;  $(<span class="string">".W-T"</span>).trigger(<span class="string">"click"</span>);&#125;&#125;);<span class="comment">//按enter键提交</span></div><div class="line">$(<span class="string">'.W-T'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;....&#125;);</div></pre></td></tr></table></figure></li><li><p>js随机显示图片  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> images=[<span class="string">'p1.jpg'</span>,<span class="string">'p2.jpg'</span>,<span class="string">'p3.jpg'</span>];</div><div class="line"><span class="keyword">var</span> url=images[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*images.length)];</div><div class="line"><span class="built_in">console</span>.log(url);</div></pre></td></tr></table></figure></li><li><p>jq获取url </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xx = getUrlParam(<span class="string">'reurl'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);<span class="comment">//构造一个含有目标参数的正则表达式对象</span></div><div class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);<span class="comment">//匹配目标参数</span></div><div class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;<span class="comment">//返回参数值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>左侧定宽，右侧自适应<br>第一种：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.two</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.two</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>禁止滚动条(ios好像不能用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.body).css(&#123;</div><div class="line"> <span class="string">"overflow-x"</span>:<span class="string">"hidden"</span>,</div><div class="line"> <span class="string">"overflow-y"</span>:<span class="string">"hidden"</span></div><div class="line"> &#125;);</div><div class="line">$(<span class="built_in">document</span>.body).css(&#123;</div><div class="line"><span class="string">"overflow-x"</span>:<span class="string">"auto"</span>,</div><div class="line"> <span class="string">"overflow-y"</span>:<span class="string">"auto"</span></div><div class="line"> &#125;);</div></pre></td></tr></table></figure></li><li><p>用户访问页面的次数进行计数：在localStorage 本地查看,刷新页面会看到计数器在增长。关闭浏览器窗口，然后再试一次，计数器会继续计数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (localStorage.pagecount)</div><div class="line">&#123;</div><div class="line">localStorage.pagecount=<span class="built_in">Number</span>(localStorage.pagecount) +<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">localStorage.pagecount=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"Visits: "</span> + localStorage.pagecount + <span class="string">" time(s)."</span>);</div></pre></td></tr></table></figure></li><li><p>获取滚动条滚动距离 <code>$(window).scrollTop()</code>设置<code>$(window).scrollTop(100)</code>。点击导航 滚动条滚动到页面某个位置<br>1.获取终点元素的<code>var top = $(&#39;.Ws-me&#39;).find(&#39;.Ws-me-title&#39;).offset().top</code>, 距离document顶部的距离<br>2.然后点击导航    让body,html的scrollTop为top</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body,html'</span>).animate(&#123;</div><div class="line">scrollTop: top</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>浏览到某个位置，调用某个动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该调用元素的offset().top值-$(window).scrollTop()=$(window).height();</span></div><div class="line"><span class="keyword">if</span>($(obj).offset().top-$(<span class="built_in">window</span>).scrollTop()&lt;$(<span class="built_in">window</span>).height()<span class="number">-50</span>)&#123;<span class="comment">//当元素滚动到离底部50px的后触发&#125;</span></div></pre></td></tr></table></figure></li><li><p>$(‘#btn’).unbind(“click”);这句代码的作用就是取消元素btn下的click事件。如果没有规定参数，unbind() 方法会删除指定元素的所有事件处理程序。</p></li><li>jQuery为DOM动态追加事件的方法<br>最初是这样写的<br>$(“.btn-open”).on(“click”, function () {  alert($(this).text()); })<br>当然这样是不起作用的，因为在document reday后，.btn-open 这个元素根本还不存在呢，列表没绑定，事件当然也帮不上的！<br>然后是这样的：<br>$(“.table”).on(“click”, “.btn-open”, function () {alert($(this).text());})<br>代码可以看得明白，找到.table 元素，给.btn-open 追加 click事件。</li><li><p>keys_jg是数组 keys1_obj是json数组,往json数组中添加多个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> keys_jg)&#123;</div><div class="line"><span class="keyword">var</span> name1 = keys_jg[i];</div><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:name1,<span class="attr">shu</span>:<span class="string">""</span>,<span class="attr">a</span>:<span class="number">1</span>&#125;;</div><div class="line">keys1_obj.push(person);&#125;</div></pre></td></tr></table></figure></li><li><p>json数据 删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">Array</span>.prototype.removeByValue = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) &#123;</div><div class="line">      <span class="keyword">this</span>.splice(i, <span class="number">1</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a=[</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"111"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"222"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"333"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"444"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"555"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"666"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"777"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"888"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"999"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"1010"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"1111"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"1212"</span>&#125;,</div><div class="line">];</div><div class="line"></div><div class="line">$(<span class="string">"ul li"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> text3=&#123;<span class="string">"name"</span>:$(<span class="keyword">this</span>).text()&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line"><span class="keyword">var</span> az=a[i];</div><div class="line"><span class="keyword">if</span>(<span class="built_in">JSON</span>.stringify(az)==<span class="built_in">JSON</span>.stringify(text3))&#123;</div><div class="line"><span class="comment">//delete a[i].name;</span></div><div class="line">a.splice(i,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(text3);</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//console.log(a);</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>$.each()函数:<br>$.each()函数不同于JQuery对象的each()方法，它是一个全局函数，不操作JQuery对象，而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容。</p></li><li><p>取消当图片src为空的时候，默认是有边框的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-attr">[src=""]</span>&#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span><span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>display:flex,box-sizing:border-box;边框设置包括宽。box-sizing:conent-box;<br><div><img src="....."></div> div设置百分百 设置border ，图片百分百 此时图片 下面留白 只需要 让 div line-height=0;就行了（替换元素-非替换元素）。</p></li><li><p><a href="http://api.houzhi.net.cn/css/color" target="_blank" rel="external">元素随机变色—直接link引入</a><br><a href="http://api.houzhi.net.cn/img/index/640x480/000/f00/banner" target="_blank" rel="external">测试图片 大小/前景色/字体颜色/名字</a>      </p></li><li><p>让ul li 在box中 随浏览器缩小 li始终居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">*&#123;</span></div><div class="line"><span class="undefined">padding: 0;</span></div><div class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></div><div class="line"><span class="undefined">width: 80%;</span></div><div class="line"><span class="undefined">height: 500px;</span></div><div class="line"><span class="undefined">background: pink;</span></div><div class="line"><span class="undefined">margin: 20px auto;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">ul&gt;li&#123;</span></div><div class="line"><span class="undefined">list-style: none;</span></div><div class="line"><span class="undefined">width: 80px;</span></div><div class="line"><span class="undefined">height: 80px;</span></div><div class="line"><span class="css"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:50</span>%;</span></div><div class="line"><span class="undefined">text-align: center;</span></div><div class="line"><span class="undefined">line-height: 80px;</span></div><div class="line"><span class="css"><span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#444</span>;</span></div><div class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span> 5<span class="selector-tag">px</span> 0 5<span class="selector-tag">px</span>;</span></div><div class="line"><span class="undefined">display: inline-block;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">ul&#123;</span></div><div class="line"><span class="undefined">text-align: center;</span></div><div class="line"><span class="undefined">overflow: hidden;</span></div><div class="line"><span class="undefined">width: 100%;</span></div><div class="line"><span class="undefined">height: 100%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>jq动态创建dom </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html=<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> o=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = o.length<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</div><div class="line">html += <span class="string">"&lt;li&gt;"</span>+o[i]+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">$(<span class="string">'ul'</span>).html(html);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Rieko on 17-7-11.</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></li><li><p>swiper 中 设置autoHeight: true。swiper 自定义分页器—选项卡s 高度自适应 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> name;</div><div class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-container'</span>, &#123;</div><div class="line">loop: <span class="literal">true</span>,</div><div class="line">pagination: <span class="string">'.swiper-pagination'</span>,</div><div class="line">paginationBulletRender: <span class="function"><span class="keyword">function</span> (<span class="params">swiper, index, className</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</div><div class="line">name=<span class="string">'会员管理培训'</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(index==<span class="number">1</span>)&#123;</div><div class="line">name=<span class="string">'智能营销'</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(index==<span class="number">2</span>)&#123;</div><div class="line">name=<span class="string">"企业管理培训"</span></div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(index==<span class="number">3</span>)&#123;</div><div class="line">name=<span class="string">"经营支持"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">return</span> <span class="string">'&lt;span class="'</span> + className + <span class="string">'"&gt;'</span> + name + <span class="string">'&lt;/span&gt;'</span>;</div><div class="line">&#125;,</div><div class="line">&#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>html5shiv：解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题。<br>respond.min:让不支持css3 Media Query的浏览器包括IE6-IE8等其他浏览器支持查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">&lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></li><li><p>简单的搜索</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">arrw=[];</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span>;i&lt;keys_jg.length;i++)&#123;</div><div class="line">    <span class="keyword">var</span> W_val = $(<span class="string">'#W_couponText'</span>).val();</div><div class="line">    <span class="keyword">if</span>(keys_jg[i].indexOf(W_val)!= <span class="number">-1</span>)&#123;</div><div class="line">        arrw.push(keys_jg[i]);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">if</span>(arrw.length==<span class="number">0</span>)&#123;</div><div class="line">    alert(<span class="string">'没有匹配到结果'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"%c3D Text"</span>,<span class="string">" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em"</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"%c"</span>, <span class="string">"padding:50px 300px;line-height:120px;background:url('http://wayouliu.duapp.com/img/tagsImg/youth.gif') no-repeat;"</span>);</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.location.href <span class="comment">//设置或获取整个 URL 为字符串</span></div><div class="line"><span class="keyword">var</span> HiRrl = <span class="built_in">window</span>.location.protocol+<span class="string">'//'</span>+ <span class="built_in">window</span>.location.host</div></pre></td></tr></table></figure></li><li><p>img 上下左右居中 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.loading</span> <span class="selector-tag">img</span> &#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line"><span class="attribute">object-fit</span>: cover;</div><div class="line"><span class="attribute">height</span>: auto;</div><div class="line"><span class="attribute">position</span>: absolute;</div><div class="line"><span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">margin</span>:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> (gte IE <span class="number">6</span>)&amp;(lte IE <span class="number">8</span>)]&gt;</div><div class="line">&lt;script src=<span class="string">"Scripts/selectivizr.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> lte IE <span class="number">9</span>]&gt;</div><div class="line">&lt;script src=<span class="string">"Scripts/respond.min.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"Scripts/html5.min.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utfs"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;![endif]--&gt;</div><div class="line">&lt;!--[<span class="keyword">if</span> lte IE <span class="number">7</span>]&gt;</div><div class="line">&lt;div id=<span class="string">"errorie"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>您还在使用老掉牙的IE，正常使用系统前请升级您的浏览器到 IE8以上版本 <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://windows.microsoft.com/zh-cn/internet-explorer/ie-8-worldwide-languages"</span>&gt;</span>点击升级<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;强烈建议您更改换浏览器：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://down.tech.sina.com.cn/content/40975.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>谷歌 Chrome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    alert(<span class="string">'您还在使用老掉牙的IE，正常使用系统前请升级您的浏览器到 IE8以上版本'</span>)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></li><li><p>ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//加载的时候执行的函数</span></div><div class="line">$(<span class="string">'.Bgimg'</span>).html(<span class="string">'&lt;img src="img/01af1f568cd3796ac725bb5c8fdd8e.gif"&gt;'</span>);</div><div class="line">&#125;,</div></pre></td></tr></table></figure></li><li><p>数字递增</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"delay"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"免费获取验证码"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> wait=<span class="number">1</span>;</span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params">o</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">if</span> (wait &gt;= <span class="number">2000</span>) &#123;</span></div><div class="line"><span class="javascript">             o.setAttribute(<span class="string">"disabled"</span>, <span class="literal">false</span>);</span></div><div class="line"><span class="undefined">            &#125; </span></div><div class="line"><span class="javascript"><span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">            o.setAttribute(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span></div><div class="line"><span class="javascript">            o.value=<span class="string">"重新发送("</span> + wait + <span class="string">")"</span>;</span></div><div class="line"><span class="undefined">            wait++;</span></div><div class="line"><span class="javascript">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">               time(o)</span></div><div class="line"><span class="undefined">            &#125;,1)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;time(<span class="keyword">this</span>);&#125;</span></div></pre></td></tr></table></figure></li></ol><hr><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总结下开发时候随手记的一些东西，以后方便查找&quot;&gt;&lt;a href=&quot;#总结下开发时候随手记的一些东西，以后方便查找&quot; class=&quot;headerlink&quot; title=&quot;总结下开发时候随手记的一些东西，以后方便查找&quot;&gt;&lt;/a&gt;总结下开发时候随手记的一些东西，以后方便查找&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://show8.github.io/blogimage/suibi.jpg&quot; alt=&quot;图片1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随手记" scheme="https://blog.2019w.cn/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="问题总结" scheme="https://blog.2019w.cn/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>H5项目常见问题汇总及解决方案</title>
    <link href="https://blog.2019w.cn/2017/11/18/H5/"/>
    <id>https://blog.2019w.cn/2017/11/18/H5/</id>
    <published>2017-11-18T07:04:56.000Z</published>
    <updated>2017-11-18T07:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="H5页面窗口自动调整到设备宽度，并禁止用户缩放页面"><a href="#H5页面窗口自动调整到设备宽度，并禁止用户缩放页面" class="headerlink" title="H5页面窗口自动调整到设备宽度，并禁止用户缩放页面"></a>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//一、HTML页面结构</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span></div><div class="line">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</div><div class="line">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</div><div class="line">// initial-scale    默认缩放比例，为一个数字，可以带小数</div><div class="line">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</div><div class="line">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</div><div class="line">// user-scalable    是否允许手动缩放</div><div class="line"></div><div class="line">//二、JS动态判断</div><div class="line">var phoneWidth =  parseInt(window.screen.width);</div><div class="line">var phoneScale = phoneWidth/640;</div><div class="line">var ua = navigator.userAgent;</div><div class="line">if (/Android (\d+\.\d+)/.test(ua))&#123;</div><div class="line">    var version = parseFloat(RegExp.$1);</div><div class="line">    if(version&gt;2.3)&#123;</div><div class="line">        document.write('<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=640, minimum-scale = '+phoneScale+', maximum-scale = '+phoneScale+', target-densitydpi=device-dpi"</span>&gt;</span>');</div><div class="line">    &#125;else&#123;</div><div class="line">        document.write('<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=640, target-densitydpi=device-dpi"</span>&gt;</span>');</div><div class="line">    &#125;</div><div class="line">&#125; else &#123;</div><div class="line">    document.write('<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=640, user-scalable=no, target-densitydpi=device-dpi"</span>&gt;</span>');</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><hr><ul><li>空白页基本meta标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置缩放 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=no, minimal-ui"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span><span class="attr">content</span>=<span class="string">"telephone=no, email=no"</span> /&gt;</span></div></pre></td></tr></table></figure><ul><li>其他meta标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="移动端如何定义字体font-family"><a href="#移动端如何定义字体font-family" class="headerlink" title="移动端如何定义字体font-family"></a>移动端如何定义字体font-family</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@ --------------------------------------中文字体的英文名称</div><div class="line">@ 宋体      SimSun</div><div class="line">@ 黑体      SimHei</div><div class="line">@ 微信雅黑   Microsoft Yahei</div><div class="line">@ 微软正黑体 Microsoft JhengHei</div><div class="line">@ 新宋体    NSimSun</div><div class="line">@ 新细明体  MingLiU</div><div class="line">@ 细明体    MingLiU</div><div class="line">@ 标楷体    DFKai-SB</div><div class="line">@ 仿宋     FangSong</div><div class="line">@ 楷体     KaiTi</div><div class="line">@ 仿宋_GB2312  FangSong_GB2312</div><div class="line">@ 楷体_GB2312  KaiTi_GB2312  </div><div class="line">@</div><div class="line">@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</div><div class="line"></div><div class="line">body &#123; font-family: Microsoft Yahei,SimSun,Helvetica; &#125;</div></pre></td></tr></table></figure><ul><li>打电话发短信写邮件怎么实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 一、打电话</div><div class="line">&lt;a href=&quot;tel:0755-10086&quot;&gt;打电话给:0755-10086&lt;/a&gt;</div><div class="line"></div><div class="line">//  二、发短信，winphone系统无效</div><div class="line">&lt;a href=&quot;sms:10086&quot;&gt;发短信给: 10086&lt;/a&gt;</div><div class="line"></div><div class="line">// 三、写邮件</div><div class="line">//注：在添加这些功能时，第一个功能以&quot;?&quot;开头，后面的以&quot;&amp;&quot;开头</div><div class="line">//1.普通邮件</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com;384900096@qq.com&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//5.包含主题，用?subject=</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com?subject=邮件主题&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行 </div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//7.内容包含链接，含http(s)://等的文本自动转化为链接</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com?body=http://www.baidu.com&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//8.内容包含图片（PC不支持）</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com?body=&lt;img src=&apos;images/1.jpg&apos; /&gt;&quot;&gt;点击我发邮件&lt;/a&gt;</div><div class="line">//9.完整示例</div><div class="line">&lt;a href=&quot;mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src=&apos;images/1.jpg&apos; /&gt;&quot;&gt;点击我发邮件&lt;/a&gt;</div></pre></td></tr></table></figure><ul><li>移动端touch事件（区分webkit和winphone）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */</div><div class="line">// 以下支持webkit</div><div class="line">touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指</div><div class="line">touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动</div><div class="line">touchend——当手指离开屏幕时触发</div><div class="line">touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用</div><div class="line"></div><div class="line">//TouchEvent说明：</div><div class="line">touches：屏幕上所有手指的信息</div><div class="line">targetTouches：手指在目标区域的手指信息</div><div class="line">changedTouches：最近一次触发该事件的手指信息</div><div class="line">touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息</div><div class="line"></div><div class="line">//参数信息(changedTouches[0])</div><div class="line">clientX、clientY在显示区的坐标</div><div class="line">target：当前元素</div><div class="line"></div><div class="line">//事件响应顺序</div><div class="line">ontouchstart  &gt; ontouchmove  &gt; ontouchend &gt; onclick</div><div class="line"></div><div class="line">// 以下支持winphone 8</div><div class="line">MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指</div><div class="line">MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html&#123;-ms-touch-action: none;&#125;可以阻止默认情况的发生：阻止页面滚动</div><div class="line">MSPointerUp——当手指离开屏幕时触发</div></pre></td></tr></table></figure><ul><li>移动端click屏幕产生200-300ms的延时响应<br>说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。<br>以下是历史原因，来源一个公司内一个同事的分享：<br>2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。<br>双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。<br>原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接<a href="#"></a>，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//解决方案：</div><div class="line">fastclick可以解决在手机上点击事件的300ms延迟</div></pre></td></tr></table></figure><ul><li>Rentina显示屏原理及设计方案<br>说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。<br>在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。<br>那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//例如图片宽高为：200px*200px，那么写法如下</div><div class="line">.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;</div><div class="line">//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</div><div class="line">.css&#123;font-size:20px&#125;</div><div class="line"></div><div class="line">//image-set设计Rentina背景图</div><div class="line">image-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。</div><div class="line">.css &#123;</div><div class="line">    background: url(images/bg.jpg) no-repeat center;</div><div class="line">    background: -webkit-image-set(</div><div class="line">    url(images/bg.jpg) 1x,     //支持image-set普通屏</div><div class="line">    url(images/bg-2x.jpg) 2x); //支持image-set的Rentinan</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>点击元素产生背景或边框怎么去掉</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；</div><div class="line">//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；</div><div class="line">//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;去掉；</div><div class="line">//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签</div><div class="line">a,button,input,textarea &#123; </div><div class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0); </div><div class="line">    -webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</div><div class="line">&#125;   </div><div class="line">// 也可以 </div><div class="line">* &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); &#125;</div><div class="line">//winphone下</div><div class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div></pre></td></tr></table></figure><ul><li>美化表单元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//一、使用appearance改变webkit浏览器的默认外观</div><div class="line">input,select &#123; -webkit-appearance:none; appearance: none; &#125;</div><div class="line"></div><div class="line">//二、winphone下，使用伪元素改变表单元素默认外观</div><div class="line">//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰</div><div class="line">select::-ms-expand &#123; display:none; &#125;</div><div class="line"></div><div class="line">//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰</div><div class="line">input[type=radio]::-ms-check,</div><div class="line">input[type=checkbox]::-ms-check &#123; display:none; &#125;</div><div class="line"></div><div class="line">//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰</div><div class="line">input[type=text]::-ms-clear,</div><div class="line">input[type=tel]::-ms-clear,</div><div class="line">input[type=number]::-ms-clear &#123; display:none; &#125;</div></pre></td></tr></table></figure><ul><li>移动端字体单位font-size选择px还是rem</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 如需适配多种移动设备，建议使用rem。以下为参考值：</div><div class="line">html &#123; font-size: 62.5%; &#125;   //10*16 = 62.5%</div><div class="line">//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</div><div class="line">body &#123; font-size:12px; font-size:1.2rem; &#125;</div></pre></td></tr></table></figure><h3 id="超实用的CSS样式"><a href="#超实用的CSS样式" class="headerlink" title="超实用的CSS样式"></a>超实用的CSS样式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//去掉webkit的滚动条——display: none;</div><div class="line">//其他参数</div><div class="line">::-webkit-scrollba //滚动条整体部分</div><div class="line">::-webkit-scrollbar-thumb   //滚动条内的小方块</div><div class="line">::-webkit-scrollbar-track   //滚动条轨道</div><div class="line">::-webkit-scrollbar-button  //滚动条轨道两端按钮</div><div class="line">::-webkit-scrollbar-track-piece  //滚动条中间部分，内置轨道</div><div class="line">::-webkit-scrollbar-corner       //边角，两个滚动条交汇处</div><div class="line">::-webkit-resizer            //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</div><div class="line"></div><div class="line">// 禁止长按链接与图片弹出菜单</div><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span> &#123; <span class="attribute">-webkit-touch-callout</span>: none &#125;    </div><div class="line"></div><div class="line">// 禁止ios和android用户选中文字</div><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;<span class="attribute">-webkit-user-select</span>:none; <span class="attribute">user-select</span>: none; &#125;</div><div class="line"></div><div class="line">// 改变输入框placeholder的颜色值</div><div class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; <span class="comment">/* WebKit browsers */</span></div><div class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</div><div class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 4 to 18 */</span></div><div class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</div><div class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 19+ */</span></div><div class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</div><div class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; <span class="comment">/* Internet Explorer 10+ */</span></div><div class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123; <span class="attribute">color</span>:<span class="number">#999</span>; &#125;</div><div class="line"></div><div class="line">// android上去掉语音输入按钮</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-speech-button</span> &#123;<span class="attribute">display</span>: none&#125;</div><div class="line"></div><div class="line">// 阻止windows Phone的默认触摸事件</div><div class="line"><span class="comment">/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/</span></div><div class="line">html &#123; -ms-touch-action:none; &#125; //禁止winphone默认触摸事件</div></pre></td></tr></table></figure><ul><li>取消input在ios下，输入的时候英文首字母的默认大写</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure><ul><li>手机拍照和上传图片</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"images/*"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"video/*"</span> /&gt;</span></div></pre></td></tr></table></figure><ul><li>屏幕旋转的事件和样式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//JS处理</div><div class="line">function orientInit()&#123;</div><div class="line">    var orientChk = document.documentElement.clientWidth &gt; document.documentElement.clientHeight?&apos;landscape&apos;:&apos;portrait&apos;;</div><div class="line">    if(orientChk ==&apos;lapdscape&apos;)&#123;</div><div class="line">        //这里是横屏下需要执行的事件</div><div class="line">    &#125;else&#123;</div><div class="line">        //这里是竖屏下需要执行的事件</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">orientInit();</div><div class="line">window.addEventListener(&apos;onorientationchange&apos; in window?&apos;orientationchange&apos;:&apos;resize&apos;, function()&#123;</div><div class="line">    setTimeout(orientInit, 100);</div><div class="line">&#125;,false)    </div><div class="line"></div><div class="line">//CSS处理</div><div class="line">//竖屏时样式</div><div class="line">@media all and (orientation:portrait)&#123;   &#125;</div><div class="line">//横屏时样式</div><div class="line">@media all and (orientation:landscape)&#123;   &#125;</div></pre></td></tr></table></figure><ul><li>audio元素和video元素在ios和andriod中无法自动播放</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//音频，写法一</div><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"music/bg.mp3"</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span>你的浏览器还不支持哦<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line"></div><div class="line">//音频，写法二</div><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/bg.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/bg.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">    优先播放音乐bg.ogg，不支持在播放bg.mp3</div><div class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line"></div><div class="line">//JS绑定自动播放（操作window时，播放音乐）</div><div class="line">$(window).one('touchstart', function()&#123;</div><div class="line">    music.play();</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//微信下兼容处理</div><div class="line">document.addEventListener("WeixinJSBridgeReady", function () &#123;</div><div class="line">    music.play();</div><div class="line">&#125;, false);</div><div class="line"></div><div class="line">//小结</div><div class="line">//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常</div><div class="line">//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间</div></pre></td></tr></table></figure><ul><li>重力感应事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 运用HTML5的deviceMotion，调用重力感应事件</span></div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.DeviceMotionEvent)&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'devicemotion'</span>, deviceMotionHandler, <span class="literal">false</span>)</div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="keyword">var</span> speed = <span class="number">30</span>;</div><div class="line"><span class="keyword">var</span> x = y = z = lastX = lastY = lastZ = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deviceMotionHandler</span>(<span class="params">eventData</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> acceleration = event.accelerationIncludingGravity;</div><div class="line">    x = acceleration.x;</div><div class="line">    y = acceleration.y; </div><div class="line">    z = acceleration.z;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(x-lastX)&gt;speed || <span class="built_in">Math</span>.abs(y-lastY)&gt;speed || <span class="built_in">Math</span>.abs(z-lastZ)&gt;speed )&#123;</div><div class="line">        <span class="comment">//这里是摇动后要执行的方法 </span></div><div class="line">        yaoAfter();</div><div class="line">    &#125;</div><div class="line">    lastX = x;</div><div class="line">    lastY = y;</div><div class="line">    lastZ = z;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yaoAfter</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//说明：说见案例摇一摇效果中yao.js</span></div></pre></td></tr></table></figure><ul><li>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(WeixinJSBridge) == <span class="string">"undefined"</span>) &#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            WeixinJSBridge.invoke(<span class="string">'setFontSizeCallback'</span>, &#123; <span class="string">'fontSize'</span>:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">                alert(<span class="built_in">JSON</span>.stringify(res));</div><div class="line">            &#125;)</div><div class="line">        &#125;, <span class="number">0</span>)</div><div class="line">    &#125;);</div><div class="line">&#125;<span class="keyword">else</span>&#123;  </div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        WeixinJSBridge.invoke(<span class="string">'setFontSizeCallback'</span>, &#123; <span class="string">'fontSize'</span>:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">            alert(<span class="built_in">JSON</span>.stringify(res));</div><div class="line">        &#125;)</div><div class="line">    &#125;, <span class="number">0</span>)   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小</span></div><div class="line">body &#123; -webkit-text-size-adjust:<span class="number">100</span>%!important; &#125;</div><div class="line"></div><div class="line"><span class="comment">//最好的解决方案：最好使用rem或百分比布局</span></div></pre></td></tr></table></figure><ul><li>定位的坑</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//fixed定位</div><div class="line">//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</div><div class="line">//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</div><div class="line">//3.ios4下不支持position:fixed</div><div class="line">//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：</div><div class="line">&lt;div id=&quot;wrapper&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">               &lt;li&gt;&lt;/li&gt;</div><div class="line">               .....</div><div class="line">        &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script src=&quot;iscroll.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var myscroll;</div><div class="line">    function loaded()&#123;</div><div class="line">        myscroll=new iScroll(&quot;wrapper&quot;);</div><div class="line">    &#125;</div><div class="line">    window.addEventListener(&quot;DOMContentLoaded&quot;,loaded,false);</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">//position定位</div><div class="line">//Android下弹出软键盘弹出时，影响absolute元素定位</div><div class="line">//解决方案:</div><div class="line">var ua = navigator.userAgent.indexOf(&apos;Android&apos;);</div><div class="line">if(ua&gt;-1)&#123;</div><div class="line">    $(&apos;.ipt&apos;).on(&apos;focus&apos;, function()&#123;</div><div class="line">        $(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;hidden&apos;&#125;)</div><div class="line">    &#125;).on(&apos;blur&apos;, function()&#123;</div><div class="line">        $(&apos;.css&apos;).css(&#123;&apos;visibility&apos;:&apos;visible&apos;&#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>播放视频不全屏</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">1.ios7+支持自动播放</div><div class="line">2.支持Airplay的设备（如：音箱、Apple TV)播放</div><div class="line">x-webkit-airplay=&quot;true&quot; </div><div class="line">3.播放视频不全屏</div><div class="line">webkit-playsinline=&quot;true&quot; </div><div class="line">--&gt;</div><div class="line">&lt;video x-webkit-airplay=&quot;true&quot; webkit-playsinline=&quot;true&quot; preload=&quot;auto&quot; autoplay src=&quot;http://&quot;&gt;&lt;/video&gt;</div></pre></td></tr></table></figure><ul><li>JS判断设备</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deviceType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</div><div class="line">    <span class="keyword">var</span> agent = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>, <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>, <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len,len = agent.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(ua.indexOf(agent[i])&gt;<span class="number">0</span>)&#123;         </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">deviceType();</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    deviceType();</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>JS判断微信浏览器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWeixin</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</div><div class="line">    <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>)==<span class="string">'micromessenger'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>android 2.3 bug</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</div><div class="line">//2.after和before伪类无法使用动画animation</div><div class="line">//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值</div><div class="line">//4.translate百分比的写法和scale在一起会导致失效，例如：</div><div class="line">-webkit-transform: translate(-50%,-50%) scale(-0.5, 1)</div></pre></td></tr></table></figure><ul><li>android 4.x bug</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写</div><div class="line">//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</div><div class="line">//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</div><div class="line">//4.android无法同时播放多音频audio</div></pre></td></tr></table></figure><ul><li>消除transition闪屏</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.css &#123;</div><div class="line">    -webkit-transform-style: preserve-3d;</div><div class="line">    -webkit-backface-visibility: hidden;</div><div class="line">    -webkit-perspective: 1000;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>开启硬件加速</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。</div><div class="line">.css &#123;</div><div class="line">    -webkit-transform: translate3d(0,0,0);</div><div class="line">    -moz-transform: translate3d(0,0,0);</div><div class="line">    -ms-transform: translate3d(0,0,0);</div><div class="line">    transform: translate3d(0,0,0);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>渲染优化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//1.禁止使用iframe（阻塞父文档onload事件）</div><div class="line">//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）</div><div class="line">//使用CSS3代码代替JS动画；</div><div class="line">//开启GPU加速；</div><div class="line">//使用base64位编码图片(不小图而言，大图不建议使用)</div><div class="line">// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：</div><div class="line">//1.减少HTTP请求；</div><div class="line">//2.避免文件跨域；</div><div class="line">//3.修改及时生效；</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;H5页面窗口自动调整到设备宽度，并禁止用户缩放页面&quot;&gt;&lt;a href=&quot;#H5页面窗口自动调整到设备宽度，并禁止用户缩放页面&quot; class=&quot;headerlink&quot; title=&quot;H5页面窗口自动调整到设备宽度，并禁止用户缩放页面&quot;&gt;&lt;/a&gt;H5页面窗口自动调整到设备宽度，并禁止用户缩放页面&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//一、HTML页面结构&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// width    设置viewport宽度，为一个正整数，或字符串‘device-width’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// initial-scale    默认缩放比例，为一个数字，可以带小数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// user-scalable    是否允许手动缩放&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//二、JS动态判断&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var phoneWidth =  parseInt(window.screen.width);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var phoneScale = phoneWidth/640;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ua = navigator.userAgent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if (/Android (\d+\.\d+)/.test(ua))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var version = parseFloat(RegExp.$1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if(version&amp;gt;2.3)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        document.write(&#39;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=640, minimum-scale = &#39;+phoneScale+&#39;, maximum-scale = &#39;+phoneScale+&#39;, target-densitydpi=device-dpi&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&#39;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        document.write(&#39;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=640, target-densitydpi=device-dpi&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&#39;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    document.write(&#39;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&#39;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="H5" scheme="https://blog.2019w.cn/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>js数组操作</title>
    <link href="https://blog.2019w.cn/2017/11/18/JS%20array/"/>
    <id>https://blog.2019w.cn/2017/11/18/JS array/</id>
    <published>2017-11-18T06:30:42.000Z</published>
    <updated>2017-11-18T06:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="一、数组的方法"><a href="#一、数组的方法" class="headerlink" title="一、数组的方法"></a>一、数组的方法</h1><h3 id="1、数组的创建"><a href="#1、数组的创建" class="headerlink" title="1、数组的创建"></a>1、数组的创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>();　<span class="comment">//创建一个数组</span></div><div class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>([size]);　<span class="comment">//创建一个数组并指定长度，注意不是上限，是长度</span></div><div class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>([element0[, element1[, ...[, elementN]]]]);　<span class="comment">//创建一个数组并赋值</span></div></pre></td></tr></table></figure><p>要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。</p><p><img src="http://ow4d8yam8.bkt.clouddn.com/77872.jpg" alt="图1"></p><hr><a id="more"></a><h3 id="2、数组的元素的访问"><a href="#2、数组的元素的访问" class="headerlink" title="2、数组的元素的访问"></a>2、数组的元素的访问</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testGetArrValue=arrayObj[<span class="number">1</span>]; <span class="comment">//获取数组的元素值</span></div><div class="line">arrayObj[<span class="number">1</span>]= <span class="string">"这是新值"</span>; <span class="comment">//给数组元素赋予新的值</span></div></pre></td></tr></table></figure><h3 id="3、数组元素的添加"><a href="#3、数组元素的添加" class="headerlink" title="3、数组元素的添加"></a>3、数组元素的添加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arrayObj. push([item1 [item2 [. . . [itemN ]]]]);<span class="comment">// 将一个或多个新元素添加到数组结尾，并返回数组新长度</span></div><div class="line">arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);<span class="comment">// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度</span></div><div class="line">arrayObj.splice(insertPos,<span class="number">0</span>,[item1[, item2[, . . . [,itemN]]]]);<span class="comment">//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回""。</span></div></pre></td></tr></table></figure><h3 id="4、数组元素的删除"><a href="#4、数组元素的删除" class="headerlink" title="4、数组元素的删除"></a>4、数组元素的删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arrayObj.pop(); <span class="comment">//移除最后一个元素并返回该元素值</span></div><div class="line">arrayObj.shift(); <span class="comment">//移除最前一个元素并返回该元素值，数组中元素自动前移</span></div><div class="line">arrayObj.splice(deletePos,deleteCount); <span class="comment">//删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素</span></div></pre></td></tr></table></figure><h3 id="5、数组的截取和合并"><a href="#5、数组的截取和合并" class="headerlink" title="5、数组的截取和合并"></a>5、数组的截取和合并</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arrayObj.slice(start, [end]); <span class="comment">//以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素</span></div><div class="line">arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); <span class="comment">//将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组</span></div></pre></td></tr></table></figure><h3 id="6、数组的拷贝"><a href="#6、数组的拷贝" class="headerlink" title="6、数组的拷贝"></a>6、数组的拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arrayObj.slice(<span class="number">0</span>); <span class="comment">//返回数组的拷贝数组，注意是一个新的数组，不是指向</span></div><div class="line">arrayObj.concat(); <span class="comment">//返回数组的拷贝数组，注意是一个新的数组，不是指向</span></div></pre></td></tr></table></figure><h3 id="7、数组元素的排序"><a href="#7、数组元素的排序" class="headerlink" title="7、数组元素的排序"></a>7、数组元素的排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arrayObj.reverse(); <span class="comment">//反转元素（最前的排到最后、最后的排到最前），返回数组地址</span></div><div class="line">arrayObj.sort(); <span class="comment">//对数组元素排序，返回数组地址</span></div></pre></td></tr></table></figure><h3 id="8、数组元素的字符串化"><a href="#8、数组元素的字符串化" class="headerlink" title="8、数组元素的字符串化"></a>8、数组元素的字符串化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arrayObj.join(separator); <span class="comment">//返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。</span></div><div class="line">toLocaleString 、toString 、valueOf：可以看作是join的特殊用法，不常用</div></pre></td></tr></table></figure><h1 id="二、数组对象的3个属性"><a href="#二、数组对象的3个属性" class="headerlink" title="二、数组对象的3个属性"></a>二、数组对象的3个属性</h1><h3 id="1、length-属性"><a href="#1、length-属性" class="headerlink" title="1、length 属性"></a>1、length 属性</h3><p>Length属性表示数组的长度，即其中元素的个数。因为数组的索引总是由0开始，所以一个数组的上下限分别是：0和length-1。和其他大多数语言不同的是，JavaScript数组的length属性是可变的，这一点需要特别注意。当length属性被设置得更大时，整个数组的状态事实上不会发生变化，仅仅是length属性变大；当length属性被设置得比原来小时，则原先数组中索引大于或等于length的元素的值全部被丢失。下面是演示改变length属性的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">12</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">98</span>,<span class="number">76</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">76</span>];</div><div class="line"> <span class="comment">//定义了一个包含10个数字的数组</span></div><div class="line">alert(arr.length); <span class="comment">//显示数组的长度10</span></div><div class="line"> arr.length=<span class="number">12</span>; <span class="comment">//增大数组的长度</span></div><div class="line">alert(arr.length); <span class="comment">//显示数组的长度已经变为12</span></div><div class="line"> alert(arr[<span class="number">8</span>]); <span class="comment">//显示第9个元素的值，为56</span></div><div class="line"> arr.length=<span class="number">5</span>; <span class="comment">//将数组的长度减少到5，索引等于或超过5的元素被丢弃</span></div><div class="line">alert(arr[<span class="number">8</span>]); <span class="comment">//显示第9个元素已经变为"undefined"</span></div><div class="line"> arr.length=<span class="number">10</span>; <span class="comment">//将数组长度恢复为10</span></div><div class="line"> alert(arr[<span class="number">8</span>]); <span class="comment">//虽然长度被恢复为10，但第9个元素却无法收回，显示"undefined"</span></div></pre></td></tr></table></figure></p><p> 由上面的代码我们可以清楚的看到length属性的性质。但length对象不仅可以显式的设置，它也有可能被隐式修改。JavaScript中可以使用一个未声明过的变量，同样，也可以使用一个未定义的数组元素（指索引超过或等于length的元素），这时，length属性的值将被设置为所使用元素索引的值加1。例如下面的代码：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">12</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">98</span>,<span class="number">76</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">76</span>];</div><div class="line">alert(arr.length);</div><div class="line">arr[<span class="number">15</span>]=<span class="number">34</span>;</div><div class="line">alert(arr.length);</div></pre></td></tr></table></figure></p><p> 代码中同样是先定义了一个包含10个数字的数组，通过alert语句可以看出其长度为10。随后使用了索引为15的元素，将其赋值为15，即 arr[15]=34，这时再用alert语句输出数组的长度，得到的是16。无论如何，对于习惯于强类型编程的开发人员来说，这是一个很令人惊讶的特性。事实上，使用new Array()形式创建的数组，其初始长度就是为0，正是对其中未定义元素的操作，才使数组的长度发生变化。</p><p>由上面的介绍可以看到，length属性是如此的神奇，利用它可以方便的增加或者减少数组的容量。因此对length属性的深入了解，有助于在开发过程中灵活运用。</p><h3 id="2、prototype-属性"><a href="#2、prototype-属性" class="headerlink" title="2、prototype 属性"></a>2、prototype 属性</h3><p>返回对象类型原型的引用。prototype 属性是 object 共有的。<br>objectName.prototype<br>objectName 参数是object对象的名称。<br>说明：用 prototype 属性提供对象的类的一组基本功能。 对象的新实例“继承”赋予该对象原型的操作。<br>对于数组对象，以以下例子说明prototype 属性的用途。<br>给数组对象添加返回数组中最大元素值的方法。要完成这一点，声明一个函数，将它加入 Array.prototype， 并使用它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_max</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">   <span class="keyword">var</span> i,</div><div class="line">   max = <span class="keyword">this</span>[<span class="number">0</span>];</div><div class="line">   <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++)</div><div class="line">   &#123;</div><div class="line">       <span class="keyword">if</span> (max &lt; <span class="keyword">this</span>[i])</div><div class="line">       max = <span class="keyword">this</span>[i];</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> max;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">Array</span>.prototype.max = array_max;</div><div class="line"> <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line"> <span class="keyword">var</span> y = x.max();</div></pre></td></tr></table></figure></p><p> 该代码执行后，y 保存数组 x 中的最大值，或说 6。</p><h3 id="3、constructor-属性"><a href="#3、constructor-属性" class="headerlink" title="3、constructor 属性"></a>3、constructor 属性</h3><p>表示创建对象的函数。<br>object.constructor //object是对象或函数的名称。<br>说明：constructor 属性是所有具有 prototype 的对象的成员。它们包括除 Global 和 Math 对象以外的所有 JScript 固有对象。constructor 属性保存了对构造特定对象实例的函数的引用。<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"Hi"</span>);</div><div class="line"><span class="keyword">if</span> (x.constructor == <span class="built_in">String</span>) <span class="comment">// 进行处理（条件为真）。</span></div></pre></td></tr></table></figure></p><p> 或<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunc</span> </span>&#123;</div><div class="line">   <span class="comment">// 函数体。</span></div><div class="line">&#125;</div><div class="line">y = <span class="keyword">new</span> MyFunc;</div><div class="line"> <span class="keyword">if</span> (y.constructor == MyFunc) <span class="comment">// 进行处理（条件为真）。</span></div></pre></td></tr></table></figure></p><p> 对于数组来说：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">y = <span class="keyword">new</span> <span class="built_in">Array</span>();</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;一、数组的方法&quot;&gt;&lt;a href=&quot;#一、数组的方法&quot; class=&quot;headerlink&quot; title=&quot;一、数组的方法&quot;&gt;&lt;/a&gt;一、数组的方法&lt;/h1&gt;&lt;h3 id=&quot;1、数组的创建&quot;&gt;&lt;a href=&quot;#1、数组的创建&quot; class=&quot;headerlink&quot; title=&quot;1、数组的创建&quot;&gt;&lt;/a&gt;1、数组的创建&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrayObj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();　&lt;span class=&quot;comment&quot;&gt;//创建一个数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrayObj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;([size]);　&lt;span class=&quot;comment&quot;&gt;//创建一个数组并指定长度，注意不是上限，是长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrayObj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;([element0[, element1[, ...[, elementN]]]]);　&lt;span class=&quot;comment&quot;&gt;//创建一个数组并赋值&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow4d8yam8.bkt.clouddn.com/77872.jpg&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://blog.2019w.cn/tags/js/"/>
    
      <category term="数组" scheme="https://blog.2019w.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JSONP是什么</title>
    <link href="https://blog.2019w.cn/2017/11/17/JSONP/"/>
    <id>https://blog.2019w.cn/2017/11/17/JSONP/</id>
    <published>2017-11-16T16:45:16.000Z</published>
    <updated>2017-11-16T16:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、JSONP的诞生"><a href="#一、JSONP的诞生" class="headerlink" title="一、JSONP的诞生"></a>一、JSONP的诞生</h3><ul><li>首先，因为ajax无法跨域，然后开发者就有所思考</li><li>其次，开发者发现，<code>&lt;script&gt;</code>标签的src属性是可以跨域的把跨域服务器写成 调用本地的函数 ，回调数据回来不就好了？</li><li>json刚好被js支持（object）</li><li>调用跨域服务器上动态生成的js格式文件（不管是什么类型的地址，最终生成的返回值都是一段js代码）</li><li>这种获取远程数据的方式看起来非常像ajax，但其实并不一样便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP。</li><li>传递一个callback参数给跨域服务端，然后跨域服务端返回数据时会将这个callback参数作为函数名来包裹住json数据即可。</li></ul><p><img src="http://ow4d8yam8.bkt.clouddn.com/234141.jpg" alt="图1"></p><hr><a id="more"></a><h3 id="二、老板，来一斤栗子。"><a href="#二、老板，来一斤栗子。" class="headerlink" title="二、老板，来一斤栗子。"></a>二、老板，来一斤栗子。</h3><h4 id="【栗子一】"><a href="#【栗子一】" class="headerlink" title="【栗子一】"></a>【栗子一】</h4><p><code>跨域服务器</code><br>文件：<code>remote.js</code><br>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'我是远程文件'</span>);</div></pre></td></tr></table></figure></p><p>本地<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"跨域服务器/remote.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p><code>这边做的就是直接引入一个js，页面将会弹出一个提示窗体，显示 我是远程文件。</code></p><h4 id="【栗子二】"><a href="#【栗子二】" class="headerlink" title="【栗子二】"></a>【栗子二】</h4><p><code>跨域服务器</code><br>文件：<code>remote.js</code><br>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localHandler(&#123;<span class="string">"result"</span>:<span class="string">"我是远程js带来的数据"</span>&#125;);</div></pre></td></tr></table></figure></p><p>本地<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </div><div class="line">    <span class="keyword">var</span> localHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        alert(<span class="string">'我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：'</span> + data.result); </div><div class="line">    &#125;; </div><div class="line">&lt;<span class="regexp">/script&gt; </span></div><div class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>跨域服务器/remote.js<span class="string">"&gt;&lt;/script&gt;</span></div></pre></td></tr></table></figure></p><p>这边做的是</p><ul><li>本地定义一个函数</li><li>引入一个js</li><li>被引入的js里面，调用这个函数<br>页面将会弹出一个提示窗体。显示本地函数被跨域的远程js调用成功，并且还接收到了 我是远程js带来的数据。</li></ul><p>新问题出现了：让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？</p><h4 id="【栗子三】"><a href="#【栗子三】" class="headerlink" title="【栗子三】"></a>【栗子三】</h4><p>跨域服务端提供的js脚本动态生成，这样调用者可以传一个参数过去告诉跨域服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是跨域服务器就可以按照客户端的需求来生成js脚本并响应了。</p><p><code>跨域服务器</code><br>文件：<code>flightResult.php</code><br>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flightHandler(&#123;</div><div class="line">    <span class="string">"code"</span>:<span class="string">"CA1998"</span>,</div><div class="line">    <span class="string">"price"</span>: <span class="number">1780</span>,</div><div class="line">    <span class="string">"tickets"</span>: <span class="number">5</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>本地<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </div><div class="line">    <span class="comment">// 得到航班信息查询结果后的回调函数 </span></div><div class="line">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</div><div class="line">    &#125;; </div><div class="line">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码） </span></div><div class="line">    <span class="keyword">var</span> url = <span class="string">"跨域服务器/flightResult.php?code=CA1998&amp;callback=flightHandler"</span>;</div><div class="line">    <span class="comment">// 创建script标签，设置其属性 </span></div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </div><div class="line">    script.setAttribute(<span class="string">'src'</span>, url); </div><div class="line">    <span class="comment">// 把script标签加入head，此时调用开始 </span></div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><p>这次我们做的是 </p><ul><li>动态创建脚本</li><li>url中传递了一个code参数，服务器去做查询CA1998次航班的信息，callback参数告诉服务器，我的本地回调函数叫做flightHandler</li><li>跨域服务端调用这个函数flightHandler 页面将会弹出一个提示窗体。把票价、余票以及张数给传递回来了。</li></ul><h3 id="三、那么服务器到底做了什么呢？-说到底，就是拼接字符串。"><a href="#三、那么服务器到底做了什么呢？-说到底，就是拼接字符串。" class="headerlink" title="三、那么服务器到底做了什么呢？ 说到底，就是拼接字符串。"></a>三、那么服务器到底做了什么呢？ 说到底，就是拼接字符串。</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数据</span></div><div class="line">$data = [</div><div class="line">    <span class="string">"name"</span>:<span class="string">"anonymous66"</span>,</div><div class="line">    <span class="string">"age"</span>:<span class="string">"18"</span>,</div><div class="line">    <span class="string">"like"</span>:<span class="string">"jianshu"</span></div><div class="line">];</div><div class="line"><span class="comment">// 接收callback函数名称</span></div><div class="line">$callback = $_GET[<span class="string">'callback'</span>];</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">echo</span> $callback . <span class="string">"("</span> . json_encode($data) . <span class="string">")"</span>;</div></pre></td></tr></table></figure><h3 id="四、与AJAX的区别是什么？"><a href="#四、与AJAX的区别是什么？" class="headerlink" title="四、与AJAX的区别是什么？"></a>四、与AJAX的区别是什么？</h3><p>ajax和jsonp本质上是不同的东西。<br>ajax的核心是通过XmlHttpRequest获取非本页内容<br>jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本。</p><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>本篇文章是对JSONP的原理扫盲，一般很多开发者会使用却不知道原理，这在学习和成长的路上不算好事。so，知道jsonp原理，你又可以加50块工资了。</p><hr><p>转自:<a href="https://segmentfault.com/a/1190000007935557" target="_blank" rel="external">https://segmentfault.com/a/1190000007935557</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;一、JSONP的诞生&quot;&gt;&lt;a href=&quot;#一、JSONP的诞生&quot; class=&quot;headerlink&quot; title=&quot;一、JSONP的诞生&quot;&gt;&lt;/a&gt;一、JSONP的诞生&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，因为ajax无法跨域，然后开发者就有所思考&lt;/li&gt;
&lt;li&gt;其次，开发者发现，&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的src属性是可以跨域的把跨域服务器写成 调用本地的函数 ，回调数据回来不就好了？&lt;/li&gt;
&lt;li&gt;json刚好被js支持（object）&lt;/li&gt;
&lt;li&gt;调用跨域服务器上动态生成的js格式文件（不管是什么类型的地址，最终生成的返回值都是一段js代码）&lt;/li&gt;
&lt;li&gt;这种获取远程数据的方式看起来非常像ajax，但其实并不一样便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP。&lt;/li&gt;
&lt;li&gt;传递一个callback参数给跨域服务端，然后跨域服务端返回数据时会将这个callback参数作为函数名来包裹住json数据即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://ow4d8yam8.bkt.clouddn.com/234141.jpg&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="ajax" scheme="https://blog.2019w.cn/tags/ajax/"/>
    
      <category term="json" scheme="https://blog.2019w.cn/tags/json/"/>
    
      <category term="javascript" scheme="https://blog.2019w.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Bower使用指南</title>
    <link href="https://blog.2019w.cn/2017/11/17/Bower/"/>
    <id>https://blog.2019w.cn/2017/11/17/Bower/</id>
    <published>2017-11-16T16:25:12.000Z</published>
    <updated>2017-11-16T16:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bower是一个包管理工具。包的内容没有限制，比如：js库，框架，图片/字体资源等等或者它们的组合都可以，只要是你需要的就行，你也可以打包一些内容通过在bower上登记注册公开对外发布(当然Bower也支持提建私有包库)。<br><img src="http://ow4d8yam8.bkt.clouddn.com/355270-106.jpg" alt="图1"></p><hr><a id="more"></a><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g bower</div></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bower init</div><div class="line">通过问答向导的方式在当前目录生成一个bower.json文件。</div></pre></td></tr></table></figure><h3 id="查询包信息和版本"><a href="#查询包信息和版本" class="headerlink" title="查询包信息和版本"></a>查询包信息和版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bower info 包名</div><div class="line"></div><div class="line">这个命令可以查看一个包的所有版本(所以也能知道最新版本号)，并显示最新版本的包信息(bower.json)，并下载最新版本的包到本地缓存（如果之前没下载）。</div><div class="line"></div><div class="line">bower info 包名#版本号</div><div class="line"></div><div class="line">查看包的某个版本的详细信息。</div></pre></td></tr></table></figure><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bower install</div><div class="line"></div><div class="line">安装当前目录下bower.json中的指定所有包。生产环境部署时建议使用 -p 或 --production参数，这种情况不会安装devDependencies。</div><div class="line"></div><div class="line">bower install 包名 --save</div></pre></td></tr></table></figure><p>安装指定的包。</p><ul><li>如果使用参数 -S 或 –save 则安装完后，会把包名及版本号添加到bower.json的dependecies配置项数组中(方便以后重新安装)。</li><li>如果使用参数 -D 或 –save-dev 则安装完后，会把包名及版本号添加到bower.json的devDependecies配置项数组中。</li><li>如果不使用参数，则只安装包到bower_components目录，不修改bower.json文件。</li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower update 包名</div></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower search 包名</div></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bower uninstall 包名</div><div class="line"></div><div class="line">不支持一次卸载所有的包，只能手动全部删除。</div><div class="line">卸载包并不从缓存中删除，只是安装目录移除，下次安装会优先从本地缓存中复制安装。</div></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>Bower在安装包的时候，会先下载包到本地缓存，然后再复制到安装位置。缓存位置默认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Win：C:Users用户名AppDataLocalbowercachepackages</div><div class="line">Linux：~/.bower/packages</div></pre></td></tr></table></figure></p><h3 id="浏览列表"><a href="#浏览列表" class="headerlink" title="浏览列表"></a>浏览列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower cace list [package...]</div></pre></td></tr></table></figure><h3 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bower cache clean</div><div class="line">删除除所有本地缓存</div><div class="line"></div><div class="line">bower cache clean &lt;package&gt;#&lt;version&gt; </div><div class="line">删除除指定包的缓存，还可以指定版本。</div></pre></td></tr></table></figure><h1 id="bowerrc-文件"><a href="#bowerrc-文件" class="headerlink" title=".bowerrc 文件"></a>.bowerrc 文件</h1><hr><p>这个文件主要用来配置安装路径，如果不指定则默认安装到当前目录下的bower_components目录中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;directory&quot;: &quot;bower_components&quot;，   //包安装位置</div><div class="line">  &quot;storage&quot;: &#123;</div><div class="line">    &quot;packages&quot; : &quot;~/.bower/packages&quot;  //包本地缓存位置</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其他配置项参见：<a href="https://github.com/bower/spec/blob/master/config.md" target="_blank" rel="external">bowerrc/spec</a></p><h1 id="bower-json-文件"><a href="#bower-json-文件" class="headerlink" title="bower.json 文件"></a>bower.json 文件</h1><hr><p>无论你是使用bower来为项目管理外部依赖，还是准备制作一个包，都是通过bower.json文件来进行的，这个文件可以说是bower运行的核心。bower.json的配置项和其他包管理工具，比如npm，composer的都差不多，你也可以通过分析这个文件来思考包管理器是如何运行的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;:&quot;&quot;,              //必须，如果需要注册包，则该包名唯一。</div><div class="line">    </div><div class="line">    &quot;description&quot;:&quot;&quot;,       //可选，包描述</div><div class="line">    </div><div class="line">    &quot;main&quot;:[],              //可选，入口文件，bower本身不使用，供第三方构建工具会使用</div><div class="line">                            //每种文件类型只能有一个。</div><div class="line">    </div><div class="line">    &quot;ignore&quot;:[],            //可选，文件或目录列表。bower安装的时候将忽略该列表中的文件。</div><div class="line">                            //bower是从git仓库或压缩包下载一个包，里面的文件并不一定全部需要。</div><div class="line">    </div><div class="line">    &quot;dependencies&quot;:[],      //依赖包，name:value，value可以是包的semver       </div><div class="line">                            //range(版本号范围)，也可以直接是一个包的git地址或压缩包地址。</div><div class="line">                            </div><div class="line">    &quot;devDependencies&quot;:[],   //开发依赖包，仅仅在开发过程中测试或者编译文档用，部署生产环境是不需要。</div><div class="line">                            //格式和dependencies 相同</div><div class="line">                            </div><div class="line">    &quot;resolutions&quot;:[],       //包引用冲突自动使用该模块指定的包版本</div><div class="line">                            //格式和dependencies 相同</div><div class="line">                            </div><div class="line">    &quot;overrides&quot; :[          //这个也很关键，可以覆盖一个包中的默认设置，比如main里面设定的入口文件</div><div class="line">        &quot;package-name&quot;:&#123;    //这样可以根据需要，让第三方工具只打包需要的文件。</div><div class="line">            &quot;main&quot;:[]</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">                            </div><div class="line">    &quot;moduleType&quot;:&quot;&quot;,        //可选，指定包采用那种模块化方式(globals,amd,node,es6,yui)</div><div class="line">    </div><div class="line">    &quot;private&quot;:Boolean,      //是否公开发布当前包,如果只是使用bower来管理项目的包，设置为true.</div><div class="line">    </div><div class="line">    &quot;license&quot;:&quot;&quot;,           //授权方式(GPL-3.0,CC-BY-4.0.....)</div><div class="line">    </div><div class="line">    &quot;keywords&quot;:[],          //可选，方便注册后容易被其他人搜索到。</div><div class="line">    </div><div class="line">    &quot;authors&quot;:[],           //作者列表</div><div class="line">    </div><div class="line">    &quot;homepage&quot;:[],          //主页，包介绍页</div><div class="line">    </div><div class="line">    &quot;repository&quot;:&#123;          //包所在仓库。</div><div class="line">        &quot;type&quot;: &quot;git&quot;,</div><div class="line">        &quot;url&quot;: &quot;git://github.com/foo/bar.git&quot;</div><div class="line">    &#125;,</div><div class="line">｝</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bower用这套格式管理所有的包，所以下载的每个包中都会包含一个bower.json文件。</div><div class="line">如果只是使用bower作为项目的包管理工具，上述配置项只需关注：dependencies, devDependencies, resolutions，overrides即可</div><div class="line">如果你把自己开发的内容打包发布出去，这个时候才需要配置其他项。</div><div class="line">配置项的更多解释可以参考：https://github.com/bower/spec...</div></pre></td></tr></table></figure><h1 id="semver-range"><a href="#semver-range" class="headerlink" title="semver range"></a>semver range</h1><hr><p>Bower使用semver range来匹配版本。<br>常用的版本区域表达式：</p><ul><li>比较符： &lt; &gt; &lt;= &gt;= =</li><li>范围：1.2.3 - 2.3.5</li><li>通配符：1.2.* 匹配：大于1.2.0小于1.3.0</li><li>波浪范围：~1.2.3 匹配：大于当前版本，小于次末位+1，本例中是 大于1.2.3小于1.3.0</li><li>插入符范围：^1.2 匹配：大于当前版本，小于从左侧开始第一个非零值+1，本例大于1.2小于2.0</li><li>还支持一些函数判断，就不举例了。。。。</li></ul><hr><p>转自:<a href="https://segmentfault.com/a/1190000008697197" target="_blank" rel="external">https://segmentfault.com/a/1190000008697197</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Bower是一个包管理工具。包的内容没有限制，比如：js库，框架，图片/字体资源等等或者它们的组合都可以，只要是你需要的就行，你也可以打包一些内容通过在bower上登记注册公开对外发布(当然Bower也支持提建私有包库)。&lt;br&gt;&lt;img src=&quot;http://ow4d8yam8.bkt.clouddn.com/355270-106.jpg&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Bower" scheme="https://blog.2019w.cn/tags/Bower/"/>
    
      <category term="管理工具" scheme="https://blog.2019w.cn/tags/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>我与地坛--史铁生</title>
    <link href="https://blog.2019w.cn/2017/09/23/I%20and%20the%20temple%20of%20earth/"/>
    <id>https://blog.2019w.cn/2017/09/23/I and the temple of earth/</id>
    <published>2017-09-23T10:15:32.000Z</published>
    <updated>2017-09-23T10:15:32.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时间过的真的很快，转眼之间，已经毕业。今天无意间看到这篇文章，依稀记得上学时期<code>史铁生的我与地坛</code>给我的感动。虽然命运对他的不公，让他充满着怨恨，但他从未停止对生命的思考。其实我们周围的人群，每个人都有自己需要面对的命运，而每个人的命运都布满了坎坷，只是呈现出不同的方式而已。生命本来就是不圆满的，生命的意义在于自己的选择和抗争之中，只有勇敢地面对命运的残缺，挑战命运，才能体现出生命的价值。<br><img src="http://ow4d8yam8.bkt.clouddn.com/248905-106.jpg" alt="图0"></p><hr><a id="more"></a><h2 id="原文【我与地坛–史铁生】"><a href="#原文【我与地坛–史铁生】" class="headerlink" title="原文【我与地坛–史铁生】"></a>原文【我与地坛–史铁生】</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在好几篇小说中都提到过一座废弃的古园，实际就是地坛。许多年前旅游业还没有开展，园子荒芜冷落得如同一片野地，很少被人记起。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地坛离我家很近。或者说我家离地坛很近。总之，只好认为这是缘分。地坛在我出生前四百多年就座落在那儿了，而自从我的祖母年轻时带着我父亲来到北京，就一直住在离它不远的地方一五十多年间搬过几次家，可搬来搬去总是在它周围，而且是越搬离它越近了。我常觉得这中间有着宿命的味道：仿佛这古园就是为了等我，而历尽沧桑在那儿等待了四百多年。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它等待我出生，然后又等待我活到最狂妄的年龄上忽地残废了双腿。四百多年里，它一面剥蚀了古殿檐头浮夸的琉璃，淡褪了门壁上炫耀的朱红，坍圮了一段段高墙又散落了玉砌雕栏，祭坛四周的老柏树愈见苍幽，到处的野草荒藤也都茂盛得自在坦荡。这时候想必我是该来了。十五年前的一个下午，我摇着轮椅进入园中，它为一个失魂落魄的人把一切都准备好了。那时，太阳循着亘古不变的路途正越来越大，也越红。在满园弥漫的沉静光芒中，一个人更容易看到时间，并看见自己的身影。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自从那个下午我无意中进了这园子，就再没长久地离开过它。我一下子就理解了它的意图。正如我在一篇小说中所说的：“在人口密聚的城市里，有这样一个宁静的去处，像是上帝的苦心安排。”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;两条腿残废后的最初几年，我找不到工作，找不到去路，忽然间几乎什么都找不到了，我就摇了轮椅总是到它那儿去，仅为着那儿是可以逃避一个世界的另一个世界。我在那篇小说中写道：“没处可去我便一天到晚耗在这园子里。跟上班下班一样，别人去上班我就摇了轮椅到这儿来。园子无人看管，上下班时间有些抄近路的人们从园中穿过，园子里活跃一阵，过后便沉寂下来。”“园墙在金晃晃的空气中斜切下一溜荫凉，我把轮椅开进去，把椅背放倒，坐着或　是躺着，看书或者想事，撅一杈树枝左右拍打，驱赶那些和我一样不明白为什么要来这世上的小昆虫。”“蜂儿如一朵小雾稳稳地停在半空；蚂蚁摇头晃脑捋着触须，猛然间想透了什么，转身疾行而去；瓢虫爬得不耐烦了，累了祈祷一回便支开翅膀，忽悠一下升空了；树干上留着一只蝉蜕，寂寞如一间空屋；露水在草叶上滚动、聚集，压弯了草叶轰然坠地摔开万道金光。”“满园子都是草木竞相生长弄出的响动，窸窸窣窣窸窸窣窣片刻不息。”这都是真实的记录，园子荒芜但并不衰败。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除去几座殿堂我无法进去，除去那座祭坛我不能上去而只能从各个角度张望它，地坛的每一棵树下我都去过，差不多它的每一米草地上都有过我的车轮印。无论是什么季节，什么天气，什么时间，我都在这园子里呆过。有时候呆一会儿就回家，有时候就呆到满地上都亮起月光。记不清都是在它的哪些角落里了。我一连几小时专心致志地想关于死的事，也以同样的耐心和方式想过我为什么要出生。这样想了好几年，最后事情终于弄明白了：一个人，出生了，这就不再是一个可以辩论的问题，而只是上帝交给他的一个事实；上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。这样想过之后我安心多了，眼前的一切不再那么可怕。比如你起早熬夜准备考试的时候，忽然想起有一个长长的假期在前面等待你，你会不会觉得轻松一点？并且庆幸并且感激这样的安排？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剩下的就是怎样活的问题了，这却不是在某一个瞬间就能完全想透的、不是一次性能够解决的事，怕是活多久就要想它多久了，就像是伴你终生的魔鬼或恋人。所以，十五年了，我还是总得到那古园里去，去它的老树下或荒草边或颓墙旁，去默坐，去呆想，去推开耳边的嘈杂理一理纷乱的思绪，去窥看自己的心魂。十五年中，这古园的形体被不能理解它的人肆意雕琢，幸好有些东西是任谁也不能改变它的。譬如祭坛石门中的落日，寂静的光辉平铺的一刻，地上的每一个坎坷都被映照得灿烂；譬如在园中最为落寞的时间，一群雨燕便出来高歌，把天地都叫喊得苍凉；譬如冬天雪地上孩子的脚印，总让人猜想他们是谁，曾在哪儿做过些什么，然后又都到哪儿去了；譬如那些苍黑的古柏，你忧郁的时候它们镇静地站在那儿，你欣喜的时候它们依然镇静地站在那儿，它们没日没夜地站在那儿从你没有出生一直站到这个世界上又没了你的时候；譬如暴雨骤临园中，激起一阵阵灼烈而清纯的草木和泥土的气味，让人想起无数个夏天的事件；譬如秋风忽至，再有一场早霜，落叶或飘摇歌舞或坦然安卧，满园中播散着熨帖而微苦的味道。味道是最说不清楚的。味道不能写只能闻，要你身临其境去闻才能明了。味道甚至是难于记忆的，只有你又闻到它你才能记起它的全部情感和意蕴。所以我常常要到那园子里去。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我才想到，当年我总是独自跑到地坛去，曾经给母亲出了一个怎样的难题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她不是那种光会疼爱儿子而不懂得理解儿子的母亲。她知道我心里的苦闷，知道不该阻止我出去走走，知道我要是老呆在家里结果会更糟，但她又担心我一个人在那荒僻的园子里整天都想些什么。我那时脾气坏到极点，经常是发了疯一样地离开家，从那园子里回来又中了魔似的什么话都不说。母亲知道有些事不宜问，便犹犹豫豫地想问而终于不敢问，因为她自己心里也没有答案。她料想我不会愿意她跟我一同去，所以她从未这样要求过，她知道得给我一点独处的时间，得有这样一段过程。她只是不知道这过程得要多久，和这过程的尽头究竟是什么。每次我要动身时，她便无言地帮我准备，帮助我上了轮椅车，看着我摇车拐出小院；这以后她会怎样，当年我不曾想过。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一回我摇车出了小院；想起一件什么事又返身回来，看见母亲仍站在原地，还是送我走时的姿势，望着我拐出小院去的那处墙角，对我的回来竟一时没有反应。待她再次送我出门的时候，她说：“出去活动活动，去地坛看看书，我说这挺好。”许多年以后我才渐渐听出，母亲这话实际上是自我安慰，是暗自的祷告，是给我的提示，是恳求与嘱咐。只是在她猝然去世之后，我才有余暇设想。当我不在家里的那些漫长的时间，她是怎样心神不定坐卧难宁，兼着痛苦与惊恐与一个母亲最低限度的祈求。我可以断定，以她的聪慧和坚忍，在那些空落的白天后的黑夜，在那不眠的黑夜后的白天，她思来想去最后准是对自己说：“反正我不能不让他出去，未来的日子是他自己的，如果他真的要在那园子里出了什么事，这苦难也只好我来承担。”在那段日子里–那是好几年长的一段日子，我想我一定使母亲作过了最坏的准备了，但她从来没有对我说过：“你为我想想”。事实上我也真的没为她想过。那时她的儿子，还太年轻，还来不及为母亲想，他被命运击昏了头，一心以为自己是世上最不幸的一个，不知道儿子的不幸在母亲那儿总是要加倍的。她有一个长到二十岁上忽然截瘫了的儿子，这是她唯一的儿子；她情愿截瘫的是自己而不是儿子，可这事无法代替；她想，只要儿子能活下去哪怕自己去死呢也行，可她又确信一个人不能仅仅是活着，儿子得有一条路走向自己的幸福；而这条路呢，没有谁能保证她的儿子终于能找到。——这样一个母亲，注定是活得最苦的母亲。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一次与一个作家朋友聊天，我问他学写作的最初动机是什么？他想了一会说：“为我母亲。为了让她骄傲。”我心里一惊，良久无言。回想自己最初写小说的动机，虽不似这位朋友的那般单纯，但如他一样的愿望我也有，且一经细想，发现这愿望也在全部动机中占了很大比重。这位朋友说：“我的动机太低俗了吧？”我光是摇头，心想低俗并不见得低俗，只怕是这愿望过于天真了。他又说：“我那时真就是想出名，出了名让别人羡慕我母亲。”我想，他比我坦率。我想，他又比我幸福，因为他的母亲还活着。而且我想，他的母亲也比我的母亲运气好，他的母亲没有一个双腿残废的儿子，否则事情就不这么简单。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我的头一篇小说发表的时候，在我的小说第一次获奖的那些日子里，我真是多么希望我的母亲还活着。我便又不能在家里呆了，又整天整天独自跑到地坛去，心里是没头没尾的沉郁和哀怨，走遍整个园子却怎么也想不通：母亲为什么就不能再多活两年？为什么在她儿子就快要碰撞开一条路的时候，她却忽然熬不住了？莫非她来此世上只是为了替儿子担忧，却不该分享我的一点点快乐？她匆匆离我去时才只有四十九呀！有那么一会，我甚至对世界对上帝充满了仇恨和厌恶。后来我在一篇题为“合欢树”的文章中写道：“我坐在小公园安静的树林里，闭上眼睛，想，上帝为什么早早地召母亲回去呢？很久很久，迷迷糊溯的我听见了回答：‘她心里太苦了，上帝看她受不住了，就召她回去。’我似乎得了一点安慰，睁开 眼睛，看见风正从树林里穿过。”小公园，指的也是地坛。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只是到了这时候，纷纭的往事才在我眼前幻现得清晰，母亲的苦难与伟大才在我 心中渗透得深彻。上帝的考虑，也许是对的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;摇着轮椅在园中慢慢走，又是雾罩的清晨，又是骄阳高悬的白昼，我只想着一件事：母亲已经不在了。在老柏树旁停下，在草地上在颓墙边停下，又是处处虫鸣的午后，又是鸟儿归巢的傍晚，我心里只默念着一句话：可是母亲已经不在了。把椅背放倒，躺下，似睡非睡挨到日没，坐起来，心神恍惚，呆呆地直坐到古祭坛上落满黑暗然后再渐渐浮起月光，心里才有点明白，母亲不能再来这园中找我了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;曾有过好多回，我在这园子里呆得太久了，母亲就来找我。她来找我又不想让我发觉，只要见我还好好地在这园子里，她就悄悄转身回去，我看见过几次她的背影。我也看见过几回她四处张望的情景，她视力不好，端着眼镜像在寻找海上的一条船，她没看见我时我已经看见她了，待我看见她也看见我了我就不去看她，过一会我再抬头看她就又看见她缓缓离去的背影。我单是无法知道有多少回她没有找到我。有一回我坐在矮树丛中，树丛很密，我看见她没有找到我；她一个人在园子里走，走过我的身旁，走过我经常呆的一些地方，步履茫然又急迫。我不知道她已经找了多久还要找多久，我不知道为什么我决意不喊她–但这绝不是小时候的捉迷藏，这也许是出于长大了的男孩子的倔强或羞涩？但这倔只留给我痛悔，丝毫也没有骄傲。我真想告诫所有长大了的男孩子，千万不要跟母亲来这套倔强，羞涩就更不必，我已经懂了可我已经来不及了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;儿子想使母亲骄傲，这心情毕竟是太真实了，以致使“想出名”这一声名狼藉的念头也多少改变了一点形象。这是个复杂的问题，且不去管它了罢。随着小说获奖的激动逐日暗淡，我开始相信，至少有一点我是想错了：我用纸笔在报刊上碰撞开的一条路，并不就是母亲盼望我找到的那条路。年年月月我都到这园子里来，年年月月我都要想，母亲盼望我找到的那条路到底是什么。母亲生前没给我留下过什么隽永的哲言，或要我恪守的教诲，只是在她去世之后，她艰难的命运，坚忍的意志和毫不张扬的爱，随光阴流转，在我的印象中愈加鲜明深刻。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一年，十月的风又翻动起安详的落叶，我在园中读书，听见两个散步的老人说：“没想到这园子有这么大。”我放下书，想，这么大一座园子，要在其中找到她的儿子，母亲走过了多少焦灼的路。多年来我头一次意识到，这园中不单是处处都有过我的车辙，有过我的车辙的地方也都有过母亲的脚印。</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果以一天中的时间来对应四季，当然春天是早晨，夏天是中午，秋天是黄昏，冬天是夜晚。如果以乐器来对应四季，我想春天应该是小号，夏天是定音鼓，秋天是大提琴，冬天是圆号和长笛。要是以这园子里的声响来对应四季呢？那么，春天是祭坛上空漂浮着的鸽子的哨音，夏天是冗长的蝉歌和杨树叶子哗啦啦地对蝉歌的取笑，秋天是古殿檐头的风铃响，冬天是啄木鸟随意而空旷的啄木声。以园中的景物对应四季，春天是一径时而苍白时而黑润的小路，时而明朗时而阴晦的天上摇荡着串串杨花；夏天是一条条耀眼而灼人的石凳，或阴凉而爬满了青苔的石阶，阶下有果皮，阶上有半张被坐皱的报纸；秋天是一座青铜的大钟，在园子的西北角上曾丢弃着一座很大的铜钟，铜钟与这园子一般年纪，浑身挂满绿锈，文字已不清晰；冬天，是林中空地上几只羽毛蓬松的老麻雀。以心绪对应四季呢？春天是卧病的季节，否则人们不易发觉春天的残忍与渴望；夏天，情人们应该在这个季节里失恋，不然就似乎对不起爱情；秋天是从外面买一棵盆花回家的时候，把花搁在阔别了的家中，并且打开窗户把阳光也放进屋里，慢慢回忆慢慢整理一些发过霉的东西；冬天伴着火炉和书，一遍遍坚定不死的决心，写一些并不发出的信。还可以用艺术形式对应四季，这样春天就是一幅画，夏天是一部长篇小说，秋天是一首短歌或诗，冬天是一群雕塑。以梦呢？以梦对应四季呢？春天是树尖上的呼喊，夏天是呼喊中的细雨，秋天是细雨中的土地，冬天是干净的土地上的一只孤零的烟斗。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为这园子，我常感恩于自己的命运。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我甚至就能清楚地看见，一旦有一天我不得不长久地离开它，我会怎样想念它，我会怎样想念它并且梦见它，我会怎样因为不敢想念它而梦也梦不到它。</p><h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我想想，十五年中坚持到这园子来的人都是谁呢？好像只剩了我和一对老人。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;十五年前，这对老人还只能算是中年夫妇，我则货真价实还是个青年。他们总是在薄暮时分来园中散步，我不大弄得清他们是从哪边的园门进来，一般来说他们是逆时针绕这园子走。男人个子很高，肩宽腿长，走起路来目不斜视，胯以上直至脖颈挺直不动；他的妻子攀了他一条胳膊走，也不能使他的上身稍有松懈。女人个子却矮，也不算漂亮，我无端地相信她必出身于家道中衰的名门富族；她攀在丈夫胳膊上像个娇弱的孩子，她向四周观望似总含着恐惧，她轻声与丈夫谈话，见有人走近就立刻怯怯地收住话头。我有时因为他们而想起冉阿让与柯赛特，但这想法并不巩固，他们一望即知是老夫老妻。两个人的穿着都算得上考究，但由于时代的演进，他们的服饰又可以称为古朴了。他们和我一样，到这园子里来几乎是风雨无阻，不过他们比我守时。我什么时间都可能来，他们则一定是在暮色初临的时候。刮风时他们穿了米色风衣，下雨时他们打了黑色的雨伞，夏天他们的衬衫是白色的裤子是黑色的或米色的，冬天他们的呢子大衣又都是黑 色的，想必他们只喜欢这三种颜色。他们逆时针绕这园子一周，然后离去。他们走过我身旁时只有男人的脚步响，女人像是贴在高大的丈夫身上跟着漂移。我相信他们一定对我有印象，但是我们没有说过话，我们互相都没有想要接近的表示。十五年中，他们或许注意到一个小伙子进入了中年，我则看着一对令人羡慕的中年情侣不觉中成了两个老人。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;曾有过一个热爱唱歌的小伙子，他也是每天都到这园中来，来唱歌，唱了好多年，后来不见了。他的年纪与我相仿，他多半是早晨来，唱半小时或整整唱一个上午，估计在另外的时间里他还得上班。我们经常在祭坛东侧的小路上相遇，我知道他是到东南角的高墙下去唱歌，他一定猜想我去东北角的树林里做什么。我找到我的地方，抽几口烟，便听见他谨慎地整理歌喉了。他反反复复唱那么几首歌。文化革命没过去的时侯，他唱“蓝蓝的天上白云飘，白云下面马儿跑……”我老也记不住这歌的名字。文革后，他唱《货郎与小姐》中那首最为流传的咏叹调。“卖布–卖布嘞，卖布–卖布嘞！”我记得这开头的一句他唱得很有声势，在早晨清澈的空气中，货郎跑遍园中的每一个角落去恭维小姐。“我交了好运气，我交了好运气，我为幸福唱歌曲……”然后他就一遍一遍地唱，不让货郎的激情稍减。依我听来，他的技术不算精到，在关键的地方常出差错，但他的嗓子是相当不坏的，而且唱一个上午也听不出一点疲惫。太阳也不疲惫，把大树的影子缩小成一团，把疏忽大意的蚯蚓晒干在小路上，将近中午，我们又在祭坛东侧相遇，他看一看我，我看一看他，他往北去，我往南去。日子久了，我感到我们都有结识的愿望，但似乎都不知如何开口，于是互相注视一下终又都移开目光擦身而过；这样的次数一多，便更不知如何开口了。终于有一天——一个丝毫没有特点的日子，我们互相点了一下头。他说：“你好。”我说：“你好。”他说：“回去啦？”我说：“是，你呢？”他说：“我也该回去了。”我们都放慢脚步（其实我是放慢车速），想再多说几句，但仍然是不知从何说起，这样我们就都走过了对方，又都扭转身子面向对方。他说：“那就再见吧。”我说：“好，再见。”便互相笑笑各走各的路了。但是我们没有再见，那以后，园中再没了他的歌声，我才想到，那天他或许是有意与我道别的，也许他考上了哪家专业文文工团或歌舞团了吧？真希望他如他歌里所唱的那样，交了好运气。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有一些人，我还能想起一些常到这园子里来的人。有一个老头，算得一个真正的饮者；他在腰间挂一个扁瓷瓶，瓶里当然装满了酒，常来这园中消磨午后的时光。他在园中四处游逛，如果你不注意你会以为园中有好几个这样的老头，等你看过了他卓尔不群的饮酒情状，你就会相信这是个独一无二的老头。他的衣着过分随便，走路的姿态也不慎重，走上五六十米路便选定一处地方，一只脚踏在石凳上或土埂上或树墩上，解下腰间的酒瓶，解酒瓶的当儿迷起眼睛把一百八十度视角内的景物细细看一遭，然后以迅雷不及掩耳之势倒一大口酒入肚，把酒瓶摇一摇再挂向腰间，平心静气地想一会什么，便走下一个五六十米去。还有一个捕鸟的汉子，那岁月园中人少，鸟却多，他在西北角的树丛中拉一张网，鸟撞在上面，羽毛戗在网眼里便不能自拔。他单等一种过去很多而现非常罕见的鸟，其它的鸟撞在网上他就把它们摘下来放掉，他说已经有好多年没等到那种罕见的鸟，他说他再等一年看看到底还有没有那种鸟，结果他又等了好多年。早晨和傍晚，在这园子里可以看见一个中年女工程师；早晨她从北向南穿过这园子去上班，傍晚她从南向北穿过这园子回家。事实上我并不了解她的职业或者学历，但我以为她必是学理工的知识分子，别样的人很难有她那般的素朴并优雅。当她在园子穿行的时刻，四周的树林也仿佛更加幽静，清淡的日光中竟似有悠远的琴声，比如说是那曲《献给艾丽丝》才好。我没有见过她的丈夫，没有见过那个幸运的男人是什么样子，我想象过却想象不出，后来忽然懂了想象不出才好，那个男人最好不要出现。她走出北门回家去。我竟有点担心，担心她会落入厨房，不过，也许她在厨房里劳作的情景更有另外的美吧，当然不能再是《献给艾丽丝》，是个什么曲子呢？还有一个人，是我的朋友，他是个最有天赋的长跑家，但他被埋没了。他因为在文革中出言不慎而坐了几年牢，出来后好不容易找了个拉板车的工作，样样待遇都不能与别人平等，苦闷极了便练习长跑。那时他总来这园子里跑，我用手表为他计时。他每跑一圈向我招下手，我就记下一个时间。每次他要环绕这园子跑二十圈，大约两万米。他盼望以他的长跑成绩来获得政治上真正的解放，他以为记者的镜头和文字可以帮他做到这一点。第一年他在春节环城赛上跑了第十五名，他看见前十名的照片都挂在了长安街的新闻橱窗里，于是有了信心。第二年他跑了第四名，可是新闻橱窗里只挂了前三名的照片，他没灰心。第三年他跑了第七名、橱窗里挂前六名的照片，他有点怨自已。第四年他跑了第三名，橱窗里却只挂了第一名的照片。第五年他跑了第一名–他几乎绝望了，橱窗里只有一幅环城赛群众场面的照片。那些年我们俩常一起在这园子里呆到天黑，开怀痛骂，骂完沉默著回家，分手时再互相叮嘱：先别去死，再试着活一活看。他已经不跑了，年岁太大了，跑不了那么快了。最后一次参加环城赛，他以三十八岁之龄又得了第一名并破了纪录，有一位专业队的教练对他说：“我要是十年前发现你就好了。”他苦笑一下什么也没说，只在傍晚又来这园中找到我，把这事平静地向我叙说一遍。不见他已有好几年了，他和妻子和儿子住在很远的地方。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些人都不到园子里来了，园子里差不多完全换了一批新人。十五年前的旧人，就剩我和那对老夫老妻了。有那么一段时间，这老夫老妻中的一个也忽然不来，薄暮时分唯男人独自来散步，步态也明显迟缓了许多，我悬心了很久，怕是那女人出了什么事。幸好过了一个冬天那女人又来了，两个人仍是逆时针绕着园子走，一长一短两个身影恰似钟表的两支指针；女人的头发白了许多，但依旧攀着丈夫的胳膊走得像个孩子。“攀”这个字用得不恰当了，或许可以用“搀”吧，不知有没有兼具这两个意思的字。</p><h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我也没有忘记一个孩子——一个漂亮而不幸的小姑娘。十五年前的那个下午，我第一次到这园子里来就看见了她，那时她大约三岁，蹲在斋宫西边的小路上捡树上掉落的“小灯笼”。那儿有几棵大梨树，春天开一簇簇细小而稠密的黄花，花落了便结出无数如同三片叶子合抱的小灯笼，小灯笼先是绿色，继尔转白，再变黄，成熟了掉落得满地都是。小灯笼精巧得令人爱惜，成年人也不免捡了一个还要捡一个。小姑娘咿咿呀呀地跟自己说着话，一边捡小灯笼；她的嗓音很好，不是她那个年龄所常有的那般尖细，而是很圆润甚或是厚重，也许是因为那个下午园子里太安静了。我奇怪这么小的孩子怎么一个人跑来这园子里？我问她住在哪儿？她随便指一下，就喊她的哥哥，沿墙根一带的茂草之中便站起一个七八岁的男 孩，朝我望望，看我不像坏人便对他的妹妹说：“我在这儿呢”，又伏下身去，他在捉什么虫子。他捉到螳螂，蚂蚱，知了和蜻蜒，来取悦他的妹妹。有那么两三年，我经常在那几棵大梨树下见到他们，兄妹俩总是在一起玩，玩得和睦融洽，都渐渐长大了些。之后有很多年没见到他们。我想他们都在学校里吧，小姑娘也到了上学的年龄，必是告别了孩提时光，没有很多机会来这儿玩了。这事很正常，没理由太搁在心上，若不是有一年我又在园中见到他们，肯定就会慢慢把他们忘记。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那是个礼拜日的上午。那是个晴朗而令人心碎的上午，时隔多年，我竟发现那个漂亮的小姑娘原来是个弱智的孩子。我摇着车到那几棵大栾树下去，恰又是遍地落满了小灯笼的季节；当时我正为一篇小说的结尾所苦，既不知为什么要给它那样一个结尾，又不知何以忽然不想让它有那样一个结尾，于是从家里跑出来，想依靠着园中的镇静，看看是否应该把那篇小说放弃。我刚刚把车停下，就见前面不远处有几个人在戏耍一个少女，作出怪样子来吓她，又喊又笑地追逐她拦截她，少女在几棵大树间惊惶地东跑西躲，却不松手揪卷在怀里的裙裾，两条腿袒露着也似毫无察觉。我看出少女的智力是有些缺陷，却还没看出她是谁。我正要驱车上前为少女解围，就见远处飞快地骑车来了个小伙子，于是那几个戏耍少女的家伙望风而逃。小伙子把自行车支在少女近旁，怒目望着那几个四散逃窜的家伙，一声不吭喘着粗气。脸色如暴雨前的天空一样一会比一会苍白。这时我认出了他们，小伙子和少女就是当年那对小兄妹。我几乎是在心里惊叫了一声，或者是哀号。世上的事常常使上帝的居心变得可疑。小伙子向他的妹妹走去。少女松开了手，裙裾随之垂落了下来，很多很多她捡的小灯笼便洒落了一地，铺散在她脚下。她仍然算得漂亮，但双眸迟滞没有光彩。她呆呆地望那群跑散的家伙，望着极目之处的空寂，凭她的智力绝不可能把这个世界想明白吧？大树下，破碎的阳光星星点点，风把遍地的小灯笼吹得滚动，仿佛暗哑地响着无数小铃铛。哥哥把妹妹扶上自行车后座， 带着她无言地回家去了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无言是对的。要是上帝把漂亮和弱智这两样东西都给了这个小姑娘，就只有无言和回家去是对的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;谁又能把这世界想个明白呢？世上的很多事是不堪说的。你可以抱怨上帝何以要降诸多苦难给这人间，你也可以为消灭种种苦难而奋斗，并为此享有崇高与骄傲，但只要你再多想一步你就会坠入深深的迷茫了：假如世界上没有了苦难，世界还能够存在么？要是没有愚钝，机智还有什么光荣呢？要是没了丑陋，漂亮又怎么维系自己的幸运？要是没有了恶劣和卑下，善良与高尚又将如何界定自己又如何成为美德呢？要是没有了残疾，健全会否因其司空见惯而变得腻烦和乏味呢？我常梦想着在人间彻底消灭残疾，但可以相信，那时将由患病者代替残疾人去承担同样的苦难。如果能够把疾病也全数消灭，那么这份苦难又将由（比如说）像貌丑陋的人去承担了。就算我们连丑陋，连愚昧和卑鄙和一切我们所不喜欢的事物和行为，也都可以统统消灭掉，所有的人都一味健康、漂亮、聪慧、高尚，结果会怎样呢？ 怕是人间的剧目就全要收场了，一个失去差别的世界将是一条死水，是一块没有感觉 没有肥力的沙漠。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看来差别永远是要有的。看来就只好接受苦难——人类的全部剧目需要它，存在的本身需要它。看来上帝又一次对了。<br>于是就有一个最令人绝望的结论等在这里：由谁去充任那些苦难的角色？又有谁去体现这世间的幸福，骄傲和快乐？只好听凭偶然，是没有道理好讲的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就命运而言，休论公道。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么，一切不幸命运的救赎之路在哪里呢？设若智慧的悟性可以引领我们去找到救赎之路，难道所有的人都能够获得这样的智慧和悟性吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我常以为是丑女造就了美人。我常以为是愚氓举出了智者。我常以为是懦夫衬照了英雄。我常以为是众生度化了佛祖。</p><h3 id="六"><a href="#六" class="headerlink" title="六"></a>六</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设若有一位园神，他一定早已注意到了，这么多年我在这园里坐着，有时候是轻松快乐的，有时候是沉郁苦闷的，有时候优哉游哉，有时候栖惶落寞，有时候平静而且自信，有时候又软弱，又迷茫。其实总共只有三个问题交替着来骚扰我，来陪伴我。第一个是要不要去死？第二个是为什么活？第三个，我干嘛要写作？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我看看，它们迄今都是怎样编织在一起的吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你说，你看穿了死是一件无需乎着急去做的事，是一件无论怎样耽搁也不会错过的事，便决定活下去试试？是的，至少这是很关健的因素。为什么要活下去试试呢？好像仅仅是因为不甘心，机会难得，不试白不试，腿反正是完了，一切仿佛都要完了，但死神很守信用，试一试不会额外再有什么损失。说不定倒有额外的好处呢是不是？我说过，这一来我轻松多了，自由多了。为什么要写作呢？作家是两个被人看重的字，这谁都知道。为了让那个躲在园子深处坐轮椅的人，有朝一日在别人眼里也稍微有点光彩，在众人眼里也能有个位置，哪怕那时再去死呢也就多少说得过去了，开始的时候就是这样想，这不用保密，这些已经不用保密了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我带着本子和笔，到园中找一个最不为人打扰的角落，偷偷地写。那个爱唱歌的小伙子在不远的地方一直唱。要是有人走过来，我就把本子合上把笔叼在嘴里。我怕写不成反落得尴尬。我很要面子。可是你写成了，而且发表了。人家说我写的还不坏，他们甚至说：真没想到你写得这么好。我心说你们没想到的事还多着呢。我确实有整整一宿高兴得没合眼。我很想让那个唱歌的小伙子知道，因为他的歌也毕竟是唱得不错。我告诉我的长跑家朋友的时候，那个中年女工程师正优雅地在园中穿行；长跑家很激动，他说好吧，我玩命跑．你玩命写。这一来你中了魔了，整天都在想哪一件事可以写，哪一个人可以让你写成小说。是中了魔了，我走到哪儿想到哪儿，在人山人海里只寻找小说，要是有一种小说试剂就好了，见人就滴两滴看他是不是一篇小说，要是有一种小说显影液就好了，把它泼满全世界看看都是哪儿有小说，中了魔了，那时我完全是为了写作活着。结果你又发表了几篇，并且出了一点小名，可这时你越来越感到恐慌。我忽然觉得自己活得像个人质，刚刚有点像个人了却又过了头，像个人质，被一个什么阴谋抓了来当人质，不定哪天被处决，不定哪天就完蛋。你担心要不了多久你就会文思枯竭，那样你就又完了。凭什么我总能写出小说来呢？凭什么那些适合作小说的生活素材就总能送到一个截瘫者跟前来呢？人家满世界跑都有枯竭的危险，而我坐在这园子里凭什么可以一篇接一篇地写呢？你又想到死了。我想见好就收吧。当一名人质实在是太累了太紧张了，太朝不保夕了。我为写作而活下来，要是写作到底不是我应该干的事，我想我再活下去是不是太冒傻气了？你这么想着你却还在绞尽脑汁地想写。我好歹又拧出点水来，从一条快要晒干的毛巾上。恐慌日甚一日，随时可能完蛋的感觉比完蛋本身可怕多了，所谓怕贼偷就怕贼惦记，我想人不如死了好，不如不出生的好，不如压根儿没有这个世 界的好。可你并没有去死。我又想到那是一件不必着急的事。可是不必着急的事并不证明是一件必要拖延的事呀？你总是决定活下来，这说明什么？是的，我还是想活。人为什么活着？因为人想活着，说到底是这么回事，人真正的名字叫作：欲望。可我不怕死，有时候我真的不怕死。有时候，——说对了。不怕死和想去死是两回事，有时候不怕死的人是有 的，一生下来就不怕死的人是没有的。我有时候倒是 怕活。可是怕活不等于不想活呀？可我为什么还想活呢？因为你还想得到点什么、你觉得你还是可以得到点什么的，比如说爱情，比如说，价值之类，人真正的名字叫欲望。这不对吗？我不该得到点什么吗？没说不该。可我为什么活得恐慌，就像个人质？后来你明白了，你明白你错了，活着不是为了写作，而写作是为了活着。你明白了这一点是在一个挺滑稽的时刻。那天你又说你不如死了好，你的一个朋友劝你：你不能死，你还得写呢，还有好多好作品等着你去写呢。这时候你忽然明白了，你说：只是因为我活着，我才不得不写作。或者说只是因为你还想活下去，你才不得不写作。是的，这样说过之后我竟然不那么恐慌了。就像你看穿了死之后所得的那份轻松？一个人质报复一场阴谋的最有效的办法是把自己杀死。我看出我得先把我杀死在市场上，那样我就不用参加抢购题材的风潮了。你还写吗？还写。你真的不得不写吗？人都忍不住要为生存找一些牢靠的理由。你不担心你会枯竭了？我不知道，不过我想，活着的问题在死前是完不了的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这下好了，您不再恐谎了不再是个人质了，您自由了。算了吧你，我怎么可能自由呢？别忘了人真正的名字是：欲望。所以您得知道，消灭恐慌的最有效的办法就是消灭欲望。可是我还知道，消灭人性的最有效的办法也是消灭欲望。那么，是消灭欲望同时也消灭恐慌呢？还是保留欲望同时也保留人生？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在这园子里坐着，我听见园神告诉我，每一个有激情的演员都难免是一个人质。每一个懂得欣赏的观众都巧妙地粉碎了一场阴谋。每一个乏味的演员都是因为他老以为这戏剧与自己无关。每一个倒霉的观众都是因为他总是坐得离舞台太近了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在这园子里坐着，园神成年累月地对我说：孩子，这不是别的，这是你的罪孽和福祉。</p><h3 id="七"><a href="#七" class="headerlink" title="七"></a>七</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘，但是有些事只适合收藏。不能说，也不能想，却又不能忘。它们不能变成语言，它们无法变成语言，一旦变成语言就不再是它们了。它们是一片朦胧的温馨与寂寥，是一片成熟的希望与绝望，它们的领地只有两处：心与坟墓。比如说邮票，有些是用于寄信的，有些仅仅是为了收藏。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如今我摇着车在这园子里慢慢走，常常有一种感觉，觉得我一个人跑出来已经玩得太久了。有一天我整理我的旧像册，一张十几年前我在这园子里照的照片——那个年轻人坐在轮椅上，背后是一棵老柏树，再远处就是那座古祭坛。我便到园子里去找那棵树。我按着照片上的背景找很快就找到了它，按着照片上它枝干的形状找，肯定那就是它。但是它已经死了，而且在它身上缠绕着一条碗口粗的藤萝。有一天我在这园子碰见一个老太太，她说：“哟，你还在这儿哪？”她问我：“你母亲还好吗？”“您是谁？”“你不记得我，我可记得你。有一回你母亲来这儿找你，她问我您看没看见一个摇轮椅的孩子？……”我忽然觉得，我一个人跑到这世界上来真是玩得太久了。有一天夜晚，我独自坐在祭坛边的路灯下看书，忽然从那漆黑的祭坛里传出一阵阵唢呐声；四周都是参天古树，方形祭坛占地几百平米空旷坦荡独对苍天，我看不见那个吹唢呐的人，唯唢呐声在星光寥寥的夜空里低吟高唱，时而悲怆时而欢快，时面缠绵时而苍凉，或许这几个词都不足以形容它，我清清醒醒地听出它响在过去，一直在响，回旋飘转亘古不散。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;必有一天，我会听见喊我回去。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那时您可以想象一个孩子，他玩累了可他还没玩够呢。心里好些新奇的念头甚至等不及到明天。也可以想象是一个老人，无可质疑地走向他的安息地，走得任劳任怨。还可以想象一对热恋中的情人，互相一次次说“我一刻也不想离开你”，又互相一次次说“时间已经不早了”，时间不早了可我一刻刻也不想离开你，一刻也不想离开你可时间毕竟是不早了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我说不好我想不想回去。我说不好是想还是不想，还是无所谓。我说不好我是像那个孩子，还是像那个老人，还是像一个热恋中的情人。很可能是这样：我同时是他们三个。我来的时候是个孩子，他有那么多孩子气的念头所以才哭着喊着闹着要来，他一来一见到这个世界便立刻成了不要命的情人，而对一个情人来说，不管多么漫长的时光也是稍纵即逝，那时他便明白，每一步每一步，其实一步步都是走在回去的路上。当牵牛花初开的时节，葬礼的号角就已吹响。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是太阳，他每时每刻都是夕阳也都是旭日。当他熄灭着走下山去收尽苍凉残照之际，正是他在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然，那不是我。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，那不是我吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;宇宙以其不息的欲望将一个歌舞炼为永恒。这欲望有怎样一个人间的姓名，大可忽略不计。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;时间过的真的很快，转眼之间，已经毕业。今天无意间看到这篇文章，依稀记得上学时期&lt;code&gt;史铁生的我与地坛&lt;/code&gt;给我的感动。虽然命运对他的不公，让他充满着怨恨，但他从未停止对生命的思考。其实我们周围的人群，每个人都有自己需要面对的命运，而每个人的命运都布满了坎坷，只是呈现出不同的方式而已。生命本来就是不圆满的，生命的意义在于自己的选择和抗争之中，只有勇敢地面对命运的残缺，挑战命运，才能体现出生命的价值。&lt;br&gt;&lt;img src=&quot;http://ow4d8yam8.bkt.clouddn.com/248905-106.jpg&quot; alt=&quot;图0&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://blog.2019w.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="抒情散文" scheme="https://blog.2019w.cn/tags/%E6%8A%92%E6%83%85%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>$.ajax()方法详解</title>
    <link href="https://blog.2019w.cn/2017/09/11/ajax/"/>
    <id>https://blog.2019w.cn/2017/09/11/ajax/</id>
    <published>2017-09-10T16:30:46.000Z</published>
    <updated>2017-09-10T16:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>jquery中的ajax方法参数总是记不住，这里记录一下。<br><img src="https://show8.github.io/blogimage/ajax.jpg" alt="图1"><br><a id="more"></a></p><h3 id="1-url"><a href="#1-url" class="headerlink" title="1.url:"></a>1.url:</h3><p>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</p><h3 id="2-type"><a href="#2-type" class="headerlink" title="2.type:"></a>2.type:</h3><p>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p><h3 id="3-timeout"><a href="#3-timeout" class="headerlink" title="3.timeout:"></a>3.timeout:</h3><p>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p><h3 id="4-async"><a href="#4-async" class="headerlink" title="4.async:"></a>4.async:</h3><p>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p><h3 id="5-cache"><a href="#5-cache" class="headerlink" title="5.cache:"></a>5.cache:</h3><p>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p><h3 id="6-data"><a href="#6-data" class="headerlink" title="6.data:"></a>6.data:</h3><p>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</p><h3 id="7-dataType"><a href="#7-dataType" class="headerlink" title="7.dataType:"></a>7.dataType:</h3><p>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p><h3 id="8-beforeSend："><a href="#8-beforeSend：" class="headerlink" title="8.beforeSend："></a>8.beforeSend：</h3><p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>;   <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="9-complete："><a href="#9-complete：" class="headerlink" title="9.complete："></a>9.complete：</h3><p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>;    <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="10-success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。"><a href="#10-success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。" class="headerlink" title="10.success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。"></a>10.success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。</h3><pre><code>(1)由服务器返回，并根据dataType参数进行处理后的数据。(2)描述状态的字符串。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus</span>)</span>&#123;</div><div class="line">   <span class="comment">//data可能是xmlDoc、jsonObj、html、text等等</span></div><div class="line">   <span class="keyword">this</span>;  <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="11-error"><a href="#11-error" class="headerlink" title="11.error:"></a>11.error:</h3><p>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)</span>&#123;</div><div class="line">   <span class="comment">//通常情况下textStatus和errorThrown只有其中一个包含信息</span></div><div class="line">   <span class="keyword">this</span>;   <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="12-contentType："><a href="#12-contentType：" class="headerlink" title="12.contentType："></a>12.contentType：</h3><p>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</p><h3 id="13-dataFilter："><a href="#13-dataFilter：" class="headerlink" title="13.dataFilter："></a>13.dataFilter：</h3><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>)</span>&#123;</div><div class="line">    <span class="comment">//返回处理后的数据</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="14-dataFilter："><a href="#14-dataFilter：" class="headerlink" title="14.dataFilter："></a>14.dataFilter：</h3><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>)</span>&#123;</div><div class="line">    <span class="comment">//返回处理后的数据</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="15-global："><a href="#15-global：" class="headerlink" title="15.global："></a>15.global：</h3><p>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。</p><h3 id="16-ifModified："><a href="#16-ifModified：" class="headerlink" title="16.ifModified："></a>16.ifModified：</h3><p>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</p><h3 id="17-jsonp："><a href="#17-jsonp：" class="headerlink" title="17.jsonp："></a>17.jsonp：</h3><p>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</p><h3 id="18-username："><a href="#18-username：" class="headerlink" title="18.username："></a>18.username：</h3><p>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。</p><h3 id="19-password："><a href="#19-password：" class="headerlink" title="19.password："></a>19.password：</h3><p>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</p><h3 id="20-processData："><a href="#20-processData：" class="headerlink" title="20.processData："></a>20.processData：</h3><p>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</p><h3 id="21-scriptCharset："><a href="#21-scriptCharset：" class="headerlink" title="21.scriptCharset："></a>21.scriptCharset：</h3><p>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p><p>案例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         $.ajax(&#123;</div><div class="line">             type: <span class="string">"GET"</span>,</div><div class="line">             url: <span class="string">"test.json"</span>,</div><div class="line">             data: &#123;<span class="attr">username</span>:$(<span class="string">"#username"</span>).val(), <span class="attr">content</span>:$(<span class="string">"#content"</span>).val()&#125;,</div><div class="line">             dataType: <span class="string">"json"</span>,</div><div class="line">             success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                         $(<span class="string">'#resText'</span>).empty();   <span class="comment">//清空resText里面的所有内容</span></div><div class="line">                         <span class="keyword">var</span> html = <span class="string">''</span>; </div><div class="line">                         $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params">commentIndex, comment</span>)</span>&#123;</div><div class="line">                               html += <span class="string">'&lt;div class="comment"&gt;&lt;h6&gt;'</span> + comment[<span class="string">'username'</span>]</div><div class="line">                                         + <span class="string">':&lt;/h6&gt;&lt;p class="para"'</span> + comment[<span class="string">'content'</span>]</div><div class="line">                                         + <span class="string">'&lt;/p&gt;&lt;/div&gt;'</span>;</div><div class="line">                         &#125;);</div><div class="line">                         $(<span class="string">'#resText'</span>).html(html);</div><div class="line">                      &#125;</div><div class="line">         &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jquery中的ajax方法参数总是记不住，这里记录一下。&lt;br&gt;&lt;img src=&quot;https://show8.github.io/blogimage/ajax.jpg&quot; alt=&quot;图1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ajax" scheme="https://blog.2019w.cn/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>cookie 和session 的区别详解</title>
    <link href="https://blog.2019w.cn/2017/09/11/cookie%20and%20session/"/>
    <id>https://blog.2019w.cn/2017/09/11/cookie and session/</id>
    <published>2017-09-10T16:30:12.000Z</published>
    <updated>2017-09-10T16:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二者的定义"><a href="#二者的定义" class="headerlink" title="二者的定义:"></a>二者的定义:</h3><p><img src="https://show8.github.io/blogimage/cookie.jpg" alt="图1"><br><a id="more"></a><br>当你在浏览网站的时候，WEB服务器会先送一小小资料放在你的计算机上，Cookie会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。</p><p>具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择。</p><p>cookie机制。正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p><p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p><p>session机制。session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id）,如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p><p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"testform"</span> <span class="attr">action</span>=<span class="string">"/xxx"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"jsessionid"</span> <span class="attr">value</span>=<span class="string">"ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>实际上这种技术可以简单的用对action应用URL重写来代替。<br>cookie 和session 的区别：</p><pre><code>1. cookie数据存放在客户的浏览器上，session数据放在服务器上。2. cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。3. session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。4. 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。5. 所以个人建议：   将登陆信息等重要信息存放为SESSION   其他信息如果需要保留，可以放在COOKIE中</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;二者的定义&quot;&gt;&lt;a href=&quot;#二者的定义&quot; class=&quot;headerlink&quot; title=&quot;二者的定义:&quot;&gt;&lt;/a&gt;二者的定义:&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://show8.github.io/blogimage/cookie.jpg&quot; alt=&quot;图1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="cookie" scheme="https://blog.2019w.cn/tags/cookie/"/>
    
      <category term="session" scheme="https://blog.2019w.cn/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo，换了电脑怎么更新博客？</title>
    <link href="https://blog.2019w.cn/2017/07/13/Change%20the%20computer%20update%20the%20hexo%20blog/"/>
    <id>https://blog.2019w.cn/2017/07/13/Change the computer update the hexo blog/</id>
    <published>2017-07-13T04:04:44.000Z</published>
    <updated>2017-07-13T04:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于我的博客是在公司电脑上搭建的，一旦离开公司电脑在自己的电脑上更新博客，就要重新配置，到底该怎么配置呢？于是我在网上搜了一番，写下这篇博客，总结一下。</p><h3 id="安装-Git，安装Node-js"><a href="#安装-Git，安装Node-js" class="headerlink" title="安装 Git，安装Node.js"></a>安装 Git，安装Node.js</h3><p>首先肯定要先安装Git、Node.js,下面是下载的地址。</p><ol><li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><a id="more"></a></li></ol><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>安装完Git要设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;username@example.com&quot;</div></pre></td></tr></table></figure></p><h3 id="与github建立联系-设置SSH-keys"><a href="#与github建立联系-设置SSH-keys" class="headerlink" title="与github建立联系-设置SSH keys"></a>与github建立联系-设置SSH keys</h3><p>输入以下指令（邮箱就是你注册Github时候的邮箱）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;show_wlz@163.com&quot;</div></pre></td></tr></table></figure></p><p>之后一路回车即可。</p><p>完成后，会在用户主目录下生成.ssh目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH key密钥对，<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥。打开文件中<code>id_rsa.pub</code>直接复制其内容：</p><p><img src="https://show8.github.io/blogimage/hexo5.png" alt="图1"></p><p>接着，在GitHub右上方点击头像，选择<code>Settings</code>，在右边的<code>Personal settings</code>侧边栏选择<code>SSH and GPG Keys</code>。接着选择SSH keys右边的<code>New SSH key</code>,其中Title随便写，然后粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p><p>这时候可能会看到有警告，没事，输入“yes”就好</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在电脑桌面任意位置点击鼠标右键，选择Git Base。输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p><p>命令中-g是指全局安装hexo。</p><h3 id="文件夹拷贝"><a href="#文件夹拷贝" class="headerlink" title="文件夹拷贝"></a>文件夹拷贝</h3><p>安装好后，下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。</p><ol><li>讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置<code>_config.yml</code>，<code>theme文件夹里面的主题</code>，以及<code>source里面自己写的博客文件</code>，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是<code>scaffolds文件夹</code>（文章的模板）、<code>package.json</code>（说明使用哪些包）和<code>.gitignore</code>（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。<br>总结:<code>_config.yml</code>，<code>theme/</code>，<code>source/</code>，<code>scaffolds/</code>，<code>package.json</code>，<code>.gitignore</code>，是需要拷贝的。</li><li>再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是<code>.git文件</code>，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹<code>node_modules</code>（在用npm install会重新生成），<code>public</code>（这个在用hexo g时会重新生成），<code>.deploy_git文件夹</code>（在使用hexo d时也会重新生成），<code>db.json文件</code>。其实上面这些文件也就是是.gitignore文件里面记载的可以忽略的内容。<br>总结：<code>.git/</code>，<code>node_modules/</code>，<code>public/</code>，<code>.deploy_git/</code>，<code>db.json文件</code>需要删除。</li></ol><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><p>在新拷贝的文件夹里，右键选择<code>git bash</code>，使用 <code>npm install</code> 命令，进行模块安装。<br>这里不要使用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo      init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h3 id="安装一些必要组件"><a href="#安装一些必要组件" class="headerlink" title="安装一些必要组件"></a>安装一些必要组件</h3><p>如果在node_modules里面有的，就不要重复安装了：</p><ol><li><p>为了使用hexo d来部署到git上，需要安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></li><li><p>为了建立RSS订阅，需要安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure></li><li><p>为了建立站点地图，需要安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure></li></ol><p>最后输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><p>如果没有出错，恭喜你转移成功！！</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>hexo支持更加简单的命令格式了，比如：</p><ul><li>hexo g == hexo generate</li><li>hexo d == hexo deploy</li><li>hexo s == hexo server</li><li>hexo n == hexo new</li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>非常感谢您花时间阅读我的博客，希望对您有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于我的博客是在公司电脑上搭建的，一旦离开公司电脑在自己的电脑上更新博客，就要重新配置，到底该怎么配置呢？于是我在网上搜了一番，写下这篇博客，总结一下。&lt;/p&gt;
&lt;h3 id=&quot;安装-Git，安装Node-js&quot;&gt;&lt;a href=&quot;#安装-Git，安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 Git，安装Node.js&quot;&gt;&lt;/a&gt;安装 Git，安装Node.js&lt;/h3&gt;&lt;p&gt;首先肯定要先安装Git、Node.js,下面是下载的地址。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.2019w.cn/tags/Git/"/>
    
      <category term="GitHub" scheme="https://blog.2019w.cn/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://blog.2019w.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>毕业季</title>
    <link href="https://blog.2019w.cn/2017/07/13/Graduation%20season/"/>
    <id>https://blog.2019w.cn/2017/07/13/Graduation season/</id>
    <published>2017-07-13T01:51:34.000Z</published>
    <updated>2017-07-13T01:51:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>时光匆匆，当我伸手去拦时，它却如微风般悄悄地从指边溜掉了。<br>我的大学生活就如这流水般缓缓而又匆匆地流淌着到了她的尽头，留给我的，是无尽的感慨收获和即将入海的宽广无限。<br><img src="https://show8.github.io/blogimage/by1.jpg" alt="图1"><br><a id="more"></a><br>毕业季节，愿我们的友谊永远不散。<br>再深情望一眼，曾经充满回忆的校园。<br>回忆终是回忆,到最后发现什么都不会有</p><p><img src="https://show8.github.io/blogimage/by2.jpg" alt="图2"></p><p>曲终人散,唱不出世间温暖;诩诩文字,写不尽心中悲喜!<br>毕业了，满足是最真实的财富。贪婪是最真实的贫穷<br>毕业了，在那校园里面还残留着我们多少身影，还有多少回忆，而我们却要离开<br>三年的记忆，忘了吧。只为会笑的明天，不带走任何牵连、一点思念。只是不想流泪</p><p><img src="https://show8.github.io/blogimage/by4.jpg" alt="图3"></p><p>毕业了，青春在无形之中离去，我们即将翻开人生的另一页。<br>毕业了，全心全意却是一生一世。海誓山盟只是一时敷衍。</p><p><img src="https://show8.github.io/blogimage/by5.jpg" alt="图4"></p><p>在这个初夏。别了母校，别了朋友，别了敬爱的老师。一切来的太快了，我们甚至还没做好准备，已经毕业了，在几年的生涯中有快乐、悲伤的事还来不及回忆，一切结束了。<br>毕业了，也许还会怀念寝室卧谈会那轻松，愉悦的感觉。<br>朋友别哭 我依然是你心灵的归宿。未来我们一起加油。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光匆匆，当我伸手去拦时，它却如微风般悄悄地从指边溜掉了。&lt;br&gt;我的大学生活就如这流水般缓缓而又匆匆地流淌着到了她的尽头，留给我的，是无尽的感慨收获和即将入海的宽广无限。&lt;br&gt;&lt;img src=&quot;https://show8.github.io/blogimage/by1.jpg&quot; alt=&quot;图1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://blog.2019w.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="毕业" scheme="https://blog.2019w.cn/tags/%E6%AF%95%E4%B8%9A/"/>
    
      <category term="2017.06.17" scheme="https://blog.2019w.cn/tags/2017-06-17/"/>
    
  </entry>
  
  <entry>
    <title>Github pages + Hexo 博客 spfk 主题使用LiveRe评论系统</title>
    <link href="https://blog.2019w.cn/2017/06/11/Hexo-spfk-LiveRe/"/>
    <id>https://blog.2019w.cn/2017/06/11/Hexo-spfk-LiveRe/</id>
    <published>2017-06-11T01:42:06.000Z</published>
    <updated>2017-06-11T01:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要用Github Page搭建博客，借用<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">阮一峰</a>的话说，喜欢写Blog的人，会经历三个阶段:</p><ul><li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li><li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li><li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li></ul><p>哈哈 我目前就处于第一阶段，捣鼓着玩的，整个搭建过程都是照着网上做的，期间也遇到了些问题。第一次接触 <code>GitHub</code>， <code>Github</code>是一个全世界程序员聚集的地方，大家相互分享自己写的代码，提升别人，也提升自己。<br>本文主要是对使用GitHub Pages和Hexo搭建独立博客的一些总结。如果是小白的话，可以先花时间去了解下：<br><a id="more"></a></p><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a> </li><li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li><li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li><li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li></ul><h3 id="创建对应仓库"><a href="#创建对应仓库" class="headerlink" title="创建对应仓库"></a>创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。<br>简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li></ol><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h3 id="安装-Git，安装Node-js"><a href="#安装-Git，安装Node-js" class="headerlink" title="安装 Git，安装Node.js"></a>安装 Git，安装Node.js</h3><ol><li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li></ol><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>安装完Git要设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;username@example.com&quot;</div></pre></td></tr></table></figure></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在电脑桌面任意位置点击鼠标右键，选择Git Base。输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p><p>命令中-g是指全局安装hexo。</p><p>安装完成后，在你喜爱的文件夹下（如C:\Hexo），在C:\Hexo内点击鼠标右键，选择Git Bash，执行以下指令，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p><p>接下来是安装依赖包,接着输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p><p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在C:\Hexo)，然后到浏览器输入localhost:4000进行本地查看。这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>到你刚刚创建对应仓库下，点击绿色按钮clone or download，找到以下内容：</p><p><img src="https://show8.github.io/blogimage/hexo2.jpg" alt="配置文件图1"></p><p>复制里面的地址。然后编辑_config.yml文件（在C:\Hexo下）。</p><p><img src="https://show8.github.io/blogimage/hexo3.png" alt="配置文件图2"></p><p>修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。</p><p><img src="https://show8.github.io/blogimage/hexo1.png" alt="配置文件图3"></p><h3 id="与github建立联系-设置SSH-keys"><a href="#与github建立联系-设置SSH-keys" class="headerlink" title="与github建立联系-设置SSH keys"></a>与github建立联系-设置SSH keys</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，我用的是SSH的方法。在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al ~/.ssh</div></pre></td></tr></table></figure></p><p>如果不存在没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件</p><p><img src="https://show8.github.io/blogimage/hexo4.png" alt="配置文件图4"></p><p>输入以下指令（邮箱就是你注册Github时候的邮箱）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;show_wlz@163.com&quot;</div></pre></td></tr></table></figure></p><p>之后一路回车即可。</p><p>然后键入以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-agent -s</div></pre></td></tr></table></figure></p><p>继续输入指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>输入之后，在我这里是出错了，不知道你的有没有出错。<br>如果你的也是这样子出错了的话，就输入以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eval `ssh-agent -s`</div><div class="line">ssh-add</div></pre></td></tr></table></figure></p><p>其中“`”是<code>esc</code>键下面的。别按错喽！（我错过/(ㄒoㄒ)/~~）</p><p>到了这一步，就可以添加SSH key到你的Github账户了。输入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p><p>当然你也可以打开文件直接复制其内容（下图中文件就是刚刚拷贝的Key）：</p><p><img src="https://show8.github.io/blogimage/hexo5.png" alt="配置文件图5"></p><p>然后，在GitHub右上方点击头像，选择<code>Settings</code>，在右边的<code>Personal settings</code>侧边栏选择<code>SSH and GPG Keys</code>。接着选择SSH keys右边的<code>New SSH key</code>,其中Title随便写，然后粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p><p>这时候可能会看到有警告，没事，输入“yes”就好。</p><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p><p>最后一步，快要成功了，输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：</p><p><a href="https://showcc.github.io/" target="_blank" rel="external">https://showcc.github.io/</a></p><h3 id="安装spfk主题"><a href="#安装spfk主题" class="headerlink" title="安装spfk主题"></a>安装spfk主题</h3><p>在hexo文件夹（C:\Hexo）内点击鼠标右键，选择Git Bash，执行以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div></pre></td></tr></table></figure></p><p>接着修改hexo根目录下的配置文件 <code>_config.yml</code> 的theme属性即 <code>theme: spfk</code>。其他的主题也类似操作。<br>然后进行更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/spfk</div><div class="line">git pull</div></pre></td></tr></table></figure></p><p>最后输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><h3 id="添加来必力评论"><a href="#添加来必力评论" class="headerlink" title="添加来必力评论"></a>添加来必力评论</h3><p>首先进入<a href="https://livere.com/" target="_blank" rel="external">来必力</a>网站进行注册，注册完后，点击导航中的<code>安装</code>，选择<code>City版是一款适合所有人使用的免费版本。</code>点击<code>现在安装</code>,接下来根据自身需要进行一些设置，绑定需要添加来必力评论的网址。并获取代码。<br>打开文件夹<code>hexo\themes\spfk\layout\_partial\comments</code>添加一个文件，这里我命名为<code>livere.ejs</code>，把来必力获取的代码拷贝进去。</p><p><img src="https://show8.github.io/blogimage/hexo7.png" alt="添加来必力评论图1"></p><p>由于本主题默认是没有来必力评论的，所以要自己进行添加。<br>打开文件夹<code>hexo\themes\spfk\layout\_partial</code>下的<code>article.ejs</code>文件。</p><p><img src="https://show8.github.io/blogimage/hexo8.png" alt="添加来必力评论图2"></p><p>添加以下内容：</p><p><img src="https://show8.github.io/blogimage/hexo6.png" alt="添加来必力评论图3"></p><p>打开spfk主题配置文件<code>hexo\themes\spfk</code>下的<code>_config.yml</code>添加<code>livere_uid:xxxxxx</code>。</p><p><img src="https://show8.github.io/blogimage/hexo9.png" alt="添加来必力评论图4"></p><p>其中的值为来必力获取代码中的<code>data-uid</code>值。</p><p><img src="https://show8.github.io/blogimage/hexo9.png" alt="添加来必力评论图5"></p><p>最后输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><p>OK，来必力评论添加完成，输入网址试试！</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>hexo支持更加简单的命令格式了，比如：</p><ul><li>hexo g == hexo generate</li><li>hexo d == hexo deploy</li><li>hexo s == hexo server</li><li>hexo n == hexo new</li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>非常感谢您花时间阅读我的博客，希望对您有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么要用Github Page搭建博客，借用&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰&lt;/a&gt;的话说，喜欢写Blog的人，会经历三个阶段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。&lt;/li&gt;
&lt;li&gt;第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。&lt;/li&gt;
&lt;li&gt;第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈哈 我目前就处于第一阶段，捣鼓着玩的，整个搭建过程都是照着网上做的，期间也遇到了些问题。第一次接触 &lt;code&gt;GitHub&lt;/code&gt;， &lt;code&gt;Github&lt;/code&gt;是一个全世界程序员聚集的地方，大家相互分享自己写的代码，提升别人，也提升自己。&lt;br&gt;本文主要是对使用GitHub Pages和Hexo搭建独立博客的一些总结。如果是小白的话，可以先花时间去了解下：&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.2019w.cn/tags/Git/"/>
    
      <category term="GitHub" scheme="https://blog.2019w.cn/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://blog.2019w.cn/tags/Hexo/"/>
    
      <category term="spfk" scheme="https://blog.2019w.cn/tags/spfk/"/>
    
      <category term="LiveRe" scheme="https://blog.2019w.cn/tags/LiveRe/"/>
    
  </entry>
  
  <entry>
    <title>生活</title>
    <link href="https://blog.2019w.cn/2017/05/28/Life%20emotion/"/>
    <id>https://blog.2019w.cn/2017/05/28/Life emotion/</id>
    <published>2017-05-28T09:40:00.000Z</published>
    <updated>2017-05-28T09:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Life doesn’t get easier, you just get stronger.</p><p>具体也不知道在这里呆了多久</p><p>有开心也有难过</p><p>有时以为明天会更好，早晨推开窗，发现淅淅沥沥在下着小雨。<br><a id="more"></a><br><img src="https://show8.github.io/blogimage/Life.jpg" alt="hello"></p><p>最初</p><p>亲人不在身边</p><p>没有朋友</p><p>没人做伴</p><p>兴许习惯了，兴许并不晓得孤单是种什么感觉</p><p>后来</p><p>认识了新朋友</p><p>有人一起逛街，一起吃饭，一起玩耍，</p><p>会一起 分享快乐，抚平悲伤，无言时给你一个拥抱。</p><p>也许青春就该吵吵闹闹</p><p>过了很久</p><p>大家都要考虑去留的问题</p><p>有人回家嫁人相夫教子</p><p>有人离家许久，思乡心切，决定回家</p><p>也有人徘徊许久，不知所措</p><p>我们来自五湖四海</p><p>就此一别</p><p>再见太难</p><p>小小的我们，在这个世界上微乎其微</p><p>想到这，就难免心情低落</p><p>也许有人会说你太感性</p><p>这本是正常的事情</p><p>不必为此伤神</p><p>可你任何事都那么理性 的话，你也太不可爱了</p><p>如今</p><p>一切尚好</p><p>有人会走，有人会来</p><p>陪你的人很多，不知是不是你想要的那个</p><p>开心也好，不开心也罢</p><p>一天二十四小时</p><p>多相识一秒，你在我心中就多一份重量</p><p>不知以后会如何</p><p>目前应该还算不错的吧</p><p>太远的事情就不愿意去思考那么多了</p><p>总之</p><p>认真，你就输了</p><p>除非你一直认真下去</p><p>闲扯颇多，文笔太差，见谅见谅！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Life doesn’t get easier, you just get stronger.&lt;/p&gt;
&lt;p&gt;具体也不知道在这里呆了多久&lt;/p&gt;
&lt;p&gt;有开心也有难过&lt;/p&gt;
&lt;p&gt;有时以为明天会更好，早晨推开窗，发现淅淅沥沥在下着小雨。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://blog.2019w.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="雨" scheme="https://blog.2019w.cn/tags/%E9%9B%A8/"/>
    
      <category term="生活" scheme="https://blog.2019w.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>燕诗示刘叟</title>
    <link href="https://blog.2019w.cn/2017/05/28/Mother&#39;s%20Day/"/>
    <id>https://blog.2019w.cn/2017/05/28/Mother&#39;s Day/</id>
    <published>2017-05-28T09:39:54.000Z</published>
    <updated>2017-05-28T09:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>A mother’s love is like a circle. It has no begining and no ending.<br><a id="more"></a><br><img src="https://show8.github.io/blogimage/mother.jpg" alt="hello"></p><p>梁上有双燕，翩翩雄与雌。</p><p>衔泥两椽间，一巢生四儿。</p><p>四儿日夜长，索食声孜孜。</p><p>青虫不易捕，黄口无饱期。</p><p>觜爪虽欲敝，心力不知疲。</p><p>须臾十来往，犹恐巢中饥。</p><p>辛勤三十日，母瘦雏渐肥。</p><p>喃喃教言语，一一刷毛衣。</p><p>一旦羽翼成，引上庭树枝。</p><p>举翅不回顾，随风四散飞。</p><p>雌雄空中鸣，声尽呼不归。</p><p>却入空巢里，啁啾终夜悲。</p><p>燕燕尔勿悲，尔当返自思。</p><p>思尔为雏日，高飞背母时。</p><p>当时父母念，今日尔应知。</p><p>祝愿天下所有的父母，平安健康 幸福一生！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A mother’s love is like a circle. It has no begining and no ending.&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://blog.2019w.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="母亲节" scheme="https://blog.2019w.cn/tags/%E6%AF%8D%E4%BA%B2%E8%8A%82/"/>
    
      <category term="诗词" scheme="https://blog.2019w.cn/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
